
WirelessCO2Fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000093a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000019  00800060  00800060  000009ae  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000009ae  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d8  00000000  00000000  000009de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000140c  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000371  00000000  00000000  00001ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006bd  00000000  00000000  00002233  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002c8  00000000  00000000  000028f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000516  00000000  00000000  00002bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000ea3  00000000  00000000  000030ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000110  00000000  00000000  00003f71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	18 c0       	rjmp	.+48     	; 0x32 <__ctors_end>
   2:	27 c0       	rjmp	.+78     	; 0x52 <__bad_interrupt>
   4:	26 c0       	rjmp	.+76     	; 0x52 <__bad_interrupt>
   6:	3a c0       	rjmp	.+116    	; 0x7c <__vector_3>
   8:	24 c0       	rjmp	.+72     	; 0x52 <__bad_interrupt>
   a:	23 c0       	rjmp	.+70     	; 0x52 <__bad_interrupt>
   c:	22 c0       	rjmp	.+68     	; 0x52 <__bad_interrupt>
   e:	21 c0       	rjmp	.+66     	; 0x52 <__bad_interrupt>
  10:	20 c0       	rjmp	.+64     	; 0x52 <__bad_interrupt>
  12:	1f c0       	rjmp	.+62     	; 0x52 <__bad_interrupt>
  14:	1e c0       	rjmp	.+60     	; 0x52 <__bad_interrupt>
  16:	79 c1       	rjmp	.+754    	; 0x30a <__vector_11>
  18:	1c c0       	rjmp	.+56     	; 0x52 <__bad_interrupt>
  1a:	1b c0       	rjmp	.+54     	; 0x52 <__bad_interrupt>
  1c:	1a c0       	rjmp	.+52     	; 0x52 <__bad_interrupt>
  1e:	19 c0       	rjmp	.+50     	; 0x52 <__bad_interrupt>
  20:	18 c0       	rjmp	.+48     	; 0x52 <__bad_interrupt>

00000022 <NRF24_BASE_ADDR>:
  22:	c8 c8                                               ..

00000024 <NRF24_INIT_DATA>:
  24:	26 07 23 01 24 73 3d 06 21 01 22 01 3c 01           &.#.$s=.!.".<.

00000032 <__ctors_end>:
  32:	11 24       	eor	r1, r1
  34:	1f be       	out	0x3f, r1	; 63
  36:	cf e5       	ldi	r28, 0x5F	; 95
  38:	d1 e0       	ldi	r29, 0x01	; 1
  3a:	de bf       	out	0x3e, r29	; 62
  3c:	cd bf       	out	0x3d, r28	; 61

0000003e <__do_clear_bss>:
  3e:	20 e0       	ldi	r18, 0x00	; 0
  40:	a0 e6       	ldi	r26, 0x60	; 96
  42:	b0 e0       	ldi	r27, 0x00	; 0
  44:	01 c0       	rjmp	.+2      	; 0x48 <.do_clear_bss_start>

00000046 <.do_clear_bss_loop>:
  46:	1d 92       	st	X+, r1

00000048 <.do_clear_bss_start>:
  48:	a9 37       	cpi	r26, 0x79	; 121
  4a:	b2 07       	cpc	r27, r18
  4c:	e1 f7       	brne	.-8      	; 0x46 <.do_clear_bss_loop>
  4e:	2a d2       	rcall	.+1108   	; 0x4a4 <main>
  50:	72 c4       	rjmp	.+2276   	; 0x936 <_exit>

00000052 <__bad_interrupt>:
  52:	d6 cf       	rjmp	.-84     	; 0x0 <__vectors>

00000054 <EEPROM_read>:
	uint8_t idx = EEPROM_read(EPROM_SaveRegIdx);
	if(idx == 0xFF) idx = 0;
	idx = EPROM_SaveReg + idx * 0x20;
	for(uint8_t i = 0; i <= 0x17; i++) {
		NRF24_ReadArray(NRF24_CMD_R_REGISTER + i, buf, 1);
		EEPROM_write(idx++, buf[0]);
  54:	e1 99       	sbic	0x1c, 1	; 28
	}
	NRF24_ReadArray(NRF24_CMD_R_REGISTER + 0x1C, buf, 1); // at 0x18
  56:	fe cf       	rjmp	.-4      	; 0x54 <EEPROM_read>
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	9f bb       	out	0x1f, r25	; 31
  5c:	8e bb       	out	0x1e, r24	; 30
  5e:	e0 9a       	sbi	0x1c, 0	; 28
  60:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(idx++, buf[0]);
  62:	08 95       	ret

00000064 <EEPROM_write>:
  64:	e1 99       	sbic	0x1c, 1	; 28
  66:	fe cf       	rjmp	.-4      	; 0x64 <EEPROM_write>
  68:	f8 94       	cli
	NRF24_ReadArray(NRF24_CMD_R_REGISTER + 0x1D, buf, 1); // at 0x19
  6a:	1c ba       	out	0x1c, r1	; 28
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	9f bb       	out	0x1f, r25	; 31
  70:	8e bb       	out	0x1e, r24	; 30
  72:	6d bb       	out	0x1d, r22	; 29
  74:	e2 9a       	sbi	0x1c, 2	; 28
	EEPROM_write(idx++, buf[0]);
  76:	e1 9a       	sbi	0x1c, 1	; 28
  78:	78 94       	sei
  7a:	08 95       	ret

0000007c <__vector_3>:
  7c:	1f 92       	push	r1
	EEPROM_write(idx++, st);
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
	EEPROM_write(idx++, cnt);
  86:	8f 93       	push	r24
  88:	80 91 6f 00 	lds	r24, 0x006F
  8c:	81 11       	cpse	r24, r1
	EEPROM_write(idx++, Timer);
  8e:	0a c0       	rjmp	.+20     	; 0xa4 <__vector_3+0x28>
  90:	80 91 70 00 	lds	r24, 0x0070
  94:	81 11       	cpse	r24, r1
  96:	06 c0       	rjmp	.+12     	; 0xa4 <__vector_3+0x28>
	
	idx = EEPROM_read(EPROM_SaveRegIdx) + 1;
  98:	86 b3       	in	r24, 0x16	; 22
  9a:	80 95       	com	r24
  9c:	87 70       	andi	r24, 0x07	; 7
  9e:	80 93 72 00 	sts	0x0072, r24
	if(idx > IDX_MAX) idx = 0;
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__vector_3+0x2c>
  a4:	10 92 72 00 	sts	0x0072, r1
	EEPROM_write(EPROM_SaveRegIdx, idx);
  a8:	8f 91       	pop	r24
}
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <Delay10us>:
  b4:	88 23       	and	r24, r24
  b6:	31 f0       	breq	.+12     	; 0xc4 <Delay10us+0x10>
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	9a 95       	dec	r25
  bc:	f1 f7       	brne	.-4      	; 0xba <Delay10us+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	00 00       	nop
  c0:	81 50       	subi	r24, 0x01	; 1
  c2:	f8 cf       	rjmp	.-16     	; 0xb4 <Delay10us>
	uint8_t Pause;		// sec, between next scan
} __attribute__ ((packed)) master_data; // = 4 bytes

#if(1)
void Delay10us(uint8_t ms) {
	while(ms-- > 0) _delay_us(10); wdt_reset();
  c4:	a8 95       	wdr
  c6:	08 95       	ret

000000c8 <Delay100ms>:
	while(ms-- > 0) {
		_delay_ms(1); wdt_reset();
	}
}
void Delay100ms(unsigned int ms) {
	while(ms-- > 0) {
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	49 f0       	breq	.+18     	; 0xde <Delay100ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	e7 ea       	ldi	r30, 0xA7	; 167
  ce:	f1 e6       	ldi	r31, 0x61	; 97
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <Delay100ms+0x8>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <Delay100ms+0xe>
  d6:	00 00       	nop
		_delay_ms(100); wdt_reset();
  d8:	a8 95       	wdr
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f5 cf       	rjmp	.-22     	; 0xc8 <Delay100ms>
	}
}
  de:	08 95       	ret

000000e0 <FlashLED>:

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
	while (num-- > 0) {
  ea:	f8 2e       	mov	r15, r24
		LED1_OFF;
		Delay100ms(toff);
  ec:	06 2f       	mov	r16, r22
  ee:	10 e0       	ldi	r17, 0x00	; 0
		LED1_ON;
		Delay100ms(ton);
  f0:	c4 2f       	mov	r28, r20
  f2:	d0 e0       	ldi	r29, 0x00	; 0
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
		LED1_OFF;
  f4:	d9 98       	cbi	0x1b, 1	; 27
		_delay_ms(100); wdt_reset();
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
  f6:	ff 20       	and	r15, r15
  f8:	39 f0       	breq	.+14     	; 0x108 <FlashLED+0x28>
		LED1_OFF;
		Delay100ms(toff);
  fa:	c8 01       	movw	r24, r16
  fc:	e5 df       	rcall	.-54     	; 0xc8 <Delay100ms>
		LED1_ON;
  fe:	d9 9a       	sbi	0x1b, 1	; 27
		Delay100ms(ton);
 100:	ce 01       	movw	r24, r28
 102:	e2 df       	rcall	.-60     	; 0xc8 <Delay100ms>
 104:	fa 94       	dec	r15
 106:	f6 cf       	rjmp	.-20     	; 0xf4 <FlashLED+0x14>
	}
	LED1_OFF;
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	ff 90       	pop	r15
 112:	08 95       	ret

00000114 <SPI_WriteReadByte>:
	NRF24_CMD_W_REGISTER | NRF24_REG_DYNPD,		0b000001 // Dynamic payload
};
const uint8_t NRF24_BASE_ADDR[] PROGMEM = { 0xC8, 0xC8 }; // Address MSBs: 2..3

uint8_t SPI_WriteReadByte(uint8_t data) {
	USIDR = data;
 114:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); // clear overflow flag
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	8e b9       	out	0x0e, r24	; 14
	do {
		USICR = (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);
 11a:	8b e1       	ldi	r24, 0x1B	; 27
 11c:	8d b9       	out	0x0d, r24	; 13
	} while((USISR & (1<<USIOIF)) == 0);
 11e:	76 9b       	sbis	0x0e, 6	; 14
 120:	fd cf       	rjmp	.-6      	; 0x11c <SPI_WriteReadByte+0x8>
	return USIDR;
 122:	8f b1       	in	r24, 0x0f	; 15
}
 124:	08 95       	ret

00000126 <NRF24_ReadArray>:
	NRF24_SET_CSN_HI;
	return result;
}

void NRF24_ReadArray(uint8_t cmd, uint8_t *array, uint8_t len)
{
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	00 d0       	rcall	.+0      	; 0x132 <NRF24_ReadArray+0xc>
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 138:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 13a:	69 83       	std	Y+1, r22	; 0x01
 13c:	7a 83       	std	Y+2, r23	; 0x02
 13e:	ea df       	rcall	.-44     	; 0x114 <SPI_WriteReadByte>
	while(len-- > 0) *array++ = SPI_WriteReadByte(NRF24_CMD_NOP);
 140:	69 81       	ldd	r22, Y+1	; 0x01
 142:	e6 2e       	mov	r14, r22
 144:	7a 81       	ldd	r23, Y+2	; 0x02
 146:	f7 2e       	mov	r15, r23
 148:	16 0f       	add	r17, r22
 14a:	1e 15       	cp	r17, r14
 14c:	31 f0       	breq	.+12     	; 0x15a <NRF24_ReadArray+0x34>
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	e1 df       	rcall	.-62     	; 0x114 <SPI_WriteReadByte>
 152:	f7 01       	movw	r30, r14
 154:	81 93       	st	Z+, r24
 156:	7f 01       	movw	r14, r30
 158:	f8 cf       	rjmp	.-16     	; 0x14a <NRF24_ReadArray+0x24>
	NRF24_SET_CSN_HI;
 15a:	db 9a       	sbi	0x1b, 3	; 27
}
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	08 95       	ret

0000016c <NRF24_WriteByte>:

void NRF24_WriteByte(uint8_t cmd, uint8_t value)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	1f 92       	push	r1
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
	NRF24_SET_CSN_LOW;
 176:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 178:	69 83       	std	Y+1, r22	; 0x01
 17a:	cc df       	rcall	.-104    	; 0x114 <SPI_WriteReadByte>
	SPI_WriteReadByte(value);
 17c:	69 81       	ldd	r22, Y+1	; 0x01
 17e:	86 2f       	mov	r24, r22
 180:	c9 df       	rcall	.-110    	; 0x114 <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 182:	db 9a       	sbi	0x1b, 3	; 27
}
 184:	0f 90       	pop	r0
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <NRF24_WriteArray>:

void NRF24_WriteArray(int8_t cmd, uint8_t *array, uint8_t len)
{
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 d0       	rcall	.+0      	; 0x198 <NRF24_WriteArray+0xc>
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 19e:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 1a0:	69 83       	std	Y+1, r22	; 0x01
 1a2:	7a 83       	std	Y+2, r23	; 0x02
 1a4:	b7 df       	rcall	.-146    	; 0x114 <SPI_WriteReadByte>
	while(len-- > 0) SPI_WriteReadByte(*array++);
 1a6:	69 81       	ldd	r22, Y+1	; 0x01
 1a8:	e6 2e       	mov	r14, r22
 1aa:	7a 81       	ldd	r23, Y+2	; 0x02
 1ac:	f7 2e       	mov	r15, r23
 1ae:	16 0f       	add	r17, r22
 1b0:	1e 15       	cp	r17, r14
 1b2:	29 f0       	breq	.+10     	; 0x1be <NRF24_WriteArray+0x32>
 1b4:	f7 01       	movw	r30, r14
 1b6:	81 91       	ld	r24, Z+
 1b8:	7f 01       	movw	r14, r30
 1ba:	ac df       	rcall	.-168    	; 0x114 <SPI_WriteReadByte>
 1bc:	f9 cf       	rjmp	.-14     	; 0x1b0 <NRF24_WriteArray+0x24>
	NRF24_SET_CSN_HI;
 1be:	db 9a       	sbi	0x1b, 3	; 27
}
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	08 95       	ret

000001d0 <NRF24_SendCommand>:

uint8_t NRF24_SendCommand(uint8_t cmd) // Send command & receive status
{
	NRF24_SET_CSN_LOW;
 1d0:	db 98       	cbi	0x1b, 3	; 27
	uint8_t result = SPI_WriteReadByte(cmd);
 1d2:	a0 df       	rcall	.-192    	; 0x114 <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 1d4:	db 9a       	sbi	0x1b, 3	; 27
	return result;
}
 1d6:	08 95       	ret

000001d8 <NRF24_SetMode>:
	if(idx > IDX_MAX) idx = 0;
	EEPROM_write(EPROM_SaveRegIdx, idx);
}

void NRF24_SetMode(uint8_t mode) // Set mode in CONFIG reg
{
 1d8:	cf 93       	push	r28
 1da:	c8 2f       	mov	r28, r24
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG | (1<<NRF24_BIT_PWR_UP) | mode);
 1dc:	68 2f       	mov	r22, r24
 1de:	6e 67       	ori	r22, 0x7E	; 126
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	c4 df       	rcall	.-120    	; 0x16c <NRF24_WriteByte>
	if(mode & NRF24_ReceiveMode) { // Receive mode
 1e4:	c0 ff       	sbrs	r28, 0
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <NRF24_SetMode+0x18>
		//NRF24_SendCommand(NRF24_CMD_FLUSH_RX);
		NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 1e8:	60 e7       	ldi	r22, 0x70	; 112
 1ea:	87 e2       	ldi	r24, 0x27	; 39
 1ec:	bf df       	rcall	.-130    	; 0x16c <NRF24_WriteByte>
		NRF24_SET_CE_HI; // start receiving
 1ee:	da 9a       	sbi	0x1b, 2	; 27
	}
}
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <NRF24_TransmitShockBurst>:
}

// Transmit payload, than receive payload.
// return 0 if success, 1 - Payload not returned, 2 - Max retransmit reached, 3 - return payload len error, 4 - module not responding.
uint8_t NRF24_TransmitShockBurst(uint8_t send_len, uint8_t receive_len)
{
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	1f 92       	push	r1
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	48 2f       	mov	r20, r24
 206:	16 2f       	mov	r17, r22
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 208:	60 e7       	ldi	r22, 0x70	; 112
 20a:	87 e2       	ldi	r24, 0x27	; 39
 20c:	49 83       	std	Y+1, r20	; 0x01
 20e:	ae df       	rcall	.-164    	; 0x16c <NRF24_WriteByte>
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
 210:	81 ee       	ldi	r24, 0xE1	; 225
 212:	de df       	rcall	.-68     	; 0x1d0 <NRF24_SendCommand>
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, NRF24_Buffer, send_len);
 214:	49 81       	ldd	r20, Y+1	; 0x01
 216:	64 e7       	ldi	r22, 0x74	; 116
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	80 ea       	ldi	r24, 0xA0	; 160
 21c:	b7 df       	rcall	.-146    	; 0x18c <NRF24_WriteArray>
	NRF24_SET_CE_HI; // Start transmission
 21e:	da 9a       	sbi	0x1b, 2	; 27
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 220:	01 e0       	ldi	r16, 0x01	; 1
	{
		Delay10us(10);
 222:	8a e0       	ldi	r24, 0x0A	; 10
 224:	47 df       	rcall	.-370    	; 0xb4 <Delay10us>
		st = NRF24_SendCommand(NRF24_CMD_NOP);
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	d3 df       	rcall	.-90     	; 0x1d0 <NRF24_SendCommand>
 22a:	f8 2e       	mov	r15, r24
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
 22c:	80 73       	andi	r24, 0x30	; 48
 22e:	11 f4       	brne	.+4      	; 0x234 <NRF24_TransmitShockBurst+0x40>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, NRF24_Buffer, send_len);
	NRF24_SET_CE_HI; // Start transmission
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 230:	0f 5f       	subi	r16, 0xFF	; 255
 232:	b9 f7       	brne	.-18     	; 0x222 <NRF24_TransmitShockBurst+0x2e>
	{
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	NRF24_SET_CE_LOW;
 234:	da 98       	cbi	0x1b, 2	; 27
	if(i == 0) return 4;
 236:	00 23       	and	r16, r16
 238:	21 f1       	breq	.+72     	; 0x282 <NRF24_TransmitShockBurst+0x8e>
	// debug
	//NRF_save_registers(st, i);
	//
	NRF24_ReadArray(NRF24_CMD_R_REGISTER | NRF24_REG_FIFO_STATUS, NRF24_Buffer, 1); // get FIFO_STATUS
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	64 e7       	ldi	r22, 0x74	; 116
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	87 e1       	ldi	r24, 0x17	; 23
 242:	71 df       	rcall	.-286    	; 0x126 <NRF24_ReadArray>
	if((st & (1<<NRF24_BIT_RX_DR)) || (NRF24_Buffer[0] & (1<<NRF24_BIT_RX_EMPTY)) == 0) {
 244:	f6 fc       	sbrc	r15, 6
 246:	04 c0       	rjmp	.+8      	; 0x250 <NRF24_TransmitShockBurst+0x5c>
 248:	80 91 74 00 	lds	r24, 0x0074
 24c:	80 fd       	sbrc	r24, 0
 24e:	15 c0       	rjmp	.+42     	; 0x27a <NRF24_TransmitShockBurst+0x86>
		NRF24_Buffer[0] = 0xFF;
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	80 93 74 00 	sts	0x0074, r24
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	64 e7       	ldi	r22, 0x74	; 116
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	80 e6       	ldi	r24, 0x60	; 96
 25e:	63 df       	rcall	.-314    	; 0x126 <NRF24_ReadArray>
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
 260:	80 91 74 00 	lds	r24, 0x0074
 264:	81 32       	cpi	r24, 0x21	; 33
 266:	78 f4       	brcc	.+30     	; 0x286 <NRF24_TransmitShockBurst+0x92>
 268:	81 17       	cp	r24, r17
 26a:	68 f0       	brcs	.+26     	; 0x286 <NRF24_TransmitShockBurst+0x92>
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
 26c:	41 2f       	mov	r20, r17
 26e:	64 e7       	ldi	r22, 0x74	; 116
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	81 e6       	ldi	r24, 0x61	; 97
 274:	58 df       	rcall	.-336    	; 0x126 <NRF24_ReadArray>
		return  0;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	09 c0       	rjmp	.+18     	; 0x28c <NRF24_TransmitShockBurst+0x98>
	} else {
		if(st & (1<<NRF24_BIT_MAX_RT)) return 2;
 27a:	f4 fe       	sbrs	r15, 4
 27c:	06 c0       	rjmp	.+12     	; 0x28a <NRF24_TransmitShockBurst+0x96>
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	05 c0       	rjmp	.+10     	; 0x28c <NRF24_TransmitShockBurst+0x98>
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	NRF24_SET_CE_LOW;
	if(i == 0) return 4;
 282:	84 e0       	ldi	r24, 0x04	; 4
 284:	03 c0       	rjmp	.+6      	; 0x28c <NRF24_TransmitShockBurst+0x98>
	//
	NRF24_ReadArray(NRF24_CMD_R_REGISTER | NRF24_REG_FIFO_STATUS, NRF24_Buffer, 1); // get FIFO_STATUS
	if((st & (1<<NRF24_BIT_RX_DR)) || (NRF24_Buffer[0] & (1<<NRF24_BIT_RX_EMPTY)) == 0) {
		NRF24_Buffer[0] = 0xFF;
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	01 c0       	rjmp	.+2      	; 0x28c <NRF24_TransmitShockBurst+0x98>
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
		return  0;
	} else {
		if(st & (1<<NRF24_BIT_MAX_RT)) return 2;
		return 1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 28c:	0f 90       	pop	r0
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	08 95       	ret

0000029a <NRF24_SetAddresses>:

uint8_t NRF24_SetAddresses(uint8_t addr_LSB) // Set addresses: NRF24_BASE_ADDR + addr_LSB, return 1 if success
{
 29a:	cf 93       	push	r28
 29c:	c8 2f       	mov	r28, r24
	NRF24_Buffer[0] = addr_LSB;
 29e:	80 93 74 00 	sts	0x0074, r24
	memcpy_P(NRF24_Buffer + 1, NRF24_BASE_ADDR, sizeof(NRF24_BASE_ADDR)/sizeof(NRF24_BASE_ADDR[0]));
 2a2:	42 e0       	ldi	r20, 0x02	; 2
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	62 e2       	ldi	r22, 0x22	; 34
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	85 e7       	ldi	r24, 0x75	; 117
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	3a d3       	rcall	.+1652   	; 0x924 <memcpy_P>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_RX_ADDR_P0, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2b0:	43 e0       	ldi	r20, 0x03	; 3
 2b2:	64 e7       	ldi	r22, 0x74	; 116
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	8a e2       	ldi	r24, 0x2A	; 42
 2b8:	69 df       	rcall	.-302    	; 0x18c <NRF24_WriteArray>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2ba:	43 e0       	ldi	r20, 0x03	; 3
 2bc:	64 e7       	ldi	r22, 0x74	; 116
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	80 e3       	ldi	r24, 0x30	; 48
 2c2:	64 df       	rcall	.-312    	; 0x18c <NRF24_WriteArray>
	NRF24_ReadArray(NRF24_CMD_R_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2c4:	43 e0       	ldi	r20, 0x03	; 3
 2c6:	64 e7       	ldi	r22, 0x74	; 116
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	80 e1       	ldi	r24, 0x10	; 16
 2cc:	2c df       	rcall	.-424    	; 0x126 <NRF24_ReadArray>
	return NRF24_Buffer[0] == addr_LSB;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 91 74 00 	lds	r25, 0x0074
 2d4:	9c 13       	cpse	r25, r28
 2d6:	80 e0       	ldi	r24, 0x00	; 0
}
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <NRF24_init>:
	NRF24_SET_CE_LOW;
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG); // Power down
}

void NRF24_init(uint8_t channel) // After init transmit must be delayed
{
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	18 2f       	mov	r17, r24
	NRF24_SET_CSN_HI;
 2e4:	db 9a       	sbi	0x1b, 3	; 27
 2e6:	c4 e2       	ldi	r28, 0x24	; 36
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i = 0, c, v;
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 2ea:	fe 01       	movw	r30, r28
 2ec:	84 91       	lpm	r24, Z
 2ee:	31 96       	adiw	r30, 0x01	; 1
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 2f0:	64 91       	lpm	r22, Z
		NRF24_WriteByte(c, v); 
 2f2:	3c df       	rcall	.-392    	; 0x16c <NRF24_WriteByte>
 2f4:	22 96       	adiw	r28, 0x02	; 2
	} while(i < sizeof(NRF24_INIT_DATA));
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	c2 33       	cpi	r28, 0x32	; 50
 2fa:	df 07       	cpc	r29, r31
 2fc:	b1 f7       	brne	.-20     	; 0x2ea <NRF24_init+0xe>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 2fe:	61 2f       	mov	r22, r17
 300:	85 e2       	ldi	r24, 0x25	; 37
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		NRF24_WriteByte(c, v); 
	} while(i < sizeof(NRF24_INIT_DATA));
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 308:	31 cf       	rjmp	.-414    	; 0x16c <NRF24_WriteByte>

0000030a <__vector_11>:

#define SETUP_WATCHDOG WDTCSR = (1<<WDCE) | (1<<WDE); WDTCSR = (1<<WDE) | (0<<WDIE) | (0<<WDP3) | (1<<WDP2) | (1<<WDP1) | (0<<WDP0); //  Watchdog reset 1 s
uint8_t LED_Warning = 0, LED_WarningOnCnt = 0, LED_WarningOffCnt = 0;

ISR(TIM0_OVF_vect) // 0.10035 sec
{
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
	if(++TimerCntSec == 10) { // 1 sec
 31e:	80 91 69 00 	lds	r24, 0x0069
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	8a 30       	cpi	r24, 0x0A	; 10
 326:	19 f0       	breq	.+6      	; 0x32e <__vector_11+0x24>
 328:	80 93 69 00 	sts	0x0069, r24
 32c:	0e c0       	rjmp	.+28     	; 0x34a <__vector_11+0x40>
		TimerCntSec = 0;
 32e:	10 92 69 00 	sts	0x0069, r1
		if(RequestCountdown) RequestCountdown--;
 332:	80 91 67 00 	lds	r24, 0x0067
 336:	88 23       	and	r24, r24
 338:	19 f0       	breq	.+6      	; 0x340 <__vector_11+0x36>
 33a:	81 50       	subi	r24, 0x01	; 1
 33c:	80 93 67 00 	sts	0x0067, r24
		Timer++;
 340:	80 91 68 00 	lds	r24, 0x0068
 344:	8f 5f       	subi	r24, 0xFF	; 255
 346:	80 93 68 00 	sts	0x0068, r24
	}
 	if(LED_WarningOnCnt) {
 34a:	80 91 61 00 	lds	r24, 0x0061
 34e:	88 23       	and	r24, r24
 350:	39 f0       	breq	.+14     	; 0x360 <__vector_11+0x56>
	 	LED1_ON;
 352:	d9 9a       	sbi	0x1b, 1	; 27
	 	LED_WarningOnCnt--;
 354:	80 91 61 00 	lds	r24, 0x0061
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	80 93 61 00 	sts	0x0061, r24
 35e:	1b c0       	rjmp	.+54     	; 0x396 <__vector_11+0x8c>
	} else if(LED_WarningOffCnt) {
 360:	80 91 60 00 	lds	r24, 0x0060
 364:	88 23       	and	r24, r24
 366:	29 f0       	breq	.+10     	; 0x372 <__vector_11+0x68>
	 	LED1_OFF;
 368:	d9 98       	cbi	0x1b, 1	; 27
	 	LED_WarningOffCnt--;
 36a:	80 91 60 00 	lds	r24, 0x0060
 36e:	81 50       	subi	r24, 0x01	; 1
 370:	10 c0       	rjmp	.+32     	; 0x392 <__vector_11+0x88>
	} else if(LED_Warning) { // short flashes
 372:	80 91 62 00 	lds	r24, 0x0062
 376:	88 23       	and	r24, r24
 378:	71 f0       	breq	.+28     	; 0x396 <__vector_11+0x8c>
	 	LED_WarningOffCnt = 3;
 37a:	93 e0       	ldi	r25, 0x03	; 3
 37c:	90 93 60 00 	sts	0x0060, r25
	 	LED_WarningOnCnt = 1;
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	90 93 61 00 	sts	0x0061, r25
	 	if(--LED_Warning == 0) LED_WarningOffCnt = 5;
 386:	81 50       	subi	r24, 0x01	; 1
 388:	80 93 62 00 	sts	0x0062, r24
 38c:	81 11       	cpse	r24, r1
 38e:	03 c0       	rjmp	.+6      	; 0x396 <__vector_11+0x8c>
 390:	85 e0       	ldi	r24, 0x05	; 5
 392:	80 93 60 00 	sts	0x0060, r24
 	}
	if(((FanSpeedOff < 2 && FanSpeed != SpeedSet) || FanSpeedOff == 3) && setup_mode == 0) {
 396:	80 91 6a 00 	lds	r24, 0x006A
 39a:	82 30       	cpi	r24, 0x02	; 2
 39c:	38 f4       	brcc	.+14     	; 0x3ac <__vector_11+0xa2>
 39e:	20 91 6e 00 	lds	r18, 0x006E
 3a2:	90 91 6d 00 	lds	r25, 0x006D
 3a6:	29 13       	cpse	r18, r25
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <__vector_11+0xa8>
 3aa:	72 c0       	rjmp	.+228    	; 0x490 <__vector_11+0x186>
 3ac:	83 30       	cpi	r24, 0x03	; 3
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <__vector_11+0xa8>
 3b0:	6f c0       	rjmp	.+222    	; 0x490 <__vector_11+0x186>
 3b2:	90 91 64 00 	lds	r25, 0x0064
 3b6:	91 11       	cpse	r25, r1
 3b8:	6b c0       	rjmp	.+214    	; 0x490 <__vector_11+0x186>
		if(PressKeyOffTime) {
 3ba:	90 91 70 00 	lds	r25, 0x0070
 3be:	99 23       	and	r25, r25
 3c0:	61 f0       	breq	.+24     	; 0x3da <__vector_11+0xd0>
			if(--PressKeyOffTime == 0) {
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	89 0f       	add	r24, r25
 3c6:	80 93 70 00 	sts	0x0070, r24
 3ca:	81 11       	cpse	r24, r1
 3cc:	61 c0       	rjmp	.+194    	; 0x490 <__vector_11+0x186>
				KEYS_DDR |= PressKey; // set Out, level 0 - key pressed
 3ce:	87 b3       	in	r24, 0x17	; 23
 3d0:	90 91 71 00 	lds	r25, 0x0071
 3d4:	89 2b       	or	r24, r25
 3d6:	87 bb       	out	0x17, r24	; 23
 3d8:	5b c0       	rjmp	.+182    	; 0x490 <__vector_11+0x186>
			}
		} else if(PressKeyOnTime) {
 3da:	90 91 6f 00 	lds	r25, 0x006F
 3de:	99 23       	and	r25, r25
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <__vector_11+0xda>
 3e2:	3e c0       	rjmp	.+124    	; 0x460 <__vector_11+0x156>
			if(--PressKeyOnTime == 0) {
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	89 0f       	add	r24, r25
 3e8:	80 93 6f 00 	sts	0x006F, r24
 3ec:	81 11       	cpse	r24, r1
 3ee:	50 c0       	rjmp	.+160    	; 0x490 <__vector_11+0x186>
				KEYS_DDR &= ~PressKey; // set In - key released
 3f0:	97 b3       	in	r25, 0x17	; 23
 3f2:	80 91 71 00 	lds	r24, 0x0071
 3f6:	80 95       	com	r24
 3f8:	89 23       	and	r24, r25
 3fa:	87 bb       	out	0x17, r24	; 23
				if(PressKey == KEY_PWR) {
 3fc:	80 91 71 00 	lds	r24, 0x0071
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	71 f4       	brne	.+28     	; 0x420 <__vector_11+0x116>
					FanSpeedOff = !FanSpeedOff;
 404:	90 91 6a 00 	lds	r25, 0x006A
 408:	91 11       	cpse	r25, r1
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	80 93 6a 00 	sts	0x006A, r24
					if(FanSpeedOff) {
 410:	88 23       	and	r24, r24
 412:	09 f4       	brne	.+2      	; 0x416 <__vector_11+0x10c>
 414:	3d c0       	rjmp	.+122    	; 0x490 <__vector_11+0x186>
x_off_ok:				FanSpeed = SpeedSet;
 416:	80 91 6d 00 	lds	r24, 0x006D
 41a:	80 93 6e 00 	sts	0x006E, r24
 41e:	38 c0       	rjmp	.+112    	; 0x490 <__vector_11+0x186>
 420:	20 91 6d 00 	lds	r18, 0x006D
					}
				} else {
					if(PressKey == KEY_MINUS) {
 424:	82 30       	cpi	r24, 0x02	; 2
 426:	49 f4       	brne	.+18     	; 0x43a <__vector_11+0x130>
						if(--SpeedSet < 1) SpeedSet = 1;
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	20 93 6d 00 	sts	0x006D, r18
 42e:	12 16       	cp	r1, r18
 430:	9c f0       	brlt	.+38     	; 0x458 <__vector_11+0x14e>
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 93 6d 00 	sts	0x006D, r24
 438:	0f c0       	rjmp	.+30     	; 0x458 <__vector_11+0x14e>
					} else { // PressKey == KEY_PLUS
						if(++SpeedSet> FanSpeedMax) SpeedSet = FanSpeedMax;
 43a:	2f 5f       	subi	r18, 0xFF	; 255
 43c:	20 93 6d 00 	sts	0x006D, r18
 440:	40 91 73 00 	lds	r20, 0x0073
 444:	33 27       	eor	r19, r19
 446:	27 fd       	sbrc	r18, 7
 448:	30 95       	com	r19
 44a:	84 2f       	mov	r24, r20
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	82 17       	cp	r24, r18
 450:	93 07       	cpc	r25, r19
 452:	14 f4       	brge	.+4      	; 0x458 <__vector_11+0x14e>
 454:	40 93 6d 00 	sts	0x006D, r20
					}
					SpeedSetChanged = 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	80 93 6c 00 	sts	0x006C, r24
 45e:	18 c0       	rjmp	.+48     	; 0x490 <__vector_11+0x186>
				}
			}
		} else {
			if(FanSpeed <= 0) { // off
 460:	90 91 6e 00 	lds	r25, 0x006E
 464:	19 16       	cp	r1, r25
 466:	24 f0       	brlt	.+8      	; 0x470 <__vector_11+0x166>
				if(FanSpeedOff) goto x_off_ok; // Already off
 468:	81 11       	cpse	r24, r1
 46a:	d5 cf       	rjmp	.-86     	; 0x416 <__vector_11+0x10c>
				PressKey = KEY_PWR;
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	09 c0       	rjmp	.+18     	; 0x482 <__vector_11+0x178>
			} else if(FanSpeedOff) { // switch on, and after set speed
 470:	81 11       	cpse	r24, r1
 472:	fc cf       	rjmp	.-8      	; 0x46c <__vector_11+0x162>
				PressKey = KEY_PWR;
			} else if(FanSpeed < SpeedSet) { // less
 474:	80 91 6d 00 	lds	r24, 0x006D
 478:	98 17       	cp	r25, r24
 47a:	14 f4       	brge	.+4      	; 0x480 <__vector_11+0x176>
				PressKey = KEY_MINUS;
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	01 c0       	rjmp	.+2      	; 0x482 <__vector_11+0x178>
			} else {
				PressKey = KEY_PLUS;
 480:	84 e0       	ldi	r24, 0x04	; 4
 482:	80 93 71 00 	sts	0x0071, r24
			}
			PressKeyOffTime = 2;
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	80 93 70 00 	sts	0x0070, r24
			PressKeyOnTime = 2;
 48c:	80 93 6f 00 	sts	0x006F, r24
		}
	}
}
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	4f 91       	pop	r20
 496:	3f 91       	pop	r19
 498:	2f 91       	pop	r18
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <main>:

int main(void)
{
	CLKPR = (1<<CLKPCE); CLKPR = (0<<CLKPS3) | (0<<CLKPS2) | (1<<CLKPS1) | (1<<CLKPS0); // Clock prescaler: 8
 4a4:	80 e8       	ldi	r24, 0x80	; 128
 4a6:	86 bd       	out	0x26, r24	; 38
 4a8:	93 e0       	ldi	r25, 0x03	; 3
 4aa:	96 bd       	out	0x26, r25	; 38
	MCUCR = (1<<SE) | (0<<SM1) | (0<<SM0); // Idle sleep enable
 4ac:	80 e2       	ldi	r24, 0x20	; 32
 4ae:	85 bf       	out	0x35, r24	; 53
	KEYS_DDR &= ~(KEY_PWR | KEY_MINUS | KEY_PLUS); // In
 4b0:	87 b3       	in	r24, 0x17	; 23
 4b2:	88 7f       	andi	r24, 0xF8	; 248
 4b4:	87 bb       	out	0x17, r24	; 23
	KEYS_PORT &= ~(KEY_PWR | KEY_MINUS | KEY_PLUS); // = 0
 4b6:	88 b3       	in	r24, 0x18	; 24
 4b8:	88 7f       	andi	r24, 0xF8	; 248
 4ba:	88 bb       	out	0x18, r24	; 24
	DDRA = LED1; // Out
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	8a bb       	out	0x1a, r24	; 26
	PORTA = (1<<PORTA7) | (1<<PORTA0); // pullup not used pins
 4c0:	81 e8       	ldi	r24, 0x81	; 129
 4c2:	8b bb       	out	0x1b, r24	; 27
	NRF24_SET_CSN_HI;
 4c4:	db 9a       	sbi	0x1b, 3	; 27
	NRF24_DDR |= NRF24_CE | NRF24_CSN | NRF24_SCK | NRF24_MOSI; // Out
 4c6:	8a b3       	in	r24, 0x1a	; 26
 4c8:	8c 63       	ori	r24, 0x3C	; 60
 4ca:	8a bb       	out	0x1a, r24	; 26
//	// Timer 8 bit
 	TCCR0A = (1<<WGM01) | (1<<WGM00);  // Timer0: Fast PWM OCRA
 4cc:	90 bf       	out	0x30, r25	; 48
 	TCCR0B = (1<<WGM02) | (1 << CS02) | (0 << CS01) | (1 << CS00); // Timer0 prescaller: 1024
 4ce:	8d e0       	ldi	r24, 0x0D	; 13
 4d0:	83 bf       	out	0x33, r24	; 51
 	TIMSK0 |= (1<<TOIE0); // Timer/Counter0 Overflow Interrupt Enable
 4d2:	89 b7       	in	r24, 0x39	; 57
 4d4:	81 60       	ori	r24, 0x01	; 1
 4d6:	89 bf       	out	0x39, r24	; 57
 	OCR0A = 97; // OC0A(TOP)=Fclk/prescaller/Freq - 1; Freq=Fclk/(prescaller*(1+TOP))
 4d8:	81 e6       	ldi	r24, 0x61	; 97
 4da:	86 bf       	out	0x36, r24	; 54
 	//OCR0B = 0; // 0..OCR0A, Half Duty cycle = ((TOP+1)/2-1)
	//TCCR0A |= (1<<COM0B1); // Start PWM out
	FanSpeedMax = EEPROM_read(EPROM_FanSpeedMax);
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	ba dd       	rcall	.-1164   	; 0x54 <EEPROM_read>
 4e0:	80 93 73 00 	sts	0x0073, r24
	if(FanSpeedMax == 0xFF) {
 4e4:	8f 3f       	cpi	r24, 0xFF	; 255
 4e6:	d9 f4       	brne	.+54     	; 0x51e <main+0x7a>
		EEPROM_write(EPROM_OSCCAL, OSCCAL);
 4e8:	61 b7       	in	r22, 0x31	; 49
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	bb dd       	rcall	.-1162   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_RFAddress, 0xE5);
 4ee:	65 ee       	ldi	r22, 0xE5	; 229
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	b8 dd       	rcall	.-1168   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_RF_Channel, 120);
 4f4:	68 e7       	ldi	r22, 0x78	; 120
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	b5 dd       	rcall	.-1174   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_FanSpeedMax, FanSpeedMax = 7);
 4fa:	87 e0       	ldi	r24, 0x07	; 7
 4fc:	80 93 73 00 	sts	0x0073, r24
 500:	67 e0       	ldi	r22, 0x07	; 7
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	af dd       	rcall	.-1186   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_PauseWhenError, 30);
 506:	6e e1       	ldi	r22, 0x1E	; 30
 508:	84 e0       	ldi	r24, 0x04	; 4
 50a:	ac dd       	rcall	.-1192   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_InitPause, 10);
 50c:	6a e0       	ldi	r22, 0x0A	; 10
 50e:	85 e0       	ldi	r24, 0x05	; 5
 510:	a9 dd       	rcall	.-1198   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_CurrentSpeedAddr, 0);
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	8f e1       	ldi	r24, 0x1F	; 31
 516:	a6 dd       	rcall	.-1204   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_FanSpeedOverride, 0);
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	86 e0       	ldi	r24, 0x06	; 6
 51c:	a3 dd       	rcall	.-1210   	; 0x64 <EEPROM_write>
		//EEPROM_write(EPROM_CurrentSpeedAddr, EPROM_CurrentSpeedAddr + 1);
		//EEPROM_write(EPROM_CurrentSpeedAddr + 1, 1);
	}
	//OSCCAL = EEPROM_read(EPROM_OSCCAL);
	uint8_t addr = EEPROM_read(EPROM_CurrentSpeedAddr);
 51e:	8f e1       	ldi	r24, 0x1F	; 31
 520:	99 dd       	rcall	.-1230   	; 0x54 <EEPROM_read>
	if(addr && (SpeedSet = EEPROM_read(addr)) <= FanSpeedMax) {
 522:	88 23       	and	r24, r24
 524:	91 f0       	breq	.+36     	; 0x54a <main+0xa6>
 526:	96 dd       	rcall	.-1236   	; 0x54 <EEPROM_read>
 528:	80 93 6d 00 	sts	0x006D, r24
 52c:	48 2f       	mov	r20, r24
 52e:	55 27       	eor	r21, r21
 530:	47 fd       	sbrc	r20, 7
 532:	50 95       	com	r21
 534:	20 91 73 00 	lds	r18, 0x0073
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	24 17       	cp	r18, r20
 53c:	35 07       	cpc	r19, r21
 53e:	2c f0       	brlt	.+10     	; 0x54a <main+0xa6>
		FanSpeed = SpeedSet;
 540:	80 93 6e 00 	sts	0x006E, r24
		SpeedInited	= 1;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	80 93 6b 00 	sts	0x006B, r24
	}
	RequestCountdown = EEPROM_read(EPROM_InitPause);
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	83 dd       	rcall	.-1274   	; 0x54 <EEPROM_read>
 54e:	80 93 67 00 	sts	0x0067, r24
	FanSpeedOverride = EEPROM_read(EPROM_FanSpeedOverride);
 552:	86 e0       	ldi	r24, 0x06	; 6
 554:	7f dd       	rcall	.-1282   	; 0x54 <EEPROM_read>
 556:	80 93 78 00 	sts	0x0078, r24
	KEYS_INTR_INIT;
 55a:	8b b7       	in	r24, 0x3b	; 59
 55c:	80 62       	ori	r24, 0x20	; 32
 55e:	8b bf       	out	0x3b, r24	; 59
 560:	80 b5       	in	r24, 0x20	; 32
 562:	87 60       	ori	r24, 0x07	; 7
 564:	80 bd       	out	0x20, r24	; 32
	SETUP_WATCHDOG;
 566:	88 e1       	ldi	r24, 0x18	; 24
 568:	81 bd       	out	0x21, r24	; 33
 56a:	8e e0       	ldi	r24, 0x0E	; 14
 56c:	81 bd       	out	0x21, r24	; 33
	sei();
 56e:	78 94       	sei
	FlashLED(1, 1, 1);
 570:	41 e0       	ldi	r20, 0x01	; 1
 572:	61 e0       	ldi	r22, 0x01	; 1
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	b4 dd       	rcall	.-1176   	; 0xe0 <FlashLED>
	NRF24_init(EEPROM_read(EPROM_RF_Channel)); // After init transmit must be delayed
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	6c dd       	rcall	.-1320   	; 0x54 <EEPROM_read>
 57c:	af de       	rcall	.-674    	; 0x2dc <NRF24_init>
 	while(!NRF24_SetAddresses(EEPROM_read(EPROM_RFAddress))) {
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	69 dd       	rcall	.-1326   	; 0x54 <EEPROM_read>
 582:	8b de       	rcall	.-746    	; 0x29a <NRF24_SetAddresses>
 584:	81 11       	cpse	r24, r1
 586:	05 c0       	rjmp	.+10     	; 0x592 <main+0xee>
 		FlashLED(1, 50, 20);
 588:	44 e1       	ldi	r20, 0x14	; 20
 58a:	62 e3       	ldi	r22, 0x32	; 50
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	a8 dd       	rcall	.-1200   	; 0xe0 <FlashLED>
 590:	f6 cf       	rjmp	.-20     	; 0x57e <main+0xda>
 	}
	NRF24_SetMode(NRF24_TransmitMode);
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	21 de       	rcall	.-958    	; 0x1d8 <NRF24_SetMode>
					LED1_ON;
					Delay100ms(10);
					while(keys) {
						wdt_reset(); // wait keys release
						if((keys & KEY_MINUS) && (keys & KEY_PLUS)) {
							setup_mode = 1;
 596:	c1 e0       	ldi	r28, 0x01	; 1
							FlashLED(5, 2, 2);
							Delay100ms(30);
							RequestCountdown = 30;
 598:	de e1       	ldi	r29, 0x1E	; 30
x_save_speed:
				if(EEPROM_read(addr) != SpeedSet) {
					EEPROM_write(addr, SpeedSet);
					if(EEPROM_read(addr) != SpeedSet) { // EEPROM cell broken
						FlashLED(10, 2, 2);
						send_data = 0xEE;
 59a:	1e ee       	ldi	r17, 0xEE	; 238
						} else {
							ATOMIC_BLOCK(ATOMIC_FORCEON) {
								FanSpeed = ((master_data*)NRF24_Buffer)->FanSpeed + FanSpeedOverride;
								if(FanSpeed <= 0) FanSpeed = 0; // off
								else {
									if(FanSpeedOff) FanSpeedOff = 3; // if off -> on
 59c:	03 e0       	ldi	r16, 0x03	; 3
 	}
	NRF24_SetMode(NRF24_TransmitMode);
	while(1)
	{
		__asm__ volatile ("" ::: "memory"); // Need memory barrier
		sleep_cpu();
 59e:	88 95       	sleep
		wdt_reset();
 5a0:	a8 95       	wdr
		if(keys) {
 5a2:	80 91 72 00 	lds	r24, 0x0072
 5a6:	88 23       	and	r24, r24
 5a8:	09 f4       	brne	.+2      	; 0x5ac <main+0x108>
 5aa:	f4 c0       	rjmp	.+488    	; 0x794 <main+0x2f0>
			if(keys & KEY_PWR) {
 5ac:	80 91 72 00 	lds	r24, 0x0072
 5b0:	80 ff       	sbrs	r24, 0
 5b2:	1b c0       	rjmp	.+54     	; 0x5ea <main+0x146>
				if(FanSpeedOff) {
 5b4:	80 91 6a 00 	lds	r24, 0x006A
 5b8:	88 23       	and	r24, r24
 5ba:	49 f0       	breq	.+18     	; 0x5ce <main+0x12a>
					FanSpeedOff = 0;
 5bc:	10 92 6a 00 	sts	0x006A, r1
					if(setup_mode) setup_mode = 0;
 5c0:	80 91 64 00 	lds	r24, 0x0064
 5c4:	88 23       	and	r24, r24
 5c6:	79 f0       	breq	.+30     	; 0x5e6 <main+0x142>
 5c8:	10 92 64 00 	sts	0x0064, r1
 5cc:	0c c0       	rjmp	.+24     	; 0x5e6 <main+0x142>
				} else {
					FanSpeedOff = 2;
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	80 93 6a 00 	sts	0x006A, r24
					PressKeyOnTime = 0;
 5d4:	10 92 6f 00 	sts	0x006F, r1
					PressKeyOffTime = 0;
 5d8:	10 92 70 00 	sts	0x0070, r1
					KEYS_DDR &= ~(KEY_MINUS | KEY_PLUS);
 5dc:	87 b3       	in	r24, 0x17	; 23
 5de:	89 7f       	andi	r24, 0xF9	; 249
 5e0:	87 bb       	out	0x17, r24	; 23
					RequestCountdown = 0;
 5e2:	10 92 67 00 	sts	0x0067, r1
				}
				SendOffStatus = 1;
 5e6:	c0 93 66 00 	sts	0x0066, r28
			}
			if(FanSpeedOff == 0) {
 5ea:	80 91 6a 00 	lds	r24, 0x006A
 5ee:	81 11       	cpse	r24, r1
 5f0:	5a c0       	rjmp	.+180    	; 0x6a6 <main+0x202>
				if(keys & KEY_MINUS) {
 5f2:	80 91 72 00 	lds	r24, 0x0072
 5f6:	81 ff       	sbrs	r24, 1
 5f8:	1d c0       	rjmp	.+58     	; 0x634 <main+0x190>
					if(FanSpeedOverride > -8) {
 5fa:	80 91 78 00 	lds	r24, 0x0078
 5fe:	89 3f       	cpi	r24, 0xF9	; 249
 600:	cc f0       	brlt	.+50     	; 0x634 <main+0x190>
						FanSpeedOverride--;
 602:	81 50       	subi	r24, 0x01	; 1
 604:	80 93 78 00 	sts	0x0078, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 608:	f8 94       	cli
 60a:	80 91 6e 00 	lds	r24, 0x006E
 60e:	90 91 6d 00 	lds	r25, 0x006D
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							if(FanSpeed > 1) FanSpeed--;
 612:	82 30       	cpi	r24, 0x02	; 2
 614:	0c f0       	brlt	.+2      	; 0x618 <main+0x174>
 616:	81 50       	subi	r24, 0x01	; 1
 618:	80 93 6e 00 	sts	0x006E, r24
							if(SpeedSet > 1) SpeedSet--;
 61c:	92 30       	cpi	r25, 0x02	; 2
 61e:	44 f4       	brge	.+16     	; 0x630 <main+0x18c>
 620:	90 93 6d 00 	sts	0x006D, r25
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 624:	78 94       	sei
						}
						EEPROM_write(EPROM_FanSpeedOverride, FanSpeedOverride);
 626:	60 91 78 00 	lds	r22, 0x0078
 62a:	86 e0       	ldi	r24, 0x06	; 6
 62c:	1b dd       	rcall	.-1482   	; 0x64 <EEPROM_write>
 62e:	02 c0       	rjmp	.+4      	; 0x634 <main+0x190>
 630:	91 50       	subi	r25, 0x01	; 1
 632:	f6 cf       	rjmp	.-20     	; 0x620 <main+0x17c>
					}
				}
				if(keys & KEY_PLUS) {
 634:	80 91 72 00 	lds	r24, 0x0072
 638:	82 ff       	sbrs	r24, 2
 63a:	96 c0       	rjmp	.+300    	; 0x768 <main+0x2c4>
					if(FanSpeedOverride < 7) {
 63c:	80 91 78 00 	lds	r24, 0x0078
 640:	87 30       	cpi	r24, 0x07	; 7
 642:	0c f0       	brlt	.+2      	; 0x646 <main+0x1a2>
 644:	91 c0       	rjmp	.+290    	; 0x768 <main+0x2c4>
						FanSpeedOverride++;
 646:	8f 5f       	subi	r24, 0xFF	; 255
 648:	80 93 78 00 	sts	0x0078, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 64c:	f8 94       	cli
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							if(FanSpeed < FanSpeedMax) FanSpeed++;
 64e:	80 91 73 00 	lds	r24, 0x0073
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	40 91 6e 00 	lds	r20, 0x006E
 658:	50 91 6d 00 	lds	r21, 0x006D
					}
				}
				if(keys & KEY_PLUS) {
					if(FanSpeedOverride < 7) {
						FanSpeedOverride++;
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	65 2f       	mov	r22, r21
 660:	22 23       	and	r18, r18
 662:	e1 f0       	breq	.+56     	; 0x69c <main+0x1f8>
							if(FanSpeed < FanSpeedMax) FanSpeed++;
 664:	24 2f       	mov	r18, r20
 666:	33 27       	eor	r19, r19
 668:	27 fd       	sbrc	r18, 7
 66a:	30 95       	com	r19
 66c:	28 17       	cp	r18, r24
 66e:	39 07       	cpc	r19, r25
 670:	0c f4       	brge	.+2      	; 0x674 <main+0x1d0>
 672:	4f 5f       	subi	r20, 0xFF	; 255
 674:	5f 5f       	subi	r21, 0xFF	; 255
							if(SpeedSet < FanSpeedMax) SpeedSet++;
 676:	26 2f       	mov	r18, r22
 678:	33 27       	eor	r19, r19
 67a:	27 fd       	sbrc	r18, 7
 67c:	30 95       	com	r19
 67e:	28 17       	cp	r18, r24
 680:	39 07       	cpc	r19, r25
 682:	54 f0       	brlt	.+20     	; 0x698 <main+0x1f4>
 684:	40 93 6e 00 	sts	0x006E, r20
 688:	60 93 6d 00 	sts	0x006D, r22
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 68c:	78 94       	sei
						}
						EEPROM_write(EPROM_FanSpeedOverride, FanSpeedOverride);
 68e:	60 91 78 00 	lds	r22, 0x0078
 692:	86 e0       	ldi	r24, 0x06	; 6
 694:	e7 dc       	rcall	.-1586   	; 0x64 <EEPROM_write>
 696:	68 c0       	rjmp	.+208    	; 0x768 <main+0x2c4>
					}
				}
				if(keys & KEY_PLUS) {
					if(FanSpeedOverride < 7) {
						FanSpeedOverride++;
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
 698:	20 e0       	ldi	r18, 0x00	; 0
 69a:	e1 cf       	rjmp	.-62     	; 0x65e <main+0x1ba>
 69c:	40 93 6e 00 	sts	0x006E, r20
 6a0:	50 93 6d 00 	sts	0x006D, r21
 6a4:	f3 cf       	rjmp	.-26     	; 0x68c <main+0x1e8>
							if(SpeedSet < FanSpeedMax) SpeedSet++;
						}
						EEPROM_write(EPROM_FanSpeedOverride, FanSpeedOverride);
					}
				}
			} else if(setup_mode) {
 6a6:	90 91 64 00 	lds	r25, 0x0064
 6aa:	99 23       	and	r25, r25
 6ac:	79 f1       	breq	.+94     	; 0x70c <main+0x268>
				if(keys & KEY_MINUS) {
 6ae:	80 91 72 00 	lds	r24, 0x0072
 6b2:	81 ff       	sbrs	r24, 1
 6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <main+0x21c>
					SpeedSet--;
 6b6:	80 91 6d 00 	lds	r24, 0x006D
 6ba:	81 50       	subi	r24, 0x01	; 1
 6bc:	80 93 6d 00 	sts	0x006D, r24
				}
				if(keys & KEY_PLUS) {
 6c0:	80 91 72 00 	lds	r24, 0x0072
 6c4:	82 ff       	sbrs	r24, 2
 6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <main+0x22e>
					SpeedSet++;
 6c8:	80 91 6d 00 	lds	r24, 0x006D
 6cc:	8f 5f       	subi	r24, 0xFF	; 255
 6ce:	80 93 6d 00 	sts	0x006D, r24
				}
				if(SpeedSet < 1) SpeedSet = 1;
 6d2:	20 91 6d 00 	lds	r18, 0x006D
 6d6:	12 16       	cp	r1, r18
 6d8:	1c f0       	brlt	.+6      	; 0x6e0 <main+0x23c>
 6da:	c0 93 6d 00 	sts	0x006D, r28
 6de:	0c c0       	rjmp	.+24     	; 0x6f8 <main+0x254>
				else if(SpeedSet > FanSpeedMax) SpeedSet = FanSpeedMax;
 6e0:	40 91 73 00 	lds	r20, 0x0073
 6e4:	33 27       	eor	r19, r19
 6e6:	27 fd       	sbrc	r18, 7
 6e8:	30 95       	com	r19
 6ea:	84 2f       	mov	r24, r20
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	82 17       	cp	r24, r18
 6f0:	93 07       	cpc	r25, r19
 6f2:	14 f4       	brge	.+4      	; 0x6f8 <main+0x254>
 6f4:	40 93 6d 00 	sts	0x006D, r20
				FlashLED(SpeedSet, 5, 5);
 6f8:	45 e0       	ldi	r20, 0x05	; 5
 6fa:	65 e0       	ldi	r22, 0x05	; 5
 6fc:	80 91 6d 00 	lds	r24, 0x006D
 700:	ef dc       	rcall	.-1570   	; 0xe0 <FlashLED>
				RequestCountdown = 30;
 702:	d0 93 67 00 	sts	0x0067, r29
				SpeedSetChanged = 1;
 706:	c0 93 6c 00 	sts	0x006C, r28
 70a:	2e c0       	rjmp	.+92     	; 0x768 <main+0x2c4>
			} else if(FanSpeedOff == 2 && (keys & (KEY_MINUS | KEY_PLUS))) {
 70c:	82 30       	cpi	r24, 0x02	; 2
 70e:	61 f5       	brne	.+88     	; 0x768 <main+0x2c4>
 710:	80 91 72 00 	lds	r24, 0x0072
 714:	86 70       	andi	r24, 0x06	; 6
 716:	41 f1       	breq	.+80     	; 0x768 <main+0x2c4>
				if(PressKeyOnTime == 0 && PressKeyOffTime == 0 && EEPROM_read(EPROM_CurrentSpeedAddr)) { // not in changing process and using store speed
 718:	80 91 6f 00 	lds	r24, 0x006F
 71c:	81 11       	cpse	r24, r1
 71e:	24 c0       	rjmp	.+72     	; 0x768 <main+0x2c4>
 720:	80 91 70 00 	lds	r24, 0x0070
 724:	81 11       	cpse	r24, r1
 726:	20 c0       	rjmp	.+64     	; 0x768 <main+0x2c4>
 728:	8f e1       	ldi	r24, 0x1F	; 31
 72a:	94 dc       	rcall	.-1752   	; 0x54 <EEPROM_read>
 72c:	88 23       	and	r24, r24
 72e:	e1 f0       	breq	.+56     	; 0x768 <main+0x2c4>
					LED1_ON;
 730:	d9 9a       	sbi	0x1b, 1	; 27
					Delay100ms(10);
 732:	8a e0       	ldi	r24, 0x0A	; 10
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	c8 dc       	rcall	.-1648   	; 0xc8 <Delay100ms>
					while(keys) {
 738:	80 91 72 00 	lds	r24, 0x0072
 73c:	88 23       	and	r24, r24
 73e:	a1 f0       	breq	.+40     	; 0x768 <main+0x2c4>
						wdt_reset(); // wait keys release
 740:	a8 95       	wdr
						if((keys & KEY_MINUS) && (keys & KEY_PLUS)) {
 742:	80 91 72 00 	lds	r24, 0x0072
 746:	81 ff       	sbrs	r24, 1
 748:	f7 cf       	rjmp	.-18     	; 0x738 <main+0x294>
 74a:	80 91 72 00 	lds	r24, 0x0072
 74e:	82 ff       	sbrs	r24, 2
 750:	f3 cf       	rjmp	.-26     	; 0x738 <main+0x294>
							setup_mode = 1;
 752:	c0 93 64 00 	sts	0x0064, r28
							FlashLED(5, 2, 2);
 756:	42 e0       	ldi	r20, 0x02	; 2
 758:	62 e0       	ldi	r22, 0x02	; 2
 75a:	85 e0       	ldi	r24, 0x05	; 5
 75c:	c1 dc       	rcall	.-1662   	; 0xe0 <FlashLED>
							Delay100ms(30);
 75e:	8e e1       	ldi	r24, 0x1E	; 30
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	b2 dc       	rcall	.-1692   	; 0xc8 <Delay100ms>
							RequestCountdown = 30;
 764:	d0 93 67 00 	sts	0x0067, r29
 768:	8b e4       	ldi	r24, 0x4B	; 75
 76a:	9d e1       	ldi	r25, 0x1D	; 29
 76c:	01 97       	sbiw	r24, 0x01	; 1
 76e:	f1 f7       	brne	.-4      	; 0x76c <main+0x2c8>
 770:	00 c0       	rjmp	.+0      	; 0x772 <main+0x2ce>
 772:	00 00       	nop
					}
				}
			}
			//LED1_ON;
			_delay_ms(30);
			while((~KEYS_PIN) & (KEY_PWR | KEY_MINUS | KEY_PLUS)) wdt_reset(); // wait keys release
 774:	86 b3       	in	r24, 0x16	; 22
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	80 95       	com	r24
 77a:	90 95       	com	r25
 77c:	87 70       	andi	r24, 0x07	; 7
 77e:	99 27       	eor	r25, r25
 780:	89 2b       	or	r24, r25
 782:	11 f0       	breq	.+4      	; 0x788 <main+0x2e4>
 784:	a8 95       	wdr
 786:	f6 cf       	rjmp	.-20     	; 0x774 <main+0x2d0>
 788:	8b e4       	ldi	r24, 0x4B	; 75
 78a:	9d e1       	ldi	r25, 0x1D	; 29
 78c:	01 97       	sbiw	r24, 0x01	; 1
 78e:	f1 f7       	brne	.-4      	; 0x78c <main+0x2e8>
 790:	00 c0       	rjmp	.+0      	; 0x792 <main+0x2ee>
 792:	00 00       	nop
			_delay_ms(30);
			//LED1_OFF;
		}
		__asm__ volatile ("" ::: "memory"); // Need memory barrier
		if(SpeedSetChanged) {
 794:	80 91 6c 00 	lds	r24, 0x006C
 798:	88 23       	and	r24, r24
 79a:	91 f1       	breq	.+100    	; 0x800 <main+0x35c>
			uint8_t addr = EEPROM_read(EPROM_CurrentSpeedAddr);
 79c:	8f e1       	ldi	r24, 0x1F	; 31
 79e:	5a dc       	rcall	.-1868   	; 0x54 <EEPROM_read>
 7a0:	f8 2e       	mov	r15, r24
			if(addr) {
 7a2:	88 23       	and	r24, r24
 7a4:	59 f1       	breq	.+86     	; 0x7fc <main+0x358>
x_save_speed:
				if(EEPROM_read(addr) != SpeedSet) {
 7a6:	8f 2d       	mov	r24, r15
 7a8:	55 dc       	rcall	.-1878   	; 0x54 <EEPROM_read>
 7aa:	60 91 6d 00 	lds	r22, 0x006D
 7ae:	48 2f       	mov	r20, r24
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	26 2f       	mov	r18, r22
 7b4:	33 27       	eor	r19, r19
 7b6:	27 fd       	sbrc	r18, 7
 7b8:	30 95       	com	r19
 7ba:	42 17       	cp	r20, r18
 7bc:	53 07       	cpc	r21, r19
 7be:	f1 f0       	breq	.+60     	; 0x7fc <main+0x358>
					EEPROM_write(addr, SpeedSet);
 7c0:	8f 2d       	mov	r24, r15
 7c2:	50 dc       	rcall	.-1888   	; 0x64 <EEPROM_write>
					if(EEPROM_read(addr) != SpeedSet) { // EEPROM cell broken
 7c4:	8f 2d       	mov	r24, r15
 7c6:	46 dc       	rcall	.-1908   	; 0x54 <EEPROM_read>
 7c8:	48 2f       	mov	r20, r24
 7ca:	50 e0       	ldi	r21, 0x00	; 0
 7cc:	20 91 6d 00 	lds	r18, 0x006D
 7d0:	33 27       	eor	r19, r19
 7d2:	27 fd       	sbrc	r18, 7
 7d4:	30 95       	com	r19
 7d6:	42 17       	cp	r20, r18
 7d8:	53 07       	cpc	r21, r19
 7da:	81 f0       	breq	.+32     	; 0x7fc <main+0x358>
						FlashLED(10, 2, 2);
 7dc:	42 e0       	ldi	r20, 0x02	; 2
 7de:	62 e0       	ldi	r22, 0x02	; 2
 7e0:	8a e0       	ldi	r24, 0x0A	; 10
 7e2:	7e dc       	rcall	.-1796   	; 0xe0 <FlashLED>
						send_data = 0xEE;
 7e4:	10 93 63 00 	sts	0x0063, r17
						EEPROM_write(EPROM_CurrentSpeedAddr, ++addr);
 7e8:	f3 94       	inc	r15
 7ea:	6f 2d       	mov	r22, r15
 7ec:	8f e1       	ldi	r24, 0x1F	; 31
 7ee:	3a dc       	rcall	.-1932   	; 0x64 <EEPROM_write>
						if(addr == 0) { // memory ends
 7f0:	f1 10       	cpse	r15, r1
 7f2:	d9 cf       	rjmp	.-78     	; 0x7a6 <main+0x302>
							FlashLED(10, 2, 2);
 7f4:	42 e0       	ldi	r20, 0x02	; 2
 7f6:	62 e0       	ldi	r22, 0x02	; 2
 7f8:	8a e0       	ldi	r24, 0x0A	; 10
 7fa:	72 dc       	rcall	.-1820   	; 0xe0 <FlashLED>
							goto x_save_speed;
						}
					}
				}
			}
			SpeedSetChanged = 0;
 7fc:	10 92 6c 00 	sts	0x006C, r1
		}
		if(RequestCountdown == 0) {
 800:	80 91 67 00 	lds	r24, 0x0067
 804:	81 11       	cpse	r24, r1
 806:	cb ce       	rjmp	.-618    	; 0x59e <main+0xfa>
			if(setup_mode == 0) { // not in setup and changing process
 808:	80 91 64 00 	lds	r24, 0x0064
 80c:	81 11       	cpse	r24, r1
 80e:	87 c0       	rjmp	.+270    	; 0x91e <main+0x47a>
				//if(1) {
				if((FanSpeedOff < 2 || SendOffStatus == 1) && PressKeyOnTime == 0 && PressKeyOffTime == 0) { // not turned off or need send status and not in changing process
 810:	20 91 6a 00 	lds	r18, 0x006A
 814:	22 30       	cpi	r18, 0x02	; 2
 816:	28 f0       	brcs	.+10     	; 0x822 <main+0x37e>
 818:	80 91 66 00 	lds	r24, 0x0066
 81c:	81 30       	cpi	r24, 0x01	; 1
 81e:	09 f0       	breq	.+2      	; 0x822 <main+0x37e>
 820:	7b c0       	rjmp	.+246    	; 0x918 <main+0x474>
 822:	80 91 6f 00 	lds	r24, 0x006F
 826:	81 11       	cpse	r24, r1
 828:	77 c0       	rjmp	.+238    	; 0x918 <main+0x474>
 82a:	80 91 70 00 	lds	r24, 0x0070
 82e:	81 11       	cpse	r24, r1
 830:	73 c0       	rjmp	.+230    	; 0x918 <main+0x474>
					if(send_data != 0xEE) send_data = (nrf_last_status << 5) | ((FanSpeedOff == 2) << 4) | (FanSpeedOverride & 0x0F); // 11123333
 832:	80 91 63 00 	lds	r24, 0x0063
 836:	8e 3e       	cpi	r24, 0xEE	; 238
 838:	a1 f0       	breq	.+40     	; 0x862 <main+0x3be>
 83a:	80 91 65 00 	lds	r24, 0x0065
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	35 e0       	ldi	r19, 0x05	; 5
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	3a 95       	dec	r19
 848:	e1 f7       	brne	.-8      	; 0x842 <main+0x39e>
 84a:	22 30       	cpi	r18, 0x02	; 2
 84c:	11 f4       	brne	.+4      	; 0x852 <main+0x3ae>
 84e:	20 e1       	ldi	r18, 0x10	; 16
 850:	01 c0       	rjmp	.+2      	; 0x854 <main+0x3b0>
 852:	20 e0       	ldi	r18, 0x00	; 0
 854:	90 91 78 00 	lds	r25, 0x0078
 858:	9f 70       	andi	r25, 0x0F	; 15
 85a:	98 2b       	or	r25, r24
 85c:	92 2b       	or	r25, r18
 85e:	90 93 63 00 	sts	0x0063, r25
					NRF24_Buffer[0] = send_data;
 862:	80 91 63 00 	lds	r24, 0x0063
 866:	80 93 74 00 	sts	0x0074, r24
					nrf_last_status = NRF24_TransmitShockBurst(1, sizeof(master_data)); // Enhanced ShockBurst, ACK with payload
 86a:	64 e0       	ldi	r22, 0x04	; 4
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	c2 dc       	rcall	.-1660   	; 0x1f4 <NRF24_TransmitShockBurst>
 870:	80 93 65 00 	sts	0x0065, r24
					if(nrf_last_status) { // some problem
 874:	88 23       	and	r24, r24
 876:	29 f0       	breq	.+10     	; 0x882 <main+0x3de>
						LED_Warning = nrf_last_status;
 878:	80 93 62 00 	sts	0x0062, r24
x_continue:				RequestCountdown = EEPROM_read(EPROM_PauseWhenError); // sec
 87c:	84 e0       	ldi	r24, 0x04	; 4
 87e:	ea db       	rcall	.-2092   	; 0x54 <EEPROM_read>
 880:	3f c0       	rjmp	.+126    	; 0x900 <main+0x45c>
					} else {
						if(((master_data*)NRF24_Buffer)->CO2level == 0xFDEF) { // EEPROM write
 882:	80 91 74 00 	lds	r24, 0x0074
 886:	90 91 75 00 	lds	r25, 0x0075
 88a:	8f 3e       	cpi	r24, 0xEF	; 239
 88c:	9d 4f       	sbci	r25, 0xFD	; 253
 88e:	51 f4       	brne	.+20     	; 0x8a4 <main+0x400>
							EEPROM_write(((master_data*)NRF24_Buffer)->FanSpeed, ((master_data*)NRF24_Buffer)->Pause);
 890:	60 91 77 00 	lds	r22, 0x0077
 894:	80 91 76 00 	lds	r24, 0x0076
 898:	e5 db       	rcall	.-2102   	; 0x64 <EEPROM_write>
							FlashLED(7, 2, 2);
 89a:	42 e0       	ldi	r20, 0x02	; 2
 89c:	62 e0       	ldi	r22, 0x02	; 2
 89e:	87 e0       	ldi	r24, 0x07	; 7
 8a0:	1f dc       	rcall	.-1986   	; 0xe0 <FlashLED>
							goto x_continue;
 8a2:	ec cf       	rjmp	.-40     	; 0x87c <main+0x3d8>
						}
						if(SpeedInited == 0) {
 8a4:	80 91 6b 00 	lds	r24, 0x006B
 8a8:	81 11       	cpse	r24, r1
 8aa:	09 c0       	rjmp	.+18     	; 0x8be <main+0x41a>
							SpeedSet = FanSpeedMax;
 8ac:	80 91 73 00 	lds	r24, 0x0073
 8b0:	80 93 6d 00 	sts	0x006D, r24
							FanSpeed = 1;
 8b4:	c0 93 6e 00 	sts	0x006E, r28
							SpeedInited = 1;
 8b8:	c0 93 6b 00 	sts	0x006B, r28
 8bc:	1f c0       	rjmp	.+62     	; 0x8fc <main+0x458>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 8be:	f8 94       	cli
						} else {
							ATOMIC_BLOCK(ATOMIC_FORCEON) {
								FanSpeed = ((master_data*)NRF24_Buffer)->FanSpeed + FanSpeedOverride;
 8c0:	20 91 78 00 	lds	r18, 0x0078
 8c4:	80 91 76 00 	lds	r24, 0x0076
 8c8:	28 0f       	add	r18, r24
 8ca:	20 93 6e 00 	sts	0x006E, r18
								if(FanSpeed <= 0) FanSpeed = 0; // off
 8ce:	12 16       	cp	r1, r18
 8d0:	1c f0       	brlt	.+6      	; 0x8d8 <main+0x434>
 8d2:	10 92 6e 00 	sts	0x006E, r1
 8d6:	11 c0       	rjmp	.+34     	; 0x8fa <main+0x456>
								else {
									if(FanSpeedOff) FanSpeedOff = 3; // if off -> on
 8d8:	80 91 6a 00 	lds	r24, 0x006A
 8dc:	81 11       	cpse	r24, r1
 8de:	00 93 6a 00 	sts	0x006A, r16
									if(FanSpeed > FanSpeedMax) FanSpeed = FanSpeedMax;
 8e2:	40 91 73 00 	lds	r20, 0x0073
 8e6:	33 27       	eor	r19, r19
 8e8:	27 fd       	sbrc	r18, 7
 8ea:	30 95       	com	r19
 8ec:	84 2f       	mov	r24, r20
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	82 17       	cp	r24, r18
 8f2:	93 07       	cpc	r25, r19
 8f4:	14 f4       	brge	.+4      	; 0x8fa <main+0x456>
 8f6:	40 93 6e 00 	sts	0x006E, r20
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 8fa:	78 94       	sei
								}
							}
						}
						RequestCountdown = ((master_data*)NRF24_Buffer)->Pause;
 8fc:	80 91 77 00 	lds	r24, 0x0077
 900:	80 93 67 00 	sts	0x0067, r24
//						FlashLED(FanSpeed, 5, 10);
					}
					if(nrf_last_status <= 1) { // Status was send successfully
 904:	80 91 65 00 	lds	r24, 0x0065
 908:	82 30       	cpi	r24, 0x02	; 2
 90a:	08 f0       	brcs	.+2      	; 0x90e <main+0x46a>
 90c:	48 ce       	rjmp	.-880    	; 0x59e <main+0xfa>
						SendOffStatus = 0;
 90e:	10 92 66 00 	sts	0x0066, r1
						send_data = 0;
 912:	10 92 63 00 	sts	0x0063, r1
 916:	43 ce       	rjmp	.-890    	; 0x59e <main+0xfa>
					}
				} else {
					RequestCountdown = 1; // sec
 918:	c0 93 67 00 	sts	0x0067, r28
 91c:	40 ce       	rjmp	.-896    	; 0x59e <main+0xfa>
				}
			} else { // setup mode timeout
				setup_mode = 0;
 91e:	10 92 64 00 	sts	0x0064, r1
 922:	3d ce       	rjmp	.-902    	; 0x59e <main+0xfa>

00000924 <memcpy_P>:
 924:	fb 01       	movw	r30, r22
 926:	dc 01       	movw	r26, r24
 928:	02 c0       	rjmp	.+4      	; 0x92e <memcpy_P+0xa>
 92a:	05 90       	lpm	r0, Z+
 92c:	0d 92       	st	X+, r0
 92e:	41 50       	subi	r20, 0x01	; 1
 930:	50 40       	sbci	r21, 0x00	; 0
 932:	d8 f7       	brcc	.-10     	; 0x92a <memcpy_P+0x6>
 934:	08 95       	ret

00000936 <_exit>:
 936:	f8 94       	cli

00000938 <__stop_program>:
 938:	ff cf       	rjmp	.-2      	; 0x938 <__stop_program>
