
WirelessCO2Fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000018  00800060  00800060  00000944  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d8  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000013a0  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000371  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006ad  00000000  00000000  0000215d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002c8  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000050a  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000ea3  00000000  00000000  00002fde  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000e0  00000000  00000000  00003e81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	18 c0       	rjmp	.+48     	; 0x32 <__ctors_end>
   2:	27 c0       	rjmp	.+78     	; 0x52 <__bad_interrupt>
   4:	26 c0       	rjmp	.+76     	; 0x52 <__bad_interrupt>
   6:	3a c0       	rjmp	.+116    	; 0x7c <__vector_3>
   8:	24 c0       	rjmp	.+72     	; 0x52 <__bad_interrupt>
   a:	23 c0       	rjmp	.+70     	; 0x52 <__bad_interrupt>
   c:	22 c0       	rjmp	.+68     	; 0x52 <__bad_interrupt>
   e:	21 c0       	rjmp	.+66     	; 0x52 <__bad_interrupt>
  10:	20 c0       	rjmp	.+64     	; 0x52 <__bad_interrupt>
  12:	1f c0       	rjmp	.+62     	; 0x52 <__bad_interrupt>
  14:	1e c0       	rjmp	.+60     	; 0x52 <__bad_interrupt>
  16:	79 c1       	rjmp	.+754    	; 0x30a <__vector_11>
  18:	1c c0       	rjmp	.+56     	; 0x52 <__bad_interrupt>
  1a:	1b c0       	rjmp	.+54     	; 0x52 <__bad_interrupt>
  1c:	1a c0       	rjmp	.+52     	; 0x52 <__bad_interrupt>
  1e:	19 c0       	rjmp	.+50     	; 0x52 <__bad_interrupt>
  20:	18 c0       	rjmp	.+48     	; 0x52 <__bad_interrupt>

00000022 <NRF24_BASE_ADDR>:
  22:	c8 c8                                               ..

00000024 <NRF24_INIT_DATA>:
  24:	26 07 23 01 24 73 3d 06 21 01 22 01 3c 01           &.#.$s=.!.".<.

00000032 <__ctors_end>:
  32:	11 24       	eor	r1, r1
  34:	1f be       	out	0x3f, r1	; 63
  36:	cf e5       	ldi	r28, 0x5F	; 95
  38:	d1 e0       	ldi	r29, 0x01	; 1
  3a:	de bf       	out	0x3e, r29	; 62
  3c:	cd bf       	out	0x3d, r28	; 61

0000003e <__do_clear_bss>:
  3e:	20 e0       	ldi	r18, 0x00	; 0
  40:	a0 e6       	ldi	r26, 0x60	; 96
  42:	b0 e0       	ldi	r27, 0x00	; 0
  44:	01 c0       	rjmp	.+2      	; 0x48 <.do_clear_bss_start>

00000046 <.do_clear_bss_loop>:
  46:	1d 92       	st	X+, r1

00000048 <.do_clear_bss_start>:
  48:	a8 37       	cpi	r26, 0x78	; 120
  4a:	b2 07       	cpc	r27, r18
  4c:	e1 f7       	brne	.-8      	; 0x46 <.do_clear_bss_loop>
  4e:	22 d2       	rcall	.+1092   	; 0x494 <main>
  50:	3d c4       	rjmp	.+2170   	; 0x8cc <_exit>

00000052 <__bad_interrupt>:
  52:	d6 cf       	rjmp	.-84     	; 0x0 <__vectors>

00000054 <EEPROM_read>:
	uint8_t idx = EEPROM_read(EPROM_SaveRegIdx);
	if(idx == 0xFF) idx = 0;
	idx = EPROM_SaveReg + idx * 0x20;
	for(uint8_t i = 0; i <= 0x17; i++) {
		NRF24_ReadArray(NRF24_CMD_R_REGISTER + i, buf, 1);
		EEPROM_write(idx++, buf[0]);
  54:	e1 99       	sbic	0x1c, 1	; 28
	}
	NRF24_ReadArray(NRF24_CMD_R_REGISTER + 0x1C, buf, 1); // at 0x18
  56:	fe cf       	rjmp	.-4      	; 0x54 <EEPROM_read>
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	9f bb       	out	0x1f, r25	; 31
  5c:	8e bb       	out	0x1e, r24	; 30
  5e:	e0 9a       	sbi	0x1c, 0	; 28
  60:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(idx++, buf[0]);
  62:	08 95       	ret

00000064 <EEPROM_write>:
  64:	e1 99       	sbic	0x1c, 1	; 28
  66:	fe cf       	rjmp	.-4      	; 0x64 <EEPROM_write>
  68:	f8 94       	cli
	NRF24_ReadArray(NRF24_CMD_R_REGISTER + 0x1D, buf, 1); // at 0x19
  6a:	1c ba       	out	0x1c, r1	; 28
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	9f bb       	out	0x1f, r25	; 31
  70:	8e bb       	out	0x1e, r24	; 30
  72:	6d bb       	out	0x1d, r22	; 29
  74:	e2 9a       	sbi	0x1c, 2	; 28
	EEPROM_write(idx++, buf[0]);
  76:	e1 9a       	sbi	0x1c, 1	; 28
  78:	78 94       	sei
  7a:	08 95       	ret

0000007c <__vector_3>:
  7c:	1f 92       	push	r1
	EEPROM_write(idx++, st);
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
	EEPROM_write(idx++, cnt);
  86:	8f 93       	push	r24
  88:	80 91 6d 00 	lds	r24, 0x006D
  8c:	81 11       	cpse	r24, r1
	EEPROM_write(idx++, Timer);
  8e:	0a c0       	rjmp	.+20     	; 0xa4 <__vector_3+0x28>
  90:	80 91 6e 00 	lds	r24, 0x006E
  94:	81 11       	cpse	r24, r1
  96:	06 c0       	rjmp	.+12     	; 0xa4 <__vector_3+0x28>
	
	idx = EEPROM_read(EPROM_SaveRegIdx) + 1;
  98:	86 b3       	in	r24, 0x16	; 22
  9a:	80 95       	com	r24
  9c:	87 70       	andi	r24, 0x07	; 7
  9e:	80 93 70 00 	sts	0x0070, r24
	if(idx > IDX_MAX) idx = 0;
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__vector_3+0x2c>
  a4:	10 92 70 00 	sts	0x0070, r1
	EEPROM_write(EPROM_SaveRegIdx, idx);
  a8:	8f 91       	pop	r24
}
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <Delay10us>:
  b4:	88 23       	and	r24, r24
  b6:	31 f0       	breq	.+12     	; 0xc4 <Delay10us+0x10>
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	9a 95       	dec	r25
  bc:	f1 f7       	brne	.-4      	; 0xba <Delay10us+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	00 00       	nop
  c0:	81 50       	subi	r24, 0x01	; 1
  c2:	f8 cf       	rjmp	.-16     	; 0xb4 <Delay10us>

#define FLAG_LowLight				0x01

#if(1)
void Delay10us(uint8_t ms) {
	while(ms-- > 0) _delay_us(10); wdt_reset();
  c4:	a8 95       	wdr
  c6:	08 95       	ret

000000c8 <Delay100ms>:
	while(ms-- > 0) {
		_delay_ms(1); wdt_reset();
	}
}
void Delay100ms(unsigned int ms) {
	while(ms-- > 0) {
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	49 f0       	breq	.+18     	; 0xde <Delay100ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	e7 ea       	ldi	r30, 0xA7	; 167
  ce:	f1 e6       	ldi	r31, 0x61	; 97
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <Delay100ms+0x8>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <Delay100ms+0xe>
  d6:	00 00       	nop
		_delay_ms(100); wdt_reset();
  d8:	a8 95       	wdr
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f5 cf       	rjmp	.-22     	; 0xc8 <Delay100ms>
	}
}
  de:	08 95       	ret

000000e0 <FlashLED>:

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
	while (num-- > 0) {
  ea:	f8 2e       	mov	r15, r24
		LED1_OFF;
		Delay100ms(toff);
  ec:	06 2f       	mov	r16, r22
  ee:	10 e0       	ldi	r17, 0x00	; 0
		LED1_ON;
		Delay100ms(ton);
  f0:	c4 2f       	mov	r28, r20
  f2:	d0 e0       	ldi	r29, 0x00	; 0
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
		LED1_OFF;
  f4:	d9 98       	cbi	0x1b, 1	; 27
		_delay_ms(100); wdt_reset();
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
  f6:	ff 20       	and	r15, r15
  f8:	39 f0       	breq	.+14     	; 0x108 <FlashLED+0x28>
		LED1_OFF;
		Delay100ms(toff);
  fa:	c8 01       	movw	r24, r16
  fc:	e5 df       	rcall	.-54     	; 0xc8 <Delay100ms>
		LED1_ON;
  fe:	d9 9a       	sbi	0x1b, 1	; 27
		Delay100ms(ton);
 100:	ce 01       	movw	r24, r28
 102:	e2 df       	rcall	.-60     	; 0xc8 <Delay100ms>
 104:	fa 94       	dec	r15
 106:	f6 cf       	rjmp	.-20     	; 0xf4 <FlashLED+0x14>
	}
	LED1_OFF;
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	ff 90       	pop	r15
 112:	08 95       	ret

00000114 <SPI_WriteReadByte>:
	NRF24_CMD_W_REGISTER | NRF24_REG_DYNPD,		0b000001 // Dynamic payload
};
const uint8_t NRF24_BASE_ADDR[] PROGMEM = { 0xC8, 0xC8 }; // Address MSBs: 2..3

uint8_t SPI_WriteReadByte(uint8_t data) {
	USIDR = data;
 114:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); // clear overflow flag
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	8e b9       	out	0x0e, r24	; 14
	do {
		USICR = (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);
 11a:	8b e1       	ldi	r24, 0x1B	; 27
 11c:	8d b9       	out	0x0d, r24	; 13
	} while((USISR & (1<<USIOIF)) == 0);
 11e:	76 9b       	sbis	0x0e, 6	; 14
 120:	fd cf       	rjmp	.-6      	; 0x11c <SPI_WriteReadByte+0x8>
	return USIDR;
 122:	8f b1       	in	r24, 0x0f	; 15
}
 124:	08 95       	ret

00000126 <NRF24_ReadArray>:
	NRF24_SET_CSN_HI;
	return result;
}

void NRF24_ReadArray(uint8_t cmd, uint8_t *array, uint8_t len)
{
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	00 d0       	rcall	.+0      	; 0x132 <NRF24_ReadArray+0xc>
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 138:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 13a:	69 83       	std	Y+1, r22	; 0x01
 13c:	7a 83       	std	Y+2, r23	; 0x02
 13e:	ea df       	rcall	.-44     	; 0x114 <SPI_WriteReadByte>
	while(len-- > 0) *array++ = SPI_WriteReadByte(NRF24_CMD_NOP);
 140:	69 81       	ldd	r22, Y+1	; 0x01
 142:	e6 2e       	mov	r14, r22
 144:	7a 81       	ldd	r23, Y+2	; 0x02
 146:	f7 2e       	mov	r15, r23
 148:	16 0f       	add	r17, r22
 14a:	1e 15       	cp	r17, r14
 14c:	31 f0       	breq	.+12     	; 0x15a <NRF24_ReadArray+0x34>
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	e1 df       	rcall	.-62     	; 0x114 <SPI_WriteReadByte>
 152:	f7 01       	movw	r30, r14
 154:	81 93       	st	Z+, r24
 156:	7f 01       	movw	r14, r30
 158:	f8 cf       	rjmp	.-16     	; 0x14a <NRF24_ReadArray+0x24>
	NRF24_SET_CSN_HI;
 15a:	db 9a       	sbi	0x1b, 3	; 27
}
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	08 95       	ret

0000016c <NRF24_WriteByte>:

void NRF24_WriteByte(uint8_t cmd, uint8_t value)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	1f 92       	push	r1
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
	NRF24_SET_CSN_LOW;
 176:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 178:	69 83       	std	Y+1, r22	; 0x01
 17a:	cc df       	rcall	.-104    	; 0x114 <SPI_WriteReadByte>
	SPI_WriteReadByte(value);
 17c:	69 81       	ldd	r22, Y+1	; 0x01
 17e:	86 2f       	mov	r24, r22
 180:	c9 df       	rcall	.-110    	; 0x114 <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 182:	db 9a       	sbi	0x1b, 3	; 27
}
 184:	0f 90       	pop	r0
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <NRF24_WriteArray>:

void NRF24_WriteArray(int8_t cmd, uint8_t *array, uint8_t len)
{
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 d0       	rcall	.+0      	; 0x198 <NRF24_WriteArray+0xc>
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 19e:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 1a0:	69 83       	std	Y+1, r22	; 0x01
 1a2:	7a 83       	std	Y+2, r23	; 0x02
 1a4:	b7 df       	rcall	.-146    	; 0x114 <SPI_WriteReadByte>
	while(len-- > 0) SPI_WriteReadByte(*array++);
 1a6:	69 81       	ldd	r22, Y+1	; 0x01
 1a8:	e6 2e       	mov	r14, r22
 1aa:	7a 81       	ldd	r23, Y+2	; 0x02
 1ac:	f7 2e       	mov	r15, r23
 1ae:	16 0f       	add	r17, r22
 1b0:	1e 15       	cp	r17, r14
 1b2:	29 f0       	breq	.+10     	; 0x1be <NRF24_WriteArray+0x32>
 1b4:	f7 01       	movw	r30, r14
 1b6:	81 91       	ld	r24, Z+
 1b8:	7f 01       	movw	r14, r30
 1ba:	ac df       	rcall	.-168    	; 0x114 <SPI_WriteReadByte>
 1bc:	f9 cf       	rjmp	.-14     	; 0x1b0 <NRF24_WriteArray+0x24>
	NRF24_SET_CSN_HI;
 1be:	db 9a       	sbi	0x1b, 3	; 27
}
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	08 95       	ret

000001d0 <NRF24_SendCommand>:

uint8_t NRF24_SendCommand(uint8_t cmd) // Send command & receive status
{
	NRF24_SET_CSN_LOW;
 1d0:	db 98       	cbi	0x1b, 3	; 27
	uint8_t result = SPI_WriteReadByte(cmd);
 1d2:	a0 df       	rcall	.-192    	; 0x114 <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 1d4:	db 9a       	sbi	0x1b, 3	; 27
	return result;
}
 1d6:	08 95       	ret

000001d8 <NRF24_SetMode>:
	if(idx > IDX_MAX) idx = 0;
	EEPROM_write(EPROM_SaveRegIdx, idx);
}

void NRF24_SetMode(uint8_t mode) // Set mode in CONFIG reg
{
 1d8:	cf 93       	push	r28
 1da:	c8 2f       	mov	r28, r24
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG | (1<<NRF24_BIT_PWR_UP) | mode);
 1dc:	68 2f       	mov	r22, r24
 1de:	6e 67       	ori	r22, 0x7E	; 126
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	c4 df       	rcall	.-120    	; 0x16c <NRF24_WriteByte>
	if(mode & NRF24_ReceiveMode) { // Receive mode
 1e4:	c0 ff       	sbrs	r28, 0
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <NRF24_SetMode+0x18>
		//NRF24_SendCommand(NRF24_CMD_FLUSH_RX);
		NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 1e8:	60 e7       	ldi	r22, 0x70	; 112
 1ea:	87 e2       	ldi	r24, 0x27	; 39
 1ec:	bf df       	rcall	.-130    	; 0x16c <NRF24_WriteByte>
		NRF24_SET_CE_HI; // start receiving
 1ee:	da 9a       	sbi	0x1b, 2	; 27
	}
}
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <NRF24_TransmitShockBurst>:
}

// Transmit payload, than receive payload.
// return 0 if success, 1 - Payload not returned, 2 - Max retransmit reached, 3 - return payload len error, 4 - module not responding.
uint8_t NRF24_TransmitShockBurst(uint8_t send_len, uint8_t receive_len)
{
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	1f 92       	push	r1
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	48 2f       	mov	r20, r24
 206:	16 2f       	mov	r17, r22
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 208:	60 e7       	ldi	r22, 0x70	; 112
 20a:	87 e2       	ldi	r24, 0x27	; 39
 20c:	49 83       	std	Y+1, r20	; 0x01
 20e:	ae df       	rcall	.-164    	; 0x16c <NRF24_WriteByte>
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
 210:	81 ee       	ldi	r24, 0xE1	; 225
 212:	de df       	rcall	.-68     	; 0x1d0 <NRF24_SendCommand>
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, NRF24_Buffer, send_len);
 214:	49 81       	ldd	r20, Y+1	; 0x01
 216:	64 e7       	ldi	r22, 0x74	; 116
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	80 ea       	ldi	r24, 0xA0	; 160
 21c:	b7 df       	rcall	.-146    	; 0x18c <NRF24_WriteArray>
	NRF24_SET_CE_HI; // Start transmission
 21e:	da 9a       	sbi	0x1b, 2	; 27
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 220:	01 e0       	ldi	r16, 0x01	; 1
	{
		Delay10us(10);
 222:	8a e0       	ldi	r24, 0x0A	; 10
 224:	47 df       	rcall	.-370    	; 0xb4 <Delay10us>
		st = NRF24_SendCommand(NRF24_CMD_NOP);
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	d3 df       	rcall	.-90     	; 0x1d0 <NRF24_SendCommand>
 22a:	f8 2e       	mov	r15, r24
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
 22c:	80 73       	andi	r24, 0x30	; 48
 22e:	11 f4       	brne	.+4      	; 0x234 <NRF24_TransmitShockBurst+0x40>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, NRF24_Buffer, send_len);
	NRF24_SET_CE_HI; // Start transmission
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 230:	0f 5f       	subi	r16, 0xFF	; 255
 232:	b9 f7       	brne	.-18     	; 0x222 <NRF24_TransmitShockBurst+0x2e>
	{
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	NRF24_SET_CE_LOW;
 234:	da 98       	cbi	0x1b, 2	; 27
	if(i == 0) return 4;
 236:	00 23       	and	r16, r16
 238:	21 f1       	breq	.+72     	; 0x282 <NRF24_TransmitShockBurst+0x8e>
	// debug
	//NRF_save_registers(st, i);
	//
	NRF24_ReadArray(NRF24_CMD_R_REGISTER | NRF24_REG_FIFO_STATUS, NRF24_Buffer, 1); // get FIFO_STATUS
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	64 e7       	ldi	r22, 0x74	; 116
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	87 e1       	ldi	r24, 0x17	; 23
 242:	71 df       	rcall	.-286    	; 0x126 <NRF24_ReadArray>
	if((st & (1<<NRF24_BIT_RX_DR)) || (NRF24_Buffer[0] & (1<<NRF24_BIT_RX_EMPTY)) == 0) {
 244:	f6 fc       	sbrc	r15, 6
 246:	04 c0       	rjmp	.+8      	; 0x250 <NRF24_TransmitShockBurst+0x5c>
 248:	80 91 74 00 	lds	r24, 0x0074
 24c:	80 fd       	sbrc	r24, 0
 24e:	15 c0       	rjmp	.+42     	; 0x27a <NRF24_TransmitShockBurst+0x86>
		NRF24_Buffer[0] = 0xFF;
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	80 93 74 00 	sts	0x0074, r24
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	64 e7       	ldi	r22, 0x74	; 116
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	80 e6       	ldi	r24, 0x60	; 96
 25e:	63 df       	rcall	.-314    	; 0x126 <NRF24_ReadArray>
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
 260:	80 91 74 00 	lds	r24, 0x0074
 264:	81 32       	cpi	r24, 0x21	; 33
 266:	78 f4       	brcc	.+30     	; 0x286 <NRF24_TransmitShockBurst+0x92>
 268:	81 17       	cp	r24, r17
 26a:	68 f0       	brcs	.+26     	; 0x286 <NRF24_TransmitShockBurst+0x92>
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
 26c:	41 2f       	mov	r20, r17
 26e:	64 e7       	ldi	r22, 0x74	; 116
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	81 e6       	ldi	r24, 0x61	; 97
 274:	58 df       	rcall	.-336    	; 0x126 <NRF24_ReadArray>
		return  0;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	09 c0       	rjmp	.+18     	; 0x28c <NRF24_TransmitShockBurst+0x98>
	} else {
		if(st & (1<<NRF24_BIT_MAX_RT)) return 2;
 27a:	f4 fe       	sbrs	r15, 4
 27c:	06 c0       	rjmp	.+12     	; 0x28a <NRF24_TransmitShockBurst+0x96>
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	05 c0       	rjmp	.+10     	; 0x28c <NRF24_TransmitShockBurst+0x98>
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	NRF24_SET_CE_LOW;
	if(i == 0) return 4;
 282:	84 e0       	ldi	r24, 0x04	; 4
 284:	03 c0       	rjmp	.+6      	; 0x28c <NRF24_TransmitShockBurst+0x98>
	//
	NRF24_ReadArray(NRF24_CMD_R_REGISTER | NRF24_REG_FIFO_STATUS, NRF24_Buffer, 1); // get FIFO_STATUS
	if((st & (1<<NRF24_BIT_RX_DR)) || (NRF24_Buffer[0] & (1<<NRF24_BIT_RX_EMPTY)) == 0) {
		NRF24_Buffer[0] = 0xFF;
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	01 c0       	rjmp	.+2      	; 0x28c <NRF24_TransmitShockBurst+0x98>
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
		return  0;
	} else {
		if(st & (1<<NRF24_BIT_MAX_RT)) return 2;
		return 1;
 28a:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 28c:	0f 90       	pop	r0
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	08 95       	ret

0000029a <NRF24_SetAddresses>:

uint8_t NRF24_SetAddresses(uint8_t addr_LSB) // Set addresses: NRF24_BASE_ADDR + addr_LSB, return 1 if success
{
 29a:	cf 93       	push	r28
 29c:	c8 2f       	mov	r28, r24
	NRF24_Buffer[0] = addr_LSB;
 29e:	80 93 74 00 	sts	0x0074, r24
	memcpy_P(NRF24_Buffer + 1, NRF24_BASE_ADDR, sizeof(NRF24_BASE_ADDR)/sizeof(NRF24_BASE_ADDR[0]));
 2a2:	42 e0       	ldi	r20, 0x02	; 2
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	62 e2       	ldi	r22, 0x22	; 34
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	85 e7       	ldi	r24, 0x75	; 117
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	05 d3       	rcall	.+1546   	; 0x8ba <memcpy_P>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_RX_ADDR_P0, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2b0:	43 e0       	ldi	r20, 0x03	; 3
 2b2:	64 e7       	ldi	r22, 0x74	; 116
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	8a e2       	ldi	r24, 0x2A	; 42
 2b8:	69 df       	rcall	.-302    	; 0x18c <NRF24_WriteArray>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2ba:	43 e0       	ldi	r20, 0x03	; 3
 2bc:	64 e7       	ldi	r22, 0x74	; 116
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	80 e3       	ldi	r24, 0x30	; 48
 2c2:	64 df       	rcall	.-312    	; 0x18c <NRF24_WriteArray>
	NRF24_ReadArray(NRF24_CMD_R_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2c4:	43 e0       	ldi	r20, 0x03	; 3
 2c6:	64 e7       	ldi	r22, 0x74	; 116
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	80 e1       	ldi	r24, 0x10	; 16
 2cc:	2c df       	rcall	.-424    	; 0x126 <NRF24_ReadArray>
	return NRF24_Buffer[0] == addr_LSB;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 91 74 00 	lds	r25, 0x0074
 2d4:	9c 13       	cpse	r25, r28
 2d6:	80 e0       	ldi	r24, 0x00	; 0
}
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <NRF24_init>:
	NRF24_SET_CE_LOW;
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG); // Power down
}

void NRF24_init(uint8_t channel) // After init transmit must be delayed
{
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	18 2f       	mov	r17, r24
	NRF24_SET_CSN_HI;
 2e4:	db 9a       	sbi	0x1b, 3	; 27
 2e6:	c4 e2       	ldi	r28, 0x24	; 36
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i = 0, c, v;
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 2ea:	fe 01       	movw	r30, r28
 2ec:	84 91       	lpm	r24, Z
 2ee:	31 96       	adiw	r30, 0x01	; 1
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 2f0:	64 91       	lpm	r22, Z
		NRF24_WriteByte(c, v); 
 2f2:	3c df       	rcall	.-392    	; 0x16c <NRF24_WriteByte>
 2f4:	22 96       	adiw	r28, 0x02	; 2
	} while(i < sizeof(NRF24_INIT_DATA));
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	c2 33       	cpi	r28, 0x32	; 50
 2fa:	df 07       	cpc	r29, r31
 2fc:	b1 f7       	brne	.-20     	; 0x2ea <NRF24_init+0xe>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 2fe:	61 2f       	mov	r22, r17
 300:	85 e2       	ldi	r24, 0x25	; 37
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		NRF24_WriteByte(c, v); 
	} while(i < sizeof(NRF24_INIT_DATA));
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 308:	31 cf       	rjmp	.-414    	; 0x16c <NRF24_WriteByte>

0000030a <__vector_11>:

#define SETUP_WATCHDOG WDTCSR = (1<<WDCE) | (1<<WDE); WDTCSR = (1<<WDE) | (0<<WDIE) | (0<<WDP3) | (1<<WDP2) | (1<<WDP1) | (0<<WDP0); //  Watchdog reset 1 s
uint8_t LED_Warning = 0, LED_WarningOnCnt = 0, LED_WarningOffCnt = 0;

ISR(TIM0_OVF_vect) // 0.10035 sec
{
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
	if(++TimerCntSec == 10) { // 1 sec
 31e:	80 91 69 00 	lds	r24, 0x0069
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	8a 30       	cpi	r24, 0x0A	; 10
 326:	19 f0       	breq	.+6      	; 0x32e <__vector_11+0x24>
 328:	80 93 69 00 	sts	0x0069, r24
 32c:	0e c0       	rjmp	.+28     	; 0x34a <__vector_11+0x40>
		TimerCntSec = 0;
 32e:	10 92 69 00 	sts	0x0069, r1
		if(RequestCountdown) RequestCountdown--;
 332:	80 91 67 00 	lds	r24, 0x0067
 336:	88 23       	and	r24, r24
 338:	19 f0       	breq	.+6      	; 0x340 <__vector_11+0x36>
 33a:	81 50       	subi	r24, 0x01	; 1
 33c:	80 93 67 00 	sts	0x0067, r24
		Timer++;
 340:	80 91 68 00 	lds	r24, 0x0068
 344:	8f 5f       	subi	r24, 0xFF	; 255
 346:	80 93 68 00 	sts	0x0068, r24
	}
 	if(LED_WarningOnCnt) {
 34a:	80 91 61 00 	lds	r24, 0x0061
 34e:	88 23       	and	r24, r24
 350:	39 f0       	breq	.+14     	; 0x360 <__vector_11+0x56>
	 	LED1_ON;
 352:	d9 9a       	sbi	0x1b, 1	; 27
	 	LED_WarningOnCnt--;
 354:	80 91 61 00 	lds	r24, 0x0061
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	80 93 61 00 	sts	0x0061, r24
 35e:	1a c0       	rjmp	.+52     	; 0x394 <__vector_11+0x8a>
	} else if(LED_WarningOffCnt) {
 360:	80 91 60 00 	lds	r24, 0x0060
 364:	88 23       	and	r24, r24
 366:	29 f0       	breq	.+10     	; 0x372 <__vector_11+0x68>
	 	LED1_OFF;
 368:	d9 98       	cbi	0x1b, 1	; 27
	 	LED_WarningOffCnt--;
 36a:	80 91 60 00 	lds	r24, 0x0060
 36e:	81 50       	subi	r24, 0x01	; 1
 370:	0f c0       	rjmp	.+30     	; 0x390 <__vector_11+0x86>
	} else if(LED_Warning) { // short flashes
 372:	80 91 62 00 	lds	r24, 0x0062
 376:	88 23       	and	r24, r24
 378:	69 f0       	breq	.+26     	; 0x394 <__vector_11+0x8a>
	 	LED_WarningOffCnt = 3;
 37a:	93 e0       	ldi	r25, 0x03	; 3
 37c:	90 93 60 00 	sts	0x0060, r25
	 	LED_WarningOnCnt = 3;
 380:	90 93 61 00 	sts	0x0061, r25
	 	if(--LED_Warning == 0) LED_WarningOffCnt = 5;
 384:	81 50       	subi	r24, 0x01	; 1
 386:	80 93 62 00 	sts	0x0062, r24
 38a:	81 11       	cpse	r24, r1
 38c:	03 c0       	rjmp	.+6      	; 0x394 <__vector_11+0x8a>
 38e:	85 e0       	ldi	r24, 0x05	; 5
 390:	80 93 60 00 	sts	0x0060, r24
 	}
	if(FanSpeedOff < 2 && FanSpeed != SpeedSet && setup_mode == 0) {
 394:	90 91 6a 00 	lds	r25, 0x006A
 398:	92 30       	cpi	r25, 0x02	; 2
 39a:	08 f0       	brcs	.+2      	; 0x39e <__vector_11+0x94>
 39c:	71 c0       	rjmp	.+226    	; 0x480 <__vector_11+0x176>
 39e:	80 91 73 00 	lds	r24, 0x0073
 3a2:	20 91 72 00 	lds	r18, 0x0072
 3a6:	82 17       	cp	r24, r18
 3a8:	09 f4       	brne	.+2      	; 0x3ac <__vector_11+0xa2>
 3aa:	6a c0       	rjmp	.+212    	; 0x480 <__vector_11+0x176>
 3ac:	30 91 64 00 	lds	r19, 0x0064
 3b0:	31 11       	cpse	r19, r1
 3b2:	66 c0       	rjmp	.+204    	; 0x480 <__vector_11+0x176>
		if(PressKeyOffTime) {
 3b4:	30 91 6e 00 	lds	r19, 0x006E
 3b8:	33 23       	and	r19, r19
 3ba:	61 f0       	breq	.+24     	; 0x3d4 <__vector_11+0xca>
			if(--PressKeyOffTime == 0) {
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	83 0f       	add	r24, r19
 3c0:	80 93 6e 00 	sts	0x006E, r24
 3c4:	81 11       	cpse	r24, r1
 3c6:	5c c0       	rjmp	.+184    	; 0x480 <__vector_11+0x176>
				KEYS_DDR |= PressKey; // set Out, level 0 - key pressed
 3c8:	87 b3       	in	r24, 0x17	; 23
 3ca:	90 91 6f 00 	lds	r25, 0x006F
 3ce:	89 2b       	or	r24, r25
 3d0:	87 bb       	out	0x17, r24	; 23
 3d2:	56 c0       	rjmp	.+172    	; 0x480 <__vector_11+0x176>
			}
		} else if(PressKeyOnTime) {
 3d4:	30 91 6d 00 	lds	r19, 0x006D
 3d8:	33 23       	and	r19, r19
 3da:	09 f4       	brne	.+2      	; 0x3de <__vector_11+0xd4>
 3dc:	3d c0       	rjmp	.+122    	; 0x458 <__vector_11+0x14e>
			if(--PressKeyOnTime == 0) {
 3de:	8f ef       	ldi	r24, 0xFF	; 255
 3e0:	83 0f       	add	r24, r19
 3e2:	80 93 6d 00 	sts	0x006D, r24
 3e6:	81 11       	cpse	r24, r1
 3e8:	4b c0       	rjmp	.+150    	; 0x480 <__vector_11+0x176>
				KEYS_DDR &= ~PressKey; // set In - key released
 3ea:	97 b3       	in	r25, 0x17	; 23
 3ec:	80 91 6f 00 	lds	r24, 0x006F
 3f0:	80 95       	com	r24
 3f2:	89 23       	and	r24, r25
 3f4:	87 bb       	out	0x17, r24	; 23
				if(PressKey == KEY_PWR) {
 3f6:	90 91 6f 00 	lds	r25, 0x006F
 3fa:	91 30       	cpi	r25, 0x01	; 1
 3fc:	61 f4       	brne	.+24     	; 0x416 <__vector_11+0x10c>
					FanSpeedOff ^= 1;
 3fe:	80 91 6a 00 	lds	r24, 0x006A
 402:	89 27       	eor	r24, r25
 404:	80 93 6a 00 	sts	0x006A, r24
					if(FanSpeedOff) {
 408:	88 23       	and	r24, r24
 40a:	d1 f1       	breq	.+116    	; 0x480 <__vector_11+0x176>
x_off_ok:				FanSpeed = SpeedSet;
 40c:	80 91 72 00 	lds	r24, 0x0072
 410:	80 93 73 00 	sts	0x0073, r24
 414:	35 c0       	rjmp	.+106    	; 0x480 <__vector_11+0x176>
 416:	80 91 72 00 	lds	r24, 0x0072
					}
				} else {
					if(PressKey == KEY_MINUS) SpeedSet--;
 41a:	92 30       	cpi	r25, 0x02	; 2
 41c:	11 f4       	brne	.+4      	; 0x422 <__vector_11+0x118>
 41e:	81 50       	subi	r24, 0x01	; 1
 420:	01 c0       	rjmp	.+2      	; 0x424 <__vector_11+0x11a>
					else SpeedSet++; // PressKey == KEY_PLUS
 422:	8f 5f       	subi	r24, 0xFF	; 255
 424:	80 93 72 00 	sts	0x0072, r24
					if(SpeedSet < 1) SpeedSet = 1;
 428:	20 91 72 00 	lds	r18, 0x0072
 42c:	12 16       	cp	r1, r18
 42e:	24 f0       	brlt	.+8      	; 0x438 <__vector_11+0x12e>
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 72 00 	sts	0x0072, r24
 436:	0c c0       	rjmp	.+24     	; 0x450 <__vector_11+0x146>
					else if(SpeedSet > FanSpeedMax) SpeedSet = FanSpeedMax;
 438:	40 91 71 00 	lds	r20, 0x0071
 43c:	33 27       	eor	r19, r19
 43e:	27 fd       	sbrc	r18, 7
 440:	30 95       	com	r19
 442:	84 2f       	mov	r24, r20
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	82 17       	cp	r24, r18
 448:	93 07       	cpc	r25, r19
 44a:	14 f4       	brge	.+4      	; 0x450 <__vector_11+0x146>
 44c:	40 93 72 00 	sts	0x0072, r20
					SpeedSetChanged = 1;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	80 93 6c 00 	sts	0x006C, r24
 456:	14 c0       	rjmp	.+40     	; 0x480 <__vector_11+0x176>
				}
			}
		} else {
			if(FanSpeed <= 0) { // off
 458:	18 16       	cp	r1, r24
 45a:	24 f0       	brlt	.+8      	; 0x464 <__vector_11+0x15a>
				if(FanSpeedOff) goto x_off_ok; // Already off
 45c:	91 11       	cpse	r25, r1
 45e:	d6 cf       	rjmp	.-84     	; 0x40c <__vector_11+0x102>
				PressKey = KEY_PWR;
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	07 c0       	rjmp	.+14     	; 0x472 <__vector_11+0x168>
			} else if(FanSpeedOff) { // switch on, and after set speed
 464:	91 11       	cpse	r25, r1
 466:	fc cf       	rjmp	.-8      	; 0x460 <__vector_11+0x156>
				PressKey = KEY_PWR;
			} else if(FanSpeed < SpeedSet) { // less
 468:	82 17       	cp	r24, r18
 46a:	14 f4       	brge	.+4      	; 0x470 <__vector_11+0x166>
				PressKey = KEY_MINUS;
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	01 c0       	rjmp	.+2      	; 0x472 <__vector_11+0x168>
			} else {
				PressKey = KEY_PLUS;
 470:	84 e0       	ldi	r24, 0x04	; 4
 472:	80 93 6f 00 	sts	0x006F, r24
			}
			PressKeyOffTime = 2;
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	80 93 6e 00 	sts	0x006E, r24
			PressKeyOnTime = 2;
 47c:	80 93 6d 00 	sts	0x006D, r24
		}
	}
}
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <main>:

int main(void)
{
	CLKPR = (1<<CLKPCE); CLKPR = (0<<CLKPS3) | (0<<CLKPS2) | (1<<CLKPS1) | (1<<CLKPS0); // Clock prescaler: 8
 494:	80 e8       	ldi	r24, 0x80	; 128
 496:	86 bd       	out	0x26, r24	; 38
 498:	93 e0       	ldi	r25, 0x03	; 3
 49a:	96 bd       	out	0x26, r25	; 38
	MCUCR = (1<<SE) | (0<<SM1) | (0<<SM0); // Idle sleep enable
 49c:	80 e2       	ldi	r24, 0x20	; 32
 49e:	85 bf       	out	0x35, r24	; 53
	KEYS_DDR &= ~(KEY_PWR | KEY_MINUS | KEY_PLUS); // In
 4a0:	87 b3       	in	r24, 0x17	; 23
 4a2:	88 7f       	andi	r24, 0xF8	; 248
 4a4:	87 bb       	out	0x17, r24	; 23
	KEYS_PORT &= ~(KEY_PWR | KEY_MINUS | KEY_PLUS); // = 0
 4a6:	88 b3       	in	r24, 0x18	; 24
 4a8:	88 7f       	andi	r24, 0xF8	; 248
 4aa:	88 bb       	out	0x18, r24	; 24
	DDRA = LED1; // Out
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	8a bb       	out	0x1a, r24	; 26
	PORTA = (1<<PORTA7) | (1<<PORTA0); // pullup not used pins
 4b0:	81 e8       	ldi	r24, 0x81	; 129
 4b2:	8b bb       	out	0x1b, r24	; 27
	NRF24_SET_CSN_HI;
 4b4:	db 9a       	sbi	0x1b, 3	; 27
	NRF24_DDR |= NRF24_CE | NRF24_CSN | NRF24_SCK | NRF24_MOSI; // Out
 4b6:	8a b3       	in	r24, 0x1a	; 26
 4b8:	8c 63       	ori	r24, 0x3C	; 60
 4ba:	8a bb       	out	0x1a, r24	; 26
//	// Timer 8 bit
 	TCCR0A = (1<<WGM01) | (1<<WGM00);  // Timer0: Fast PWM OCRA
 4bc:	90 bf       	out	0x30, r25	; 48
 	TCCR0B = (1<<WGM02) | (1 << CS02) | (0 << CS01) | (1 << CS00); // Timer0 prescaller: 1024
 4be:	8d e0       	ldi	r24, 0x0D	; 13
 4c0:	83 bf       	out	0x33, r24	; 51
 	TIMSK0 |= (1<<TOIE0); // Timer/Counter0 Overflow Interrupt Enable
 4c2:	89 b7       	in	r24, 0x39	; 57
 4c4:	81 60       	ori	r24, 0x01	; 1
 4c6:	89 bf       	out	0x39, r24	; 57
 	OCR0A = 97; // OC0A(TOP)=Fclk/prescaller/Freq - 1; Freq=Fclk/(prescaller*(1+TOP))
 4c8:	81 e6       	ldi	r24, 0x61	; 97
 4ca:	86 bf       	out	0x36, r24	; 54
 	//OCR0B = 0; // 0..OCR0A, Half Duty cycle = ((TOP+1)/2-1)
	//TCCR0A |= (1<<COM0B1); // Start PWM out
	FanSpeedMax = EEPROM_read(EPROM_FanSpeedMax);
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	c2 dd       	rcall	.-1148   	; 0x54 <EEPROM_read>
 4d0:	80 93 71 00 	sts	0x0071, r24
	if(FanSpeedMax == 0xFF) {
 4d4:	8f 3f       	cpi	r24, 0xFF	; 255
 4d6:	a9 f4       	brne	.+42     	; 0x502 <main+0x6e>
		EEPROM_write(EPROM_OSCCAL, OSCCAL);
 4d8:	61 b7       	in	r22, 0x31	; 49
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	c3 dd       	rcall	.-1146   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_RFAddress, 0xE5);
 4de:	65 ee       	ldi	r22, 0xE5	; 229
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	c0 dd       	rcall	.-1152   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_RF_Channel, 120);
 4e4:	68 e7       	ldi	r22, 0x78	; 120
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	bd dd       	rcall	.-1158   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_FanSpeedMax, 7);
 4ea:	67 e0       	ldi	r22, 0x07	; 7
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	ba dd       	rcall	.-1164   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_PauseWhenError, 30);
 4f0:	6e e1       	ldi	r22, 0x1E	; 30
 4f2:	84 e0       	ldi	r24, 0x04	; 4
 4f4:	b7 dd       	rcall	.-1170   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_CurrentSpeedAddr, EPROM_CurrentSpeedAddr + 1);
 4f6:	60 e2       	ldi	r22, 0x20	; 32
 4f8:	8f e1       	ldi	r24, 0x1F	; 31
 4fa:	b4 dd       	rcall	.-1176   	; 0x64 <EEPROM_write>
		EEPROM_write(EPROM_CurrentSpeedAddr + 1, 1);
 4fc:	61 e0       	ldi	r22, 0x01	; 1
 4fe:	80 e2       	ldi	r24, 0x20	; 32
 500:	b1 dd       	rcall	.-1182   	; 0x64 <EEPROM_write>
	}
	//OSCCAL = EEPROM_read(EPROM_OSCCAL);
	uint8_t addr = EEPROM_read(EPROM_CurrentSpeedAddr);
 502:	8f e1       	ldi	r24, 0x1F	; 31
 504:	a7 dd       	rcall	.-1202   	; 0x54 <EEPROM_read>
	if(addr && (SpeedSet = EEPROM_read(addr)) <= FanSpeedMax) {
 506:	88 23       	and	r24, r24
 508:	69 f0       	breq	.+26     	; 0x524 <main+0x90>
 50a:	a4 dd       	rcall	.-1208   	; 0x54 <EEPROM_read>
 50c:	80 93 72 00 	sts	0x0072, r24
 510:	48 2f       	mov	r20, r24
 512:	55 27       	eor	r21, r21
 514:	47 fd       	sbrc	r20, 7
 516:	50 95       	com	r21
 518:	20 91 71 00 	lds	r18, 0x0071
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	24 17       	cp	r18, r20
 520:	35 07       	cpc	r19, r21
 522:	2c f4       	brge	.+10     	; 0x52e <main+0x9a>
		FanSpeed = SpeedSet;
	} else { // Speed not saved - set 1
		SpeedSet = FanSpeedMax;
 524:	80 91 71 00 	lds	r24, 0x0071
 528:	80 93 72 00 	sts	0x0072, r24
		FanSpeed = 1;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	80 93 73 00 	sts	0x0073, r24
	}
	RequestCountdown = EEPROM_read(EPROM_InitPause);
 532:	85 e0       	ldi	r24, 0x05	; 5
 534:	8f dd       	rcall	.-1250   	; 0x54 <EEPROM_read>
 536:	80 93 67 00 	sts	0x0067, r24
	KEYS_INTR_INIT;
 53a:	8b b7       	in	r24, 0x3b	; 59
 53c:	80 62       	ori	r24, 0x20	; 32
 53e:	8b bf       	out	0x3b, r24	; 59
 540:	80 b5       	in	r24, 0x20	; 32
 542:	87 60       	ori	r24, 0x07	; 7
 544:	80 bd       	out	0x20, r24	; 32
	SETUP_WATCHDOG;
 546:	88 e1       	ldi	r24, 0x18	; 24
 548:	81 bd       	out	0x21, r24	; 33
 54a:	8e e0       	ldi	r24, 0x0E	; 14
 54c:	81 bd       	out	0x21, r24	; 33
	sei();
 54e:	78 94       	sei
	FlashLED(1, 1, 1);
 550:	41 e0       	ldi	r20, 0x01	; 1
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	c4 dd       	rcall	.-1144   	; 0xe0 <FlashLED>
	NRF24_init(EEPROM_read(EPROM_RF_Channel)); // After init transmit must be delayed
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	7c dd       	rcall	.-1288   	; 0x54 <EEPROM_read>
 55c:	bf de       	rcall	.-642    	; 0x2dc <NRF24_init>
 	while(!NRF24_SetAddresses(EEPROM_read(EPROM_RFAddress))) {
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	79 dd       	rcall	.-1294   	; 0x54 <EEPROM_read>
 562:	9b de       	rcall	.-714    	; 0x29a <NRF24_SetAddresses>
 564:	81 11       	cpse	r24, r1
 566:	05 c0       	rjmp	.+10     	; 0x572 <main+0xde>
 		FlashLED(1, 50, 20);
 568:	44 e1       	ldi	r20, 0x14	; 20
 56a:	62 e3       	ldi	r22, 0x32	; 50
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	b8 dd       	rcall	.-1168   	; 0xe0 <FlashLED>
 570:	f6 cf       	rjmp	.-20     	; 0x55e <main+0xca>
 	}
	NRF24_SetMode(NRF24_TransmitMode);
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	31 de       	rcall	.-926    	; 0x1d8 <NRF24_SetMode>
					LED1_ON;
					Delay100ms(10);
					while(keys) {
						wdt_reset(); // wait keys release
						if((keys & KEY_MINUS) && (keys & KEY_PLUS)) {
							setup_mode = 1;
 576:	c1 e0       	ldi	r28, 0x01	; 1
							FlashLED(5, 2, 2);
							Delay100ms(30);
							RequestCountdown = 30;
 578:	de e1       	ldi	r29, 0x1E	; 30
x_save_speed:
				if(EEPROM_read(addr) != SpeedSet) {
					EEPROM_write(addr, SpeedSet);
					if(EEPROM_read(addr) != SpeedSet) { // EEPROM cell broken
						FlashLED(10, 2, 2);
						send_data = 0xEE;
 57a:	1e ee       	ldi	r17, 0xEE	; 238
 	}
	NRF24_SetMode(NRF24_TransmitMode);
	while(1)
	{
		__asm__ volatile ("" ::: "memory"); // Need memory barrier
		sleep_cpu();
 57c:	88 95       	sleep
		wdt_reset();
 57e:	a8 95       	wdr
		if(keys) {
 580:	80 91 70 00 	lds	r24, 0x0070
 584:	88 23       	and	r24, r24
 586:	09 f4       	brne	.+2      	; 0x58a <main+0xf6>
 588:	ea c0       	rjmp	.+468    	; 0x75e <main+0x2ca>
			if(keys & KEY_PWR) {
 58a:	80 91 70 00 	lds	r24, 0x0070
 58e:	80 ff       	sbrs	r24, 0
 590:	1b c0       	rjmp	.+54     	; 0x5c8 <main+0x134>
				if(FanSpeedOff) {
 592:	80 91 6a 00 	lds	r24, 0x006A
 596:	88 23       	and	r24, r24
 598:	49 f0       	breq	.+18     	; 0x5ac <main+0x118>
					FanSpeedOff = 0;
 59a:	10 92 6a 00 	sts	0x006A, r1
					if(setup_mode) setup_mode = 0;
 59e:	80 91 64 00 	lds	r24, 0x0064
 5a2:	88 23       	and	r24, r24
 5a4:	79 f0       	breq	.+30     	; 0x5c4 <main+0x130>
 5a6:	10 92 64 00 	sts	0x0064, r1
 5aa:	0c c0       	rjmp	.+24     	; 0x5c4 <main+0x130>
				} else {
					FanSpeedOff = 2;
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	80 93 6a 00 	sts	0x006A, r24
					PressKeyOnTime = 0;
 5b2:	10 92 6d 00 	sts	0x006D, r1
					PressKeyOffTime = 0;
 5b6:	10 92 6e 00 	sts	0x006E, r1
					KEYS_DDR &= ~(KEY_MINUS | KEY_PLUS);
 5ba:	87 b3       	in	r24, 0x17	; 23
 5bc:	89 7f       	andi	r24, 0xF9	; 249
 5be:	87 bb       	out	0x17, r24	; 23
					RequestCountdown = 0;
 5c0:	10 92 67 00 	sts	0x0067, r1
				}
				SendOffStatus = 1;
 5c4:	c0 93 66 00 	sts	0x0066, r28
			}
			if(FanSpeedOff == 0) {
 5c8:	80 91 6a 00 	lds	r24, 0x006A
 5cc:	81 11       	cpse	r24, r1
 5ce:	52 c0       	rjmp	.+164    	; 0x674 <main+0x1e0>
				if(keys & KEY_MINUS) {
 5d0:	80 91 70 00 	lds	r24, 0x0070
 5d4:	81 ff       	sbrs	r24, 1
 5d6:	19 c0       	rjmp	.+50     	; 0x60a <main+0x176>
					if(FanSpeedOverride > -8) {
 5d8:	80 91 6b 00 	lds	r24, 0x006B
 5dc:	89 3f       	cpi	r24, 0xF9	; 249
 5de:	ac f0       	brlt	.+42     	; 0x60a <main+0x176>
						FanSpeedOverride--;
 5e0:	81 50       	subi	r24, 0x01	; 1
 5e2:	80 93 6b 00 	sts	0x006B, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5e6:	f8 94       	cli
 5e8:	80 91 73 00 	lds	r24, 0x0073
 5ec:	90 91 72 00 	lds	r25, 0x0072
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							if(FanSpeed > 1) FanSpeed--;
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	0c f0       	brlt	.+2      	; 0x5f6 <main+0x162>
 5f4:	81 50       	subi	r24, 0x01	; 1
 5f6:	80 93 73 00 	sts	0x0073, r24
							if(SpeedSet > 1) SpeedSet--;
 5fa:	92 30       	cpi	r25, 0x02	; 2
 5fc:	24 f4       	brge	.+8      	; 0x606 <main+0x172>
 5fe:	90 93 72 00 	sts	0x0072, r25
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 602:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 604:	02 c0       	rjmp	.+4      	; 0x60a <main+0x176>
 606:	91 50       	subi	r25, 0x01	; 1
 608:	fa cf       	rjmp	.-12     	; 0x5fe <main+0x16a>
						}
					}
				}
				if(keys & KEY_PLUS) {
 60a:	80 91 70 00 	lds	r24, 0x0070
 60e:	82 ff       	sbrs	r24, 2
 610:	8e c0       	rjmp	.+284    	; 0x72e <main+0x29a>
					if(FanSpeedOverride < 7) {
 612:	80 91 6b 00 	lds	r24, 0x006B
 616:	87 30       	cpi	r24, 0x07	; 7
 618:	0c f0       	brlt	.+2      	; 0x61c <main+0x188>
 61a:	89 c0       	rjmp	.+274    	; 0x72e <main+0x29a>
						FanSpeedOverride++;
 61c:	8f 5f       	subi	r24, 0xFF	; 255
 61e:	80 93 6b 00 	sts	0x006B, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 622:	f8 94       	cli
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							if(FanSpeed < FanSpeedMax) FanSpeed++;
 624:	80 91 71 00 	lds	r24, 0x0071
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	40 91 73 00 	lds	r20, 0x0073
 62e:	50 91 72 00 	lds	r21, 0x0072
					}
				}
				if(keys & KEY_PLUS) {
					if(FanSpeedOverride < 7) {
						FanSpeedOverride++;
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	65 2f       	mov	r22, r21
 636:	22 23       	and	r18, r18
 638:	c1 f0       	breq	.+48     	; 0x66a <main+0x1d6>
							if(FanSpeed < FanSpeedMax) FanSpeed++;
 63a:	24 2f       	mov	r18, r20
 63c:	33 27       	eor	r19, r19
 63e:	27 fd       	sbrc	r18, 7
 640:	30 95       	com	r19
 642:	28 17       	cp	r18, r24
 644:	39 07       	cpc	r19, r25
 646:	0c f4       	brge	.+2      	; 0x64a <main+0x1b6>
 648:	4f 5f       	subi	r20, 0xFF	; 255
 64a:	5f 5f       	subi	r21, 0xFF	; 255
							if(SpeedSet < FanSpeedMax) SpeedSet++;
 64c:	26 2f       	mov	r18, r22
 64e:	33 27       	eor	r19, r19
 650:	27 fd       	sbrc	r18, 7
 652:	30 95       	com	r19
 654:	28 17       	cp	r18, r24
 656:	39 07       	cpc	r19, r25
 658:	34 f0       	brlt	.+12     	; 0x666 <main+0x1d2>
 65a:	40 93 73 00 	sts	0x0073, r20
 65e:	60 93 72 00 	sts	0x0072, r22
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 662:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 664:	64 c0       	rjmp	.+200    	; 0x72e <main+0x29a>
					}
				}
				if(keys & KEY_PLUS) {
					if(FanSpeedOverride < 7) {
						FanSpeedOverride++;
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
 666:	20 e0       	ldi	r18, 0x00	; 0
 668:	e5 cf       	rjmp	.-54     	; 0x634 <main+0x1a0>
 66a:	40 93 73 00 	sts	0x0073, r20
 66e:	50 93 72 00 	sts	0x0072, r21
 672:	f7 cf       	rjmp	.-18     	; 0x662 <main+0x1ce>
							if(FanSpeed < FanSpeedMax) FanSpeed++;
							if(SpeedSet < FanSpeedMax) SpeedSet++;
						}
					}
				}
			} else if(setup_mode) {
 674:	90 91 64 00 	lds	r25, 0x0064
 678:	99 23       	and	r25, r25
 67a:	79 f1       	breq	.+94     	; 0x6da <main+0x246>
				if(keys & KEY_MINUS) {
 67c:	80 91 70 00 	lds	r24, 0x0070
 680:	81 ff       	sbrs	r24, 1
 682:	05 c0       	rjmp	.+10     	; 0x68e <main+0x1fa>
					SpeedSet--;
 684:	80 91 72 00 	lds	r24, 0x0072
 688:	81 50       	subi	r24, 0x01	; 1
 68a:	80 93 72 00 	sts	0x0072, r24
				}
				if(keys & KEY_PLUS) {
 68e:	80 91 70 00 	lds	r24, 0x0070
 692:	82 ff       	sbrs	r24, 2
 694:	05 c0       	rjmp	.+10     	; 0x6a0 <main+0x20c>
					SpeedSet++;
 696:	80 91 72 00 	lds	r24, 0x0072
 69a:	8f 5f       	subi	r24, 0xFF	; 255
 69c:	80 93 72 00 	sts	0x0072, r24
				}
				if(SpeedSet < 1) SpeedSet = 1;
 6a0:	20 91 72 00 	lds	r18, 0x0072
 6a4:	12 16       	cp	r1, r18
 6a6:	1c f0       	brlt	.+6      	; 0x6ae <main+0x21a>
 6a8:	c0 93 72 00 	sts	0x0072, r28
 6ac:	0c c0       	rjmp	.+24     	; 0x6c6 <main+0x232>
				else if(SpeedSet > FanSpeedMax) SpeedSet = FanSpeedMax;
 6ae:	40 91 71 00 	lds	r20, 0x0071
 6b2:	33 27       	eor	r19, r19
 6b4:	27 fd       	sbrc	r18, 7
 6b6:	30 95       	com	r19
 6b8:	84 2f       	mov	r24, r20
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	82 17       	cp	r24, r18
 6be:	93 07       	cpc	r25, r19
 6c0:	14 f4       	brge	.+4      	; 0x6c6 <main+0x232>
 6c2:	40 93 72 00 	sts	0x0072, r20
				FlashLED(SpeedSet, 5, 5);
 6c6:	45 e0       	ldi	r20, 0x05	; 5
 6c8:	65 e0       	ldi	r22, 0x05	; 5
 6ca:	80 91 72 00 	lds	r24, 0x0072
 6ce:	08 dd       	rcall	.-1520   	; 0xe0 <FlashLED>
				RequestCountdown = 30;
 6d0:	d0 93 67 00 	sts	0x0067, r29
				SpeedSetChanged = 1;
 6d4:	c0 93 6c 00 	sts	0x006C, r28
 6d8:	2a c0       	rjmp	.+84     	; 0x72e <main+0x29a>
			} else if(FanSpeedOff == 2 && (keys & (KEY_MINUS | KEY_PLUS))) {
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	41 f5       	brne	.+80     	; 0x72e <main+0x29a>
 6de:	80 91 70 00 	lds	r24, 0x0070
 6e2:	86 70       	andi	r24, 0x06	; 6
 6e4:	21 f1       	breq	.+72     	; 0x72e <main+0x29a>
				if(PressKeyOnTime == 0 && PressKeyOffTime == 0) { // not in changing process
 6e6:	80 91 6d 00 	lds	r24, 0x006D
 6ea:	81 11       	cpse	r24, r1
 6ec:	20 c0       	rjmp	.+64     	; 0x72e <main+0x29a>
 6ee:	80 91 6e 00 	lds	r24, 0x006E
 6f2:	81 11       	cpse	r24, r1
 6f4:	1c c0       	rjmp	.+56     	; 0x72e <main+0x29a>
					LED1_ON;
 6f6:	d9 9a       	sbi	0x1b, 1	; 27
					Delay100ms(10);
 6f8:	8a e0       	ldi	r24, 0x0A	; 10
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	e5 dc       	rcall	.-1590   	; 0xc8 <Delay100ms>
					while(keys) {
 6fe:	80 91 70 00 	lds	r24, 0x0070
 702:	88 23       	and	r24, r24
 704:	a1 f0       	breq	.+40     	; 0x72e <main+0x29a>
						wdt_reset(); // wait keys release
 706:	a8 95       	wdr
						if((keys & KEY_MINUS) && (keys & KEY_PLUS)) {
 708:	80 91 70 00 	lds	r24, 0x0070
 70c:	81 ff       	sbrs	r24, 1
 70e:	f7 cf       	rjmp	.-18     	; 0x6fe <main+0x26a>
 710:	80 91 70 00 	lds	r24, 0x0070
 714:	82 ff       	sbrs	r24, 2
 716:	f3 cf       	rjmp	.-26     	; 0x6fe <main+0x26a>
							setup_mode = 1;
 718:	c0 93 64 00 	sts	0x0064, r28
							FlashLED(5, 2, 2);
 71c:	42 e0       	ldi	r20, 0x02	; 2
 71e:	62 e0       	ldi	r22, 0x02	; 2
 720:	85 e0       	ldi	r24, 0x05	; 5
 722:	de dc       	rcall	.-1604   	; 0xe0 <FlashLED>
							Delay100ms(30);
 724:	8e e1       	ldi	r24, 0x1E	; 30
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	cf dc       	rcall	.-1634   	; 0xc8 <Delay100ms>
							RequestCountdown = 30;
 72a:	d0 93 67 00 	sts	0x0067, r29
							break;
						}
					}
				}
			}
			LED1_ON;
 72e:	d9 9a       	sbi	0x1b, 1	; 27
 730:	8b e4       	ldi	r24, 0x4B	; 75
 732:	9d e1       	ldi	r25, 0x1D	; 29
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	f1 f7       	brne	.-4      	; 0x734 <main+0x2a0>
 738:	00 c0       	rjmp	.+0      	; 0x73a <main+0x2a6>
 73a:	00 00       	nop
			_delay_ms(30);
			while((~KEYS_PIN) & (KEY_PWR | KEY_MINUS | KEY_PLUS)) wdt_reset(); // wait keys release
 73c:	86 b3       	in	r24, 0x16	; 22
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	80 95       	com	r24
 742:	90 95       	com	r25
 744:	87 70       	andi	r24, 0x07	; 7
 746:	99 27       	eor	r25, r25
 748:	89 2b       	or	r24, r25
 74a:	11 f0       	breq	.+4      	; 0x750 <main+0x2bc>
 74c:	a8 95       	wdr
 74e:	f6 cf       	rjmp	.-20     	; 0x73c <main+0x2a8>
 750:	8b e4       	ldi	r24, 0x4B	; 75
 752:	9d e1       	ldi	r25, 0x1D	; 29
 754:	01 97       	sbiw	r24, 0x01	; 1
 756:	f1 f7       	brne	.-4      	; 0x754 <main+0x2c0>
 758:	00 c0       	rjmp	.+0      	; 0x75a <main+0x2c6>
 75a:	00 00       	nop
			_delay_ms(30);
			LED1_OFF;
 75c:	d9 98       	cbi	0x1b, 1	; 27
		}
		__asm__ volatile ("" ::: "memory"); // Need memory barrier
		if(SpeedSetChanged) {
 75e:	80 91 6c 00 	lds	r24, 0x006C
 762:	88 23       	and	r24, r24
 764:	91 f1       	breq	.+100    	; 0x7ca <main+0x336>
			uint8_t addr = EEPROM_read(EPROM_CurrentSpeedAddr);
 766:	8f e1       	ldi	r24, 0x1F	; 31
 768:	75 dc       	rcall	.-1814   	; 0x54 <EEPROM_read>
 76a:	08 2f       	mov	r16, r24
			if(addr) {
 76c:	88 23       	and	r24, r24
 76e:	59 f1       	breq	.+86     	; 0x7c6 <main+0x332>
x_save_speed:
				if(EEPROM_read(addr) != SpeedSet) {
 770:	80 2f       	mov	r24, r16
 772:	70 dc       	rcall	.-1824   	; 0x54 <EEPROM_read>
 774:	60 91 72 00 	lds	r22, 0x0072
 778:	48 2f       	mov	r20, r24
 77a:	50 e0       	ldi	r21, 0x00	; 0
 77c:	26 2f       	mov	r18, r22
 77e:	33 27       	eor	r19, r19
 780:	27 fd       	sbrc	r18, 7
 782:	30 95       	com	r19
 784:	42 17       	cp	r20, r18
 786:	53 07       	cpc	r21, r19
 788:	f1 f0       	breq	.+60     	; 0x7c6 <main+0x332>
					EEPROM_write(addr, SpeedSet);
 78a:	80 2f       	mov	r24, r16
 78c:	6b dc       	rcall	.-1834   	; 0x64 <EEPROM_write>
					if(EEPROM_read(addr) != SpeedSet) { // EEPROM cell broken
 78e:	80 2f       	mov	r24, r16
 790:	61 dc       	rcall	.-1854   	; 0x54 <EEPROM_read>
 792:	48 2f       	mov	r20, r24
 794:	50 e0       	ldi	r21, 0x00	; 0
 796:	20 91 72 00 	lds	r18, 0x0072
 79a:	33 27       	eor	r19, r19
 79c:	27 fd       	sbrc	r18, 7
 79e:	30 95       	com	r19
 7a0:	42 17       	cp	r20, r18
 7a2:	53 07       	cpc	r21, r19
 7a4:	81 f0       	breq	.+32     	; 0x7c6 <main+0x332>
						FlashLED(10, 2, 2);
 7a6:	42 e0       	ldi	r20, 0x02	; 2
 7a8:	62 e0       	ldi	r22, 0x02	; 2
 7aa:	8a e0       	ldi	r24, 0x0A	; 10
 7ac:	99 dc       	rcall	.-1742   	; 0xe0 <FlashLED>
						send_data = 0xEE;
 7ae:	10 93 63 00 	sts	0x0063, r17
						EEPROM_write(EPROM_CurrentSpeedAddr, ++addr);
 7b2:	0f 5f       	subi	r16, 0xFF	; 255
 7b4:	60 2f       	mov	r22, r16
 7b6:	8f e1       	ldi	r24, 0x1F	; 31
 7b8:	55 dc       	rcall	.-1878   	; 0x64 <EEPROM_write>
						if(addr == 0) { // memory ends
 7ba:	01 11       	cpse	r16, r1
 7bc:	d9 cf       	rjmp	.-78     	; 0x770 <main+0x2dc>
							FlashLED(10, 2, 2);
 7be:	42 e0       	ldi	r20, 0x02	; 2
 7c0:	62 e0       	ldi	r22, 0x02	; 2
 7c2:	8a e0       	ldi	r24, 0x0A	; 10
 7c4:	8d dc       	rcall	.-1766   	; 0xe0 <FlashLED>
							goto x_save_speed;
						}
					}
				}
			}
			SpeedSetChanged = 0;
 7c6:	10 92 6c 00 	sts	0x006C, r1
		}
		if(RequestCountdown == 0) {
 7ca:	80 91 67 00 	lds	r24, 0x0067
 7ce:	81 11       	cpse	r24, r1
 7d0:	d5 ce       	rjmp	.-598    	; 0x57c <main+0xe8>
			if(setup_mode == 0) {
 7d2:	80 91 64 00 	lds	r24, 0x0064
 7d6:	81 11       	cpse	r24, r1
 7d8:	6d c0       	rjmp	.+218    	; 0x8b4 <main+0x420>
				//if(1) {
				if(FanSpeedOff < 2 || SendOffStatus == 1) {
 7da:	20 91 6a 00 	lds	r18, 0x006A
 7de:	22 30       	cpi	r18, 0x02	; 2
 7e0:	28 f0       	brcs	.+10     	; 0x7ec <main+0x358>
 7e2:	80 91 66 00 	lds	r24, 0x0066
 7e6:	81 30       	cpi	r24, 0x01	; 1
 7e8:	09 f0       	breq	.+2      	; 0x7ec <main+0x358>
 7ea:	61 c0       	rjmp	.+194    	; 0x8ae <main+0x41a>
					if(send_data != 0xEE) send_data = (nrf_last_status << 5) | ((FanSpeedOff == 2) << 4) | (FanSpeedOverride & 0x0F); // 11123333
 7ec:	80 91 63 00 	lds	r24, 0x0063
 7f0:	8e 3e       	cpi	r24, 0xEE	; 238
 7f2:	a1 f0       	breq	.+40     	; 0x81c <main+0x388>
 7f4:	80 91 65 00 	lds	r24, 0x0065
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	35 e0       	ldi	r19, 0x05	; 5
 7fc:	88 0f       	add	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	3a 95       	dec	r19
 802:	e1 f7       	brne	.-8      	; 0x7fc <main+0x368>
 804:	22 30       	cpi	r18, 0x02	; 2
 806:	11 f4       	brne	.+4      	; 0x80c <main+0x378>
 808:	20 e1       	ldi	r18, 0x10	; 16
 80a:	01 c0       	rjmp	.+2      	; 0x80e <main+0x37a>
 80c:	20 e0       	ldi	r18, 0x00	; 0
 80e:	90 91 6b 00 	lds	r25, 0x006B
 812:	9f 70       	andi	r25, 0x0F	; 15
 814:	98 2b       	or	r25, r24
 816:	92 2b       	or	r25, r18
 818:	90 93 63 00 	sts	0x0063, r25
					NRF24_Buffer[0] = send_data;
 81c:	80 91 63 00 	lds	r24, 0x0063
 820:	80 93 74 00 	sts	0x0074, r24
					nrf_last_status = NRF24_TransmitShockBurst(1, sizeof(master_data)); // Enhanced ShockBurst, ACK with payload
 824:	64 e0       	ldi	r22, 0x04	; 4
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	e5 dc       	rcall	.-1590   	; 0x1f4 <NRF24_TransmitShockBurst>
 82a:	80 93 65 00 	sts	0x0065, r24
					if(nrf_last_status) { // some problem
 82e:	88 23       	and	r24, r24
 830:	29 f0       	breq	.+10     	; 0x83c <main+0x3a8>
						LED_Warning = nrf_last_status;
 832:	80 93 62 00 	sts	0x0062, r24
x_continue:				RequestCountdown = EEPROM_read(EPROM_PauseWhenError); // sec
 836:	84 e0       	ldi	r24, 0x04	; 4
 838:	0d dc       	rcall	.-2022   	; 0x54 <EEPROM_read>
 83a:	2d c0       	rjmp	.+90     	; 0x896 <main+0x402>
					} else {
						if(((master_data*)NRF24_Buffer)->CO2level == 0xFDEF) { // EEPROM write
 83c:	80 91 74 00 	lds	r24, 0x0074
 840:	90 91 75 00 	lds	r25, 0x0075
 844:	8f 3e       	cpi	r24, 0xEF	; 239
 846:	9d 4f       	sbci	r25, 0xFD	; 253
 848:	51 f4       	brne	.+20     	; 0x85e <main+0x3ca>
							EEPROM_write(((master_data*)NRF24_Buffer)->FanSpeed, ((master_data*)NRF24_Buffer)->Pause);
 84a:	60 91 77 00 	lds	r22, 0x0077
 84e:	80 91 76 00 	lds	r24, 0x0076
 852:	08 dc       	rcall	.-2032   	; 0x64 <EEPROM_write>
							FlashLED(7, 2, 2);
 854:	42 e0       	ldi	r20, 0x02	; 2
 856:	62 e0       	ldi	r22, 0x02	; 2
 858:	87 e0       	ldi	r24, 0x07	; 7
 85a:	42 dc       	rcall	.-1916   	; 0xe0 <FlashLED>
							goto x_continue;
 85c:	ec cf       	rjmp	.-40     	; 0x836 <main+0x3a2>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 85e:	f8 94       	cli
						}
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							FanSpeed = ((master_data*)NRF24_Buffer)->FanSpeed + FanSpeedOverride;
 860:	20 91 6b 00 	lds	r18, 0x006B
 864:	80 91 76 00 	lds	r24, 0x0076
 868:	28 0f       	add	r18, r24
 86a:	20 93 73 00 	sts	0x0073, r18
							if(FanSpeed < 0) FanSpeed = 0; // off
 86e:	27 ff       	sbrs	r18, 7
 870:	03 c0       	rjmp	.+6      	; 0x878 <main+0x3e4>
 872:	10 92 73 00 	sts	0x0073, r1
 876:	0c c0       	rjmp	.+24     	; 0x890 <main+0x3fc>
							else if(FanSpeed > FanSpeedMax) FanSpeed = FanSpeedMax;
 878:	40 91 71 00 	lds	r20, 0x0071
 87c:	33 27       	eor	r19, r19
 87e:	27 fd       	sbrc	r18, 7
 880:	30 95       	com	r19
 882:	84 2f       	mov	r24, r20
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	82 17       	cp	r24, r18
 888:	93 07       	cpc	r25, r19
 88a:	14 f4       	brge	.+4      	; 0x890 <main+0x3fc>
 88c:	40 93 73 00 	sts	0x0073, r20
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 890:	78 94       	sei
						}
						RequestCountdown = ((master_data*)NRF24_Buffer)->Pause;
 892:	80 91 77 00 	lds	r24, 0x0077
 896:	80 93 67 00 	sts	0x0067, r24
//						FlashLED(FanSpeed, 5, 10);
					}
					if(nrf_last_status <= 1) { // Status was send successfully
 89a:	80 91 65 00 	lds	r24, 0x0065
 89e:	82 30       	cpi	r24, 0x02	; 2
 8a0:	08 f0       	brcs	.+2      	; 0x8a4 <main+0x410>
 8a2:	6c ce       	rjmp	.-808    	; 0x57c <main+0xe8>
						SendOffStatus = 0;
 8a4:	10 92 66 00 	sts	0x0066, r1
						send_data = 0;
 8a8:	10 92 63 00 	sts	0x0063, r1
 8ac:	67 ce       	rjmp	.-818    	; 0x57c <main+0xe8>
					}
				} else {
					RequestCountdown = 1; // sec
 8ae:	c0 93 67 00 	sts	0x0067, r28
 8b2:	64 ce       	rjmp	.-824    	; 0x57c <main+0xe8>
				}
			} else { // setup mode timeout
				setup_mode = 0;
 8b4:	10 92 64 00 	sts	0x0064, r1
 8b8:	61 ce       	rjmp	.-830    	; 0x57c <main+0xe8>

000008ba <memcpy_P>:
 8ba:	fb 01       	movw	r30, r22
 8bc:	dc 01       	movw	r26, r24
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <memcpy_P+0xa>
 8c0:	05 90       	lpm	r0, Z+
 8c2:	0d 92       	st	X+, r0
 8c4:	41 50       	subi	r20, 0x01	; 1
 8c6:	50 40       	sbci	r21, 0x00	; 0
 8c8:	d8 f7       	brcc	.-10     	; 0x8c0 <memcpy_P+0x6>
 8ca:	08 95       	ret

000008cc <_exit>:
 8cc:	f8 94       	cli

000008ce <__stop_program>:
 8ce:	ff cf       	rjmp	.-2      	; 0x8ce <__stop_program>
