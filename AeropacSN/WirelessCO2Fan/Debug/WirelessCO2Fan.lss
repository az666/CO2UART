
WirelessCO2Fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000688  0000071c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800062  00800062  0000071e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000071e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001067  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ef  00000000  00000000  00001885  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005df  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  00002154  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d2  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cf3  00000000  00000000  000028a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	18 c0       	rjmp	.+48     	; 0x32 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__bad_interrupt>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__bad_interrupt>
   6:	45 c0       	rjmp	.+138    	; 0x92 <__vector_3>
   8:	2f c0       	rjmp	.+94     	; 0x68 <__bad_interrupt>
   a:	2e c0       	rjmp	.+92     	; 0x68 <__bad_interrupt>
   c:	2d c0       	rjmp	.+90     	; 0x68 <__bad_interrupt>
   e:	2c c0       	rjmp	.+88     	; 0x68 <__bad_interrupt>
  10:	2b c0       	rjmp	.+86     	; 0x68 <__bad_interrupt>
  12:	2a c0       	rjmp	.+84     	; 0x68 <__bad_interrupt>
  14:	29 c0       	rjmp	.+82     	; 0x68 <__bad_interrupt>
  16:	78 c1       	rjmp	.+752    	; 0x308 <__vector_11>
  18:	27 c0       	rjmp	.+78     	; 0x68 <__bad_interrupt>
  1a:	26 c0       	rjmp	.+76     	; 0x68 <__bad_interrupt>
  1c:	25 c0       	rjmp	.+74     	; 0x68 <__bad_interrupt>
  1e:	24 c0       	rjmp	.+72     	; 0x68 <__bad_interrupt>
  20:	23 c0       	rjmp	.+70     	; 0x68 <__bad_interrupt>

00000022 <NRF24_BASE_ADDR>:
  22:	c8 c8                                               ..

00000024 <NRF24_INIT_DATA>:
  24:	26 07 23 01 24 33 3d 06 21 01 22 01 3c 01           &.#.$3=.!.".<.

00000032 <__ctors_end>:
  32:	11 24       	eor	r1, r1
  34:	1f be       	out	0x3f, r1	; 63
  36:	cf e5       	ldi	r28, 0x5F	; 95
  38:	d1 e0       	ldi	r29, 0x01	; 1
  3a:	de bf       	out	0x3e, r29	; 62
  3c:	cd bf       	out	0x3d, r28	; 61

0000003e <__do_copy_data>:
  3e:	10 e0       	ldi	r17, 0x00	; 0
  40:	a0 e6       	ldi	r26, 0x60	; 96
  42:	b0 e0       	ldi	r27, 0x00	; 0
  44:	e8 e8       	ldi	r30, 0x88	; 136
  46:	f6 e0       	ldi	r31, 0x06	; 6
  48:	02 c0       	rjmp	.+4      	; 0x4e <__SREG__+0xf>
  4a:	05 90       	lpm	r0, Z+
  4c:	0d 92       	st	X+, r0
  4e:	a2 36       	cpi	r26, 0x62	; 98
  50:	b1 07       	cpc	r27, r17
  52:	d9 f7       	brne	.-10     	; 0x4a <__SREG__+0xb>

00000054 <__do_clear_bss>:
  54:	20 e0       	ldi	r18, 0x00	; 0
  56:	a2 e6       	ldi	r26, 0x62	; 98
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	01 c0       	rjmp	.+2      	; 0x5e <.do_clear_bss_start>

0000005c <.do_clear_bss_loop>:
  5c:	1d 92       	st	X+, r1

0000005e <.do_clear_bss_start>:
  5e:	a6 37       	cpi	r26, 0x76	; 118
  60:	b2 07       	cpc	r27, r18
  62:	e1 f7       	brne	.-8      	; 0x5c <.do_clear_bss_loop>
  64:	c4 d1       	rcall	.+904    	; 0x3ee <main>
  66:	0e c3       	rjmp	.+1564   	; 0x684 <_exit>

00000068 <__bad_interrupt>:
  68:	cb cf       	rjmp	.-106    	; 0x0 <__vectors>

0000006a <EEPROM_read>:
	Delay100ms(20);
}

static uint8_t EEPROM_read(uint8_t ucAddress) // ATtiny24A/44A only!
{
	while(EECR & (1<<EEPE)) ; // EEWE
  6a:	e1 99       	sbic	0x1c, 1	; 28
  6c:	fe cf       	rjmp	.-4      	; 0x6a <EEPROM_read>
	EEAR = ucAddress;
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	9f bb       	out	0x1f, r25	; 31
  72:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
  74:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
  76:	8d b3       	in	r24, 0x1d	; 29
}
  78:	08 95       	ret

0000007a <EEPROM_write>:
static void EEPROM_write(uint8_t ucAddress, uint8_t ucData) // ATtiny24A/44A only!
{
	while(EECR & (1<<EEPE)) ; // EEWE
  7a:	e1 99       	sbic	0x1c, 1	; 28
  7c:	fe cf       	rjmp	.-4      	; 0x7a <EEPROM_write>
	cli();
  7e:	f8 94       	cli
	EECR = (0<<EEPM1)|(0<<EEPM0);
  80:	1c ba       	out	0x1c, r1	; 28
	EEAR = ucAddress;
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	9f bb       	out	0x1f, r25	; 31
  86:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  88:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMPE); //(1<<EEMWE);
  8a:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEPE); //(1<<EEWE);
  8c:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
  8e:	78 94       	sei
  90:	08 95       	ret

00000092 <__vector_3>:
#define KEYS_INTR_INIT				GIMSK |= (1<<PCIE1); PCMSK1 |= (1<<PCINT10) | (1<<PCINT9) | (1<<PCINT8)  // PCINT8..10
uint8_t keys						= 0;
uint8_t PressKey					= 0;
uint8_t PressKeyOffTime				= 0; // *0.1 sec
uint8_t PressKeyOnTime				= 0; // *0.1 sec
ISR(PCINT1_vect) {
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	if(PressKeyOnTime == 0 || PressKeyOffTime != 0) { // not in changing process
  9e:	80 91 6b 00 	lds	r24, 0x006B
  a2:	88 23       	and	r24, r24
  a4:	21 f0       	breq	.+8      	; 0xae <__vector_3+0x1c>
  a6:	80 91 6c 00 	lds	r24, 0x006C
  aa:	88 23       	and	r24, r24
  ac:	29 f0       	breq	.+10     	; 0xb8 <__vector_3+0x26>
		keys = ~KEYS_PIN & (KEY_PWR | KEY_MINUS | KEY_PLUS);
  ae:	86 b3       	in	r24, 0x16	; 22
  b0:	80 95       	com	r24
  b2:	87 70       	andi	r24, 0x07	; 7
  b4:	80 93 6e 00 	sts	0x006E, r24
	}
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <Delay10us>:

#define FLAG_LowLight				0x01

#if(1)
void Delay10us(uint8_t ms) {
	while(ms-- > 0) _delay_us(10); wdt_reset();
  c4:	88 23       	and	r24, r24
  c6:	31 f0       	breq	.+12     	; 0xd4 <Delay10us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	93 e0       	ldi	r25, 0x03	; 3
  ca:	9a 95       	dec	r25
  cc:	f1 f7       	brne	.-4      	; 0xca <Delay10us+0x6>
  ce:	00 00       	nop
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	f8 cf       	rjmp	.-16     	; 0xc4 <Delay10us>
  d4:	a8 95       	wdr
  d6:	08 95       	ret

000000d8 <Delay100ms>:
	while(ms-- > 0) {
		_delay_ms(1); wdt_reset();
	}
}
void Delay100ms(unsigned int ms) {
	while(ms-- > 0) {
  d8:	00 97       	sbiw	r24, 0x00	; 0
  da:	49 f0       	breq	.+18     	; 0xee <Delay100ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	e7 ea       	ldi	r30, 0xA7	; 167
  de:	f1 e6       	ldi	r31, 0x61	; 97
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <Delay100ms+0x8>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <Delay100ms+0xe>
  e6:	00 00       	nop
		_delay_ms(100); wdt_reset();
  e8:	a8 95       	wdr
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f5 cf       	rjmp	.-22     	; 0xd8 <Delay100ms>
	}
}
  ee:	08 95       	ret

000000f0 <FlashLED>:

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
	while (num-- > 0) {
  fa:	f8 2e       	mov	r15, r24
		LED1_OFF;
		Delay100ms(toff);
  fc:	06 2f       	mov	r16, r22
  fe:	10 e0       	ldi	r17, 0x00	; 0
		LED1_ON;
		Delay100ms(ton);
 100:	c4 2f       	mov	r28, r20
 102:	d0 e0       	ldi	r29, 0x00	; 0
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
		LED1_OFF;
 104:	d9 98       	cbi	0x1b, 1	; 27
		_delay_ms(100); wdt_reset();
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
 106:	ff 20       	and	r15, r15
 108:	39 f0       	breq	.+14     	; 0x118 <FlashLED+0x28>
		LED1_OFF;
		Delay100ms(toff);
 10a:	c8 01       	movw	r24, r16
 10c:	e5 df       	rcall	.-54     	; 0xd8 <Delay100ms>
		LED1_ON;
 10e:	d9 9a       	sbi	0x1b, 1	; 27
		Delay100ms(ton);
 110:	ce 01       	movw	r24, r28
 112:	e2 df       	rcall	.-60     	; 0xd8 <Delay100ms>
 114:	fa 94       	dec	r15
 116:	f6 cf       	rjmp	.-20     	; 0x104 <FlashLED+0x14>
	}
	LED1_OFF;
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	ff 90       	pop	r15
 122:	08 95       	ret

00000124 <SPI_WriteReadByte>:
	NRF24_CMD_W_REGISTER | NRF24_REG_DYNPD,		0b000001 // Dynamic payload
};
const uint8_t NRF24_BASE_ADDR[] PROGMEM = { 0xC8, 0xC8 }; // Address MSBs: 2..3

uint8_t SPI_WriteReadByte(uint8_t data) {
	USIDR = data;
 124:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); // clear overflow flag
 126:	80 e4       	ldi	r24, 0x40	; 64
 128:	8e b9       	out	0x0e, r24	; 14
	do {
		USICR = (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);
 12a:	8b e1       	ldi	r24, 0x1B	; 27
 12c:	8d b9       	out	0x0d, r24	; 13
	} while((USISR & (1<<USIOIF)) == 0);
 12e:	76 9b       	sbis	0x0e, 6	; 14
 130:	fd cf       	rjmp	.-6      	; 0x12c <SPI_WriteReadByte+0x8>
	return USIDR;
 132:	8f b1       	in	r24, 0x0f	; 15
}
 134:	08 95       	ret

00000136 <NRF24_ReadArray>:
	NRF24_SET_CSN_HI;
	return result;
}

void NRF24_ReadArray(uint8_t cmd, uint8_t *array, uint8_t len)
{
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	00 d0       	rcall	.+0      	; 0x142 <NRF24_ReadArray+0xc>
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 148:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 14a:	69 83       	std	Y+1, r22	; 0x01
 14c:	7a 83       	std	Y+2, r23	; 0x02
 14e:	ea df       	rcall	.-44     	; 0x124 <SPI_WriteReadByte>
	while(len-- > 0) *array++ = SPI_WriteReadByte(NRF24_CMD_NOP);
 150:	69 81       	ldd	r22, Y+1	; 0x01
 152:	e6 2e       	mov	r14, r22
 154:	7a 81       	ldd	r23, Y+2	; 0x02
 156:	f7 2e       	mov	r15, r23
 158:	16 0f       	add	r17, r22
 15a:	1e 15       	cp	r17, r14
 15c:	31 f0       	breq	.+12     	; 0x16a <__stack+0xb>
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	e1 df       	rcall	.-62     	; 0x124 <SPI_WriteReadByte>
 162:	f7 01       	movw	r30, r14
 164:	81 93       	st	Z+, r24
 166:	7f 01       	movw	r14, r30
 168:	f8 cf       	rjmp	.-16     	; 0x15a <NRF24_ReadArray+0x24>
	NRF24_SET_CSN_HI;
 16a:	db 9a       	sbi	0x1b, 3	; 27
}
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	ff 90       	pop	r15
 178:	ef 90       	pop	r14
 17a:	08 95       	ret

0000017c <NRF24_WriteByte>:

void NRF24_WriteByte(uint8_t cmd, uint8_t value)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	1f 92       	push	r1
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
	NRF24_SET_CSN_LOW;
 186:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 188:	69 83       	std	Y+1, r22	; 0x01
 18a:	cc df       	rcall	.-104    	; 0x124 <SPI_WriteReadByte>
	SPI_WriteReadByte(value);
 18c:	69 81       	ldd	r22, Y+1	; 0x01
 18e:	86 2f       	mov	r24, r22
 190:	c9 df       	rcall	.-110    	; 0x124 <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 192:	db 9a       	sbi	0x1b, 3	; 27
}
 194:	0f 90       	pop	r0
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <NRF24_WriteArray>:

void NRF24_WriteArray(int8_t cmd, uint8_t *array, uint8_t len)
{
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <NRF24_WriteArray+0xc>
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 1ae:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 1b0:	69 83       	std	Y+1, r22	; 0x01
 1b2:	7a 83       	std	Y+2, r23	; 0x02
 1b4:	b7 df       	rcall	.-146    	; 0x124 <SPI_WriteReadByte>
	while(len-- > 0) SPI_WriteReadByte(*array++);
 1b6:	69 81       	ldd	r22, Y+1	; 0x01
 1b8:	e6 2e       	mov	r14, r22
 1ba:	7a 81       	ldd	r23, Y+2	; 0x02
 1bc:	f7 2e       	mov	r15, r23
 1be:	16 0f       	add	r17, r22
 1c0:	1e 15       	cp	r17, r14
 1c2:	29 f0       	breq	.+10     	; 0x1ce <NRF24_WriteArray+0x32>
 1c4:	f7 01       	movw	r30, r14
 1c6:	81 91       	ld	r24, Z+
 1c8:	7f 01       	movw	r14, r30
 1ca:	ac df       	rcall	.-168    	; 0x124 <SPI_WriteReadByte>
 1cc:	f9 cf       	rjmp	.-14     	; 0x1c0 <NRF24_WriteArray+0x24>
	NRF24_SET_CSN_HI;
 1ce:	db 9a       	sbi	0x1b, 3	; 27
}
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	08 95       	ret

000001e0 <NRF24_SendCommand>:

uint8_t NRF24_SendCommand(uint8_t cmd) // Send command & receive status
{
	NRF24_SET_CSN_LOW;
 1e0:	db 98       	cbi	0x1b, 3	; 27
	uint8_t result = SPI_WriteReadByte(cmd);
 1e2:	a0 df       	rcall	.-192    	; 0x124 <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 1e4:	db 9a       	sbi	0x1b, 3	; 27
	return result;
}
 1e6:	08 95       	ret

000001e8 <NRF24_SetMode>:

void NRF24_SetMode(uint8_t mode) // Set mode in CONFIG reg
{
 1e8:	cf 93       	push	r28
 1ea:	c8 2f       	mov	r28, r24
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG | (1<<NRF24_BIT_PWR_UP) | mode);
 1ec:	68 2f       	mov	r22, r24
 1ee:	6e 67       	ori	r22, 0x7E	; 126
 1f0:	80 e2       	ldi	r24, 0x20	; 32
 1f2:	c4 df       	rcall	.-120    	; 0x17c <NRF24_WriteByte>
	if(mode & NRF24_ReceiveMode) { // Receive mode
 1f4:	c0 ff       	sbrs	r28, 0
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <NRF24_SetMode+0x18>
		//NRF24_SendCommand(NRF24_CMD_FLUSH_RX);
		NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 1f8:	60 e7       	ldi	r22, 0x70	; 112
 1fa:	87 e2       	ldi	r24, 0x27	; 39
 1fc:	bf df       	rcall	.-130    	; 0x17c <NRF24_WriteByte>
		NRF24_SET_CE_HI; // start receiving
 1fe:	da 9a       	sbi	0x1b, 2	; 27
	}
}
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <NRF24_TransmitShockBurst>:
}

// Transmit payload, than receive payload.
// return 0 if success, 1 - Max retransmit reached, 2 - Payload not returned,  3 - return payload len error, 4 - module not responding.
uint8_t NRF24_TransmitShockBurst(uint8_t send_len, uint8_t receive_len)
{
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	1f 92       	push	r1
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	48 2f       	mov	r20, r24
 214:	06 2f       	mov	r16, r22
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 216:	60 e7       	ldi	r22, 0x70	; 112
 218:	87 e2       	ldi	r24, 0x27	; 39
 21a:	49 83       	std	Y+1, r20	; 0x01
 21c:	af df       	rcall	.-162    	; 0x17c <NRF24_WriteByte>
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
 21e:	81 ee       	ldi	r24, 0xE1	; 225
 220:	df df       	rcall	.-66     	; 0x1e0 <NRF24_SendCommand>
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, NRF24_Buffer, send_len);
 222:	49 81       	ldd	r20, Y+1	; 0x01
 224:	61 e7       	ldi	r22, 0x71	; 113
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 ea       	ldi	r24, 0xA0	; 160
 22a:	b8 df       	rcall	.-144    	; 0x19c <NRF24_WriteArray>
	NRF24_SET_CE_HI; // Start transmission
 22c:	da 9a       	sbi	0x1b, 2	; 27
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 22e:	11 e0       	ldi	r17, 0x01	; 1
	{
		Delay10us(10);
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	48 df       	rcall	.-368    	; 0xc4 <Delay10us>
		st = NRF24_SendCommand(NRF24_CMD_NOP);
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	d4 df       	rcall	.-88     	; 0x1e0 <NRF24_SendCommand>
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
 238:	98 2f       	mov	r25, r24
 23a:	90 73       	andi	r25, 0x30	; 48
 23c:	11 f4       	brne	.+4      	; 0x242 <NRF24_TransmitShockBurst+0x3e>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, NRF24_Buffer, send_len);
	NRF24_SET_CE_HI; // Start transmission
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 23e:	1f 5f       	subi	r17, 0xFF	; 255
 240:	b9 f7       	brne	.-18     	; 0x230 <NRF24_TransmitShockBurst+0x2c>
	{
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	NRF24_SET_CE_LOW;
 242:	da 98       	cbi	0x1b, 2	; 27
	if(i == 0) return 4;
 244:	11 23       	and	r17, r17
 246:	d1 f0       	breq	.+52     	; 0x27c <NRF24_TransmitShockBurst+0x78>
	if(st & (1<<NRF24_BIT_MAX_RT)) return 1;
 248:	18 2f       	mov	r17, r24
 24a:	10 71       	andi	r17, 0x10	; 16
 24c:	84 fd       	sbrc	r24, 4
 24e:	18 c0       	rjmp	.+48     	; 0x280 <NRF24_TransmitShockBurst+0x7c>
	if(st & (1<<NRF24_BIT_RX_DR)) {
 250:	86 ff       	sbrs	r24, 6
 252:	18 c0       	rjmp	.+48     	; 0x284 <NRF24_TransmitShockBurst+0x80>
		NRF24_Buffer[0] = 0xFF;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	80 93 71 00 	sts	0x0071, r24
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	61 e7       	ldi	r22, 0x71	; 113
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	80 e6       	ldi	r24, 0x60	; 96
 262:	69 df       	rcall	.-302    	; 0x136 <NRF24_ReadArray>
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
 264:	80 91 71 00 	lds	r24, 0x0071
 268:	81 32       	cpi	r24, 0x21	; 33
 26a:	70 f4       	brcc	.+28     	; 0x288 <NRF24_TransmitShockBurst+0x84>
 26c:	80 17       	cp	r24, r16
 26e:	60 f0       	brcs	.+24     	; 0x288 <NRF24_TransmitShockBurst+0x84>
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
 270:	40 2f       	mov	r20, r16
 272:	61 e7       	ldi	r22, 0x71	; 113
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	81 e6       	ldi	r24, 0x61	; 97
 278:	5e df       	rcall	.-324    	; 0x136 <NRF24_ReadArray>
		return  0;
 27a:	07 c0       	rjmp	.+14     	; 0x28a <NRF24_TransmitShockBurst+0x86>
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	NRF24_SET_CE_LOW;
	if(i == 0) return 4;
 27c:	14 e0       	ldi	r17, 0x04	; 4
 27e:	05 c0       	rjmp	.+10     	; 0x28a <NRF24_TransmitShockBurst+0x86>
	if(st & (1<<NRF24_BIT_MAX_RT)) return 1;
 280:	11 e0       	ldi	r17, 0x01	; 1
 282:	03 c0       	rjmp	.+6      	; 0x28a <NRF24_TransmitShockBurst+0x86>
		NRF24_Buffer[0] = 0xFF;
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
		return  0;
	} else return 2;
 284:	12 e0       	ldi	r17, 0x02	; 2
 286:	01 c0       	rjmp	.+2      	; 0x28a <NRF24_TransmitShockBurst+0x86>
	if(i == 0) return 4;
	if(st & (1<<NRF24_BIT_MAX_RT)) return 1;
	if(st & (1<<NRF24_BIT_RX_DR)) {
		NRF24_Buffer[0] = 0xFF;
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
 288:	13 e0       	ldi	r17, 0x03	; 3
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
		return  0;
	} else return 2;
}
 28a:	81 2f       	mov	r24, r17
 28c:	0f 90       	pop	r0
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	08 95       	ret

00000298 <NRF24_SetAddresses>:

uint8_t NRF24_SetAddresses(uint8_t addr_LSB) // Set addresses: NRF24_BASE_ADDR + addr_LSB, return 1 if success
{
 298:	cf 93       	push	r28
 29a:	c8 2f       	mov	r28, r24
	NRF24_Buffer[0] = addr_LSB;
 29c:	80 93 71 00 	sts	0x0071, r24
	memcpy_P(NRF24_Buffer + 1, NRF24_BASE_ADDR, sizeof(NRF24_BASE_ADDR)/sizeof(NRF24_BASE_ADDR[0]));
 2a0:	42 e0       	ldi	r20, 0x02	; 2
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	62 e2       	ldi	r22, 0x22	; 34
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	82 e7       	ldi	r24, 0x72	; 114
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	e2 d1       	rcall	.+964    	; 0x672 <memcpy_P>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_RX_ADDR_P0, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2ae:	43 e0       	ldi	r20, 0x03	; 3
 2b0:	61 e7       	ldi	r22, 0x71	; 113
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	8a e2       	ldi	r24, 0x2A	; 42
 2b6:	72 df       	rcall	.-284    	; 0x19c <NRF24_WriteArray>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2b8:	43 e0       	ldi	r20, 0x03	; 3
 2ba:	61 e7       	ldi	r22, 0x71	; 113
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	80 e3       	ldi	r24, 0x30	; 48
 2c0:	6d df       	rcall	.-294    	; 0x19c <NRF24_WriteArray>
	NRF24_ReadArray(NRF24_CMD_R_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2c2:	43 e0       	ldi	r20, 0x03	; 3
 2c4:	61 e7       	ldi	r22, 0x71	; 113
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	80 e1       	ldi	r24, 0x10	; 16
 2ca:	35 df       	rcall	.-406    	; 0x136 <NRF24_ReadArray>
	return NRF24_Buffer[0] == addr_LSB;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 91 71 00 	lds	r25, 0x0071
 2d2:	9c 13       	cpse	r25, r28
 2d4:	80 e0       	ldi	r24, 0x00	; 0
}
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <NRF24_init>:
	NRF24_SET_CE_LOW;
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG); // Power down
}

void NRF24_init(uint8_t channel) // After init transmit must be delayed
{
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	18 2f       	mov	r17, r24
	NRF24_SET_CSN_HI;
 2e2:	db 9a       	sbi	0x1b, 3	; 27
 2e4:	c4 e2       	ldi	r28, 0x24	; 36
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i = 0, c, v;
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 2e8:	fe 01       	movw	r30, r28
 2ea:	84 91       	lpm	r24, Z
 2ec:	31 96       	adiw	r30, 0x01	; 1
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 2ee:	64 91       	lpm	r22, Z
		NRF24_WriteByte(c, v); 
 2f0:	45 df       	rcall	.-374    	; 0x17c <NRF24_WriteByte>
 2f2:	22 96       	adiw	r28, 0x02	; 2
	} while(i < sizeof(NRF24_INIT_DATA));
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	c2 33       	cpi	r28, 0x32	; 50
 2f8:	df 07       	cpc	r29, r31
 2fa:	b1 f7       	brne	.-20     	; 0x2e8 <NRF24_init+0xe>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 2fc:	61 2f       	mov	r22, r17
 2fe:	85 e2       	ldi	r24, 0x25	; 37
}
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		NRF24_WriteByte(c, v); 
	} while(i < sizeof(NRF24_INIT_DATA));
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 306:	3a cf       	rjmp	.-396    	; 0x17c <NRF24_WriteByte>

00000308 <__vector_11>:

#define SETUP_WATCHDOG WDTCSR = (1<<WDCE) | (1<<WDE); WDTCSR = (1<<WDE) | (0<<WDIE) | (0<<WDP3) | (1<<WDP2) | (1<<WDP1) | (0<<WDP0); //  Watchdog reset 1 s
//uint8_t LED_Warning = 0, LED_WarningOnCnt = 0, LED_WarningOffCnt = 0;

ISR(TIM0_OVF_vect) // 0.10035 sec
{
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	2f 93       	push	r18
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
	if(++TimerCntSec == 10) { // 1 sec
 318:	80 91 65 00 	lds	r24, 0x0065
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	80 93 65 00 	sts	0x0065, r24
 322:	8a 30       	cpi	r24, 0x0A	; 10
 324:	49 f4       	brne	.+18     	; 0x338 <__vector_11+0x30>
		TimerCntSec = 0;
 326:	10 92 65 00 	sts	0x0065, r1
		if(RequestCountdown) RequestCountdown--;
 32a:	80 91 61 00 	lds	r24, 0x0061
 32e:	88 23       	and	r24, r24
 330:	19 f0       	breq	.+6      	; 0x338 <__vector_11+0x30>
 332:	81 50       	subi	r24, 0x01	; 1
 334:	80 93 61 00 	sts	0x0061, r24
	}
	if(HaltSetFanSpeed == 0 && FanSpeed != SpeedSet) {
 338:	80 91 66 00 	lds	r24, 0x0066
 33c:	81 11       	cpse	r24, r1
 33e:	4f c0       	rjmp	.+158    	; 0x3de <__vector_11+0xd6>
 340:	80 91 6a 00 	lds	r24, 0x006A
 344:	90 91 70 00 	lds	r25, 0x0070
 348:	89 17       	cp	r24, r25
 34a:	09 f4       	brne	.+2      	; 0x34e <__vector_11+0x46>
 34c:	48 c0       	rjmp	.+144    	; 0x3de <__vector_11+0xd6>
		if(PressKeyOffTime) {
 34e:	20 91 6c 00 	lds	r18, 0x006C
 352:	22 23       	and	r18, r18
 354:	61 f0       	breq	.+24     	; 0x36e <__vector_11+0x66>
			if(--PressKeyOffTime == 0) {
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	82 0f       	add	r24, r18
 35a:	80 93 6c 00 	sts	0x006C, r24
 35e:	81 11       	cpse	r24, r1
 360:	3e c0       	rjmp	.+124    	; 0x3de <__vector_11+0xd6>
				KEYS_DDR |= PressKey; // set Out, level 0
 362:	87 b3       	in	r24, 0x17	; 23
 364:	90 91 6d 00 	lds	r25, 0x006D
 368:	89 2b       	or	r24, r25
 36a:	87 bb       	out	0x17, r24	; 23
 36c:	38 c0       	rjmp	.+112    	; 0x3de <__vector_11+0xd6>
			}
		} else if(PressKeyOnTime) {
 36e:	20 91 6b 00 	lds	r18, 0x006B
 372:	22 23       	and	r18, r18
 374:	21 f1       	breq	.+72     	; 0x3be <__vector_11+0xb6>
			if(--PressKeyOnTime == 0) {
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	82 0f       	add	r24, r18
 37a:	80 93 6b 00 	sts	0x006B, r24
 37e:	81 11       	cpse	r24, r1
 380:	2e c0       	rjmp	.+92     	; 0x3de <__vector_11+0xd6>
				KEYS_DDR &= ~PressKey; // set In
 382:	97 b3       	in	r25, 0x17	; 23
 384:	80 91 6d 00 	lds	r24, 0x006D
 388:	80 95       	com	r24
 38a:	89 23       	and	r24, r25
 38c:	87 bb       	out	0x17, r24	; 23
				if(PressKey == KEY_PWR) SpeedSet = FanSpeed;
 38e:	80 91 6d 00 	lds	r24, 0x006D
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	19 f4       	brne	.+6      	; 0x39c <__vector_11+0x94>
 396:	80 91 6a 00 	lds	r24, 0x006A
 39a:	0b c0       	rjmp	.+22     	; 0x3b2 <__vector_11+0xaa>
				else if(PressKey == KEY_MINUS) SpeedSet--;
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	21 f4       	brne	.+8      	; 0x3a8 <__vector_11+0xa0>
 3a0:	80 91 70 00 	lds	r24, 0x0070
 3a4:	81 50       	subi	r24, 0x01	; 1
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <__vector_11+0xaa>
				else if(PressKey == KEY_PLUS) SpeedSet++;
 3a8:	84 30       	cpi	r24, 0x04	; 4
 3aa:	29 f4       	brne	.+10     	; 0x3b6 <__vector_11+0xae>
 3ac:	80 91 70 00 	lds	r24, 0x0070
 3b0:	8f 5f       	subi	r24, 0xFF	; 255
 3b2:	80 93 70 00 	sts	0x0070, r24
				SpeedSetChanged = 1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 69 00 	sts	0x0069, r24
 3bc:	10 c0       	rjmp	.+32     	; 0x3de <__vector_11+0xd6>
			}
		} else {
			if(FanSpeed == 0) { // off
 3be:	81 11       	cpse	r24, r1
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <__vector_11+0xbe>
				PressKey = KEY_PWR;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <__vector_11+0xc8>
			} else if(FanSpeed < SpeedSet) { // less
 3c6:	89 17       	cp	r24, r25
 3c8:	14 f4       	brge	.+4      	; 0x3ce <__vector_11+0xc6>
				PressKey = KEY_MINUS;
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <__vector_11+0xc8>
			} else {
				PressKey = KEY_PLUS;
 3ce:	84 e0       	ldi	r24, 0x04	; 4
 3d0:	80 93 6d 00 	sts	0x006D, r24
			}
			PressKeyOffTime = 2;
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	80 93 6c 00 	sts	0x006C, r24
			PressKeyOnTime = 2;
 3da:	80 93 6b 00 	sts	0x006B, r24
// 	} else if(LED_Warning) { // short flashes
// 		LED_WarningOffCnt = 2;
// 		LED_WarningOnCnt = 2;
// 		if(--LED_Warning == 0) LED_WarningOffCnt = 15;
// 	}
}
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <main>:

int main(void)
{
	CLKPR = (1<<CLKPCE); CLKPR = (0<<CLKPS3) | (0<<CLKPS2) | (1<<CLKPS1) | (1<<CLKPS0); // Clock prescaler: 8
 3ee:	80 e8       	ldi	r24, 0x80	; 128
 3f0:	86 bd       	out	0x26, r24	; 38
 3f2:	93 e0       	ldi	r25, 0x03	; 3
 3f4:	96 bd       	out	0x26, r25	; 38
	MCUCR = (1<<SE) | (0<<SM1) | (0<<SM0); // Idle sleep enable
 3f6:	80 e2       	ldi	r24, 0x20	; 32
 3f8:	85 bf       	out	0x35, r24	; 53
	KEYS_DDR &= ~(KEY_PWR | KEY_MINUS | KEY_PLUS); // In
 3fa:	87 b3       	in	r24, 0x17	; 23
 3fc:	88 7f       	andi	r24, 0xF8	; 248
 3fe:	87 bb       	out	0x17, r24	; 23
	KEYS_PORT &= ~(KEY_PWR | KEY_MINUS | KEY_PLUS); // = 0
 400:	88 b3       	in	r24, 0x18	; 24
 402:	88 7f       	andi	r24, 0xF8	; 248
 404:	88 bb       	out	0x18, r24	; 24
	DDRA = LED1; // Out
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	8a bb       	out	0x1a, r24	; 26
	PORTA = (1<<PORTA7) | (1<<PORTA0); // pullup not used pins
 40a:	81 e8       	ldi	r24, 0x81	; 129
 40c:	8b bb       	out	0x1b, r24	; 27
	NRF24_DDR |= NRF24_CE | NRF24_CSN | NRF24_SCK | NRF24_MOSI; // Out
 40e:	8a b3       	in	r24, 0x1a	; 26
 410:	8c 63       	ori	r24, 0x3C	; 60
 412:	8a bb       	out	0x1a, r24	; 26
//	// Timer 8 bit
 	TCCR0A = (1<<WGM01) | (1<<WGM00);  // Timer0: Fast PWM OCRA
 414:	90 bf       	out	0x30, r25	; 48
 	TCCR0B = (1<<WGM02) | (1 << CS02) | (0 << CS01) | (1 << CS00); // Timer0 prescaller: 1024
 416:	8d e0       	ldi	r24, 0x0D	; 13
 418:	83 bf       	out	0x33, r24	; 51
 	TIMSK0 |= (1<<TOIE0); // Timer/Counter0 Overflow Interrupt Enable
 41a:	89 b7       	in	r24, 0x39	; 57
 41c:	81 60       	ori	r24, 0x01	; 1
 41e:	89 bf       	out	0x39, r24	; 57
 	OCR0A = 97; // OC0A(TOP)=Fclk/prescaller/Freq - 1; Freq=Fclk/(prescaller*(1+TOP))
 420:	81 e6       	ldi	r24, 0x61	; 97
 422:	86 bf       	out	0x36, r24	; 54
 	//OCR0B = 0; // 0..OCR0A, Half Duty cycle = ((TOP+1)/2-1)
	//TCCR0A |= (1<<COM0B1); // Start PWM out
	FanSpeedMax = EEPROM_read(EPROM_FanSpeedMax);
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	21 de       	rcall	.-958    	; 0x6a <EEPROM_read>
 428:	80 93 6f 00 	sts	0x006F, r24
	if(FanSpeedMax == 0xFF) {
 42c:	8f 3f       	cpi	r24, 0xFF	; 255
 42e:	91 f4       	brne	.+36     	; 0x454 <main+0x66>
		EEPROM_write(EPROM_OSCCAL, OSCCAL);
 430:	61 b7       	in	r22, 0x31	; 49
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	22 de       	rcall	.-956    	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_CurrentSpeedAddr, EPROM_CurrentSpeedAddr + 1);
 436:	61 e8       	ldi	r22, 0x81	; 129
 438:	80 e8       	ldi	r24, 0x80	; 128
 43a:	1f de       	rcall	.-962    	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_CurrentSpeedAddr + 1, 0);
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	81 e8       	ldi	r24, 0x81	; 129
 440:	1c de       	rcall	.-968    	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_FanSpeedMax, 7);
 442:	67 e0       	ldi	r22, 0x07	; 7
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	19 de       	rcall	.-974    	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_RFAddress, 0xE5);
 448:	65 ee       	ldi	r22, 0xE5	; 229
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	16 de       	rcall	.-980    	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_RF_Channel, 120);
 44e:	68 e7       	ldi	r22, 0x78	; 120
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	13 de       	rcall	.-986    	; 0x7a <EEPROM_write>
	}
	//OSCCAL = EEPROM_read(EPROM_OSCCAL);
	SpeedSet = EEPROM_read(EEPROM_read(EPROM_CurrentSpeedAddr));
 454:	80 e8       	ldi	r24, 0x80	; 128
 456:	09 de       	rcall	.-1006   	; 0x6a <EEPROM_read>
 458:	08 de       	rcall	.-1008   	; 0x6a <EEPROM_read>
 45a:	80 93 70 00 	sts	0x0070, r24
	NRF24_init(EEPROM_read(EPROM_RF_Channel)); // After init transmit must be delayed
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	04 de       	rcall	.-1016   	; 0x6a <EEPROM_read>
 462:	3b df       	rcall	.-394    	; 0x2da <NRF24_init>
	KEYS_INTR_INIT;
 464:	8b b7       	in	r24, 0x3b	; 59
 466:	80 62       	ori	r24, 0x20	; 32
 468:	8b bf       	out	0x3b, r24	; 59
 46a:	80 b5       	in	r24, 0x20	; 32
 46c:	87 60       	ori	r24, 0x07	; 7
 46e:	80 bd       	out	0x20, r24	; 32
	SETUP_WATCHDOG;
 470:	88 e1       	ldi	r24, 0x18	; 24
 472:	81 bd       	out	0x21, r24	; 33
 474:	8e e0       	ldi	r24, 0x0E	; 14
 476:	81 bd       	out	0x21, r24	; 33
	sei();
 478:	78 94       	sei
 	while(!NRF24_SetAddresses(EEPROM_read(EPROM_RFAddress))) {
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	f6 dd       	rcall	.-1044   	; 0x6a <EEPROM_read>
 47e:	0c df       	rcall	.-488    	; 0x298 <NRF24_SetAddresses>
 480:	81 11       	cpse	r24, r1
 482:	05 c0       	rjmp	.+10     	; 0x48e <main+0xa0>
 		FlashLED(1, 50, 20);
 484:	44 e1       	ldi	r20, 0x14	; 20
 486:	62 e3       	ldi	r22, 0x32	; 50
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	32 de       	rcall	.-924    	; 0xf0 <FlashLED>
 48c:	f6 cf       	rjmp	.-20     	; 0x47a <main+0x8c>
 	}
	NRF24_SetMode(NRF24_TransmitMode);
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	ab de       	rcall	.-682    	; 0x1e8 <NRF24_SetMode>
			}
			SpeedSetChanged = 0;
		}
		if(keys) {
			if(keys | KEY_PWR) {
				FanSpeedOverrideOff ^= 1;
 492:	11 e0       	ldi	r17, 0x01	; 1
			uint8_t addr = EEPROM_read(EPROM_CurrentSpeedAddr);
x_save_speed:			
			EEPROM_write(addr, SpeedSet);
			if(EEPROM_read(addr) != SpeedSet) { // EEPROM cell broken
				FlashLED(10, 2, 2);
				send_data = 0xEE;
 494:	0e ee       	ldi	r16, 0xEE	; 238
			}
			SpeedSetChanged = 0;
		}
		if(keys) {
			if(keys | KEY_PWR) {
				FanSpeedOverrideOff ^= 1;
 496:	d1 e0       	ldi	r29, 0x01	; 1
 	}
	NRF24_SetMode(NRF24_TransmitMode);
	while(1)
	{
		__asm__ volatile ("" ::: "memory"); // Need memory barrier
		sleep_cpu();
 498:	88 95       	sleep
		wdt_reset();
 49a:	a8 95       	wdr
		if(SpeedSetChanged) {
 49c:	80 91 69 00 	lds	r24, 0x0069
 4a0:	88 23       	and	r24, r24
 4a2:	29 f1       	breq	.+74     	; 0x4ee <main+0x100>
			uint8_t addr = EEPROM_read(EPROM_CurrentSpeedAddr);
 4a4:	80 e8       	ldi	r24, 0x80	; 128
 4a6:	e1 dd       	rcall	.-1086   	; 0x6a <EEPROM_read>
 4a8:	c8 2f       	mov	r28, r24
x_save_speed:			
			EEPROM_write(addr, SpeedSet);
 4aa:	60 91 70 00 	lds	r22, 0x0070
 4ae:	8c 2f       	mov	r24, r28
 4b0:	e4 dd       	rcall	.-1080   	; 0x7a <EEPROM_write>
			if(EEPROM_read(addr) != SpeedSet) { // EEPROM cell broken
 4b2:	8c 2f       	mov	r24, r28
 4b4:	da dd       	rcall	.-1100   	; 0x6a <EEPROM_read>
 4b6:	48 2f       	mov	r20, r24
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	20 91 70 00 	lds	r18, 0x0070
 4be:	33 27       	eor	r19, r19
 4c0:	27 fd       	sbrc	r18, 7
 4c2:	30 95       	com	r19
 4c4:	42 17       	cp	r20, r18
 4c6:	53 07       	cpc	r21, r19
 4c8:	81 f0       	breq	.+32     	; 0x4ea <main+0xfc>
				FlashLED(10, 2, 2);
 4ca:	42 e0       	ldi	r20, 0x02	; 2
 4cc:	62 e0       	ldi	r22, 0x02	; 2
 4ce:	8a e0       	ldi	r24, 0x0A	; 10
 4d0:	0f de       	rcall	.-994    	; 0xf0 <FlashLED>
				send_data = 0xEE;
 4d2:	00 93 62 00 	sts	0x0062, r16
				if(++addr == 0) { // memory ends
 4d6:	cf 5f       	subi	r28, 0xFF	; 255
 4d8:	21 f4       	brne	.+8      	; 0x4e2 <main+0xf4>
					EEPROM_write(addr, 0);
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	cd dd       	rcall	.-1126   	; 0x7a <EEPROM_write>
 4e0:	04 c0       	rjmp	.+8      	; 0x4ea <main+0xfc>
				} else {
					EEPROM_write(EPROM_CurrentSpeedAddr, addr);
 4e2:	6c 2f       	mov	r22, r28
 4e4:	80 e8       	ldi	r24, 0x80	; 128
 4e6:	c9 dd       	rcall	.-1134   	; 0x7a <EEPROM_write>
					goto x_save_speed;
 4e8:	e0 cf       	rjmp	.-64     	; 0x4aa <main+0xbc>
				}
			}
			SpeedSetChanged = 0;
 4ea:	10 92 69 00 	sts	0x0069, r1
		}
		if(keys) {
 4ee:	80 91 6e 00 	lds	r24, 0x006E
 4f2:	88 23       	and	r24, r24
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <main+0x10a>
 4f6:	63 c0       	rjmp	.+198    	; 0x5be <main+0x1d0>
			if(keys | KEY_PWR) {
				FanSpeedOverrideOff ^= 1;
 4f8:	80 91 67 00 	lds	r24, 0x0067
 4fc:	81 27       	eor	r24, r17
 4fe:	80 93 67 00 	sts	0x0067, r24
				SendOffStasus = 1;
 502:	d0 93 64 00 	sts	0x0064, r29
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 506:	f8 94       	cli
				ATOMIC_BLOCK(ATOMIC_FORCEON) keys &= ~KEY_PWR;
 508:	80 91 6e 00 	lds	r24, 0x006E
 50c:	8e 7f       	andi	r24, 0xFE	; 254
 50e:	80 93 6e 00 	sts	0x006E, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 512:	78 94       	sei
			}
			if(FanSpeedOverrideOff == 0) {
 514:	80 91 67 00 	lds	r24, 0x0067
 518:	81 11       	cpse	r24, r1
 51a:	49 c0       	rjmp	.+146    	; 0x5ae <main+0x1c0>
				if(keys | KEY_MINUS) {
					if(FanSpeedOverride > -8) {
 51c:	80 91 68 00 	lds	r24, 0x0068
 520:	89 3f       	cpi	r24, 0xF9	; 249
 522:	9c f0       	brlt	.+38     	; 0x54a <main+0x15c>
						FanSpeedOverride--;
 524:	81 50       	subi	r24, 0x01	; 1
 526:	80 93 68 00 	sts	0x0068, r24
						HaltSetFanSpeed = 1;
						if(FanSpeed > 0) FanSpeed--;
 52a:	80 91 6a 00 	lds	r24, 0x006A
 52e:	18 16       	cp	r1, r24
 530:	1c f4       	brge	.+6      	; 0x538 <main+0x14a>
 532:	81 50       	subi	r24, 0x01	; 1
 534:	80 93 6a 00 	sts	0x006A, r24
						if(SpeedSet > 0) SpeedSet--;
 538:	80 91 70 00 	lds	r24, 0x0070
 53c:	18 16       	cp	r1, r24
 53e:	1c f4       	brge	.+6      	; 0x546 <main+0x158>
 540:	81 50       	subi	r24, 0x01	; 1
 542:	80 93 70 00 	sts	0x0070, r24
						HaltSetFanSpeed = 0;
 546:	10 92 66 00 	sts	0x0066, r1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 54a:	f8 94       	cli
					}
					ATOMIC_BLOCK(ATOMIC_FORCEON) keys &= ~KEY_MINUS;
 54c:	80 91 6e 00 	lds	r24, 0x006E
 550:	8d 7f       	andi	r24, 0xFD	; 253
 552:	80 93 6e 00 	sts	0x006E, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 556:	78 94       	sei
				}
				if(keys | KEY_PLUS) {
					if(FanSpeedOverride < 7) {
 558:	80 91 68 00 	lds	r24, 0x0068
 55c:	87 30       	cpi	r24, 0x07	; 7
 55e:	04 f5       	brge	.+64     	; 0x5a0 <main+0x1b2>
						FanSpeedOverride++;
 560:	8f 5f       	subi	r24, 0xFF	; 255
 562:	80 93 68 00 	sts	0x0068, r24
						HaltSetFanSpeed = 1;
						if(FanSpeed < FanSpeedMax) FanSpeed++;
 566:	40 91 6a 00 	lds	r20, 0x006A
 56a:	80 91 6f 00 	lds	r24, 0x006F
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	24 2f       	mov	r18, r20
 572:	33 27       	eor	r19, r19
 574:	27 fd       	sbrc	r18, 7
 576:	30 95       	com	r19
 578:	28 17       	cp	r18, r24
 57a:	39 07       	cpc	r19, r25
 57c:	1c f4       	brge	.+6      	; 0x584 <main+0x196>
 57e:	4f 5f       	subi	r20, 0xFF	; 255
 580:	40 93 6a 00 	sts	0x006A, r20
						if(SpeedSet < FanSpeedMax) SpeedSet++;
 584:	40 91 70 00 	lds	r20, 0x0070
 588:	24 2f       	mov	r18, r20
 58a:	33 27       	eor	r19, r19
 58c:	27 fd       	sbrc	r18, 7
 58e:	30 95       	com	r19
 590:	28 17       	cp	r18, r24
 592:	39 07       	cpc	r19, r25
 594:	1c f4       	brge	.+6      	; 0x59c <main+0x1ae>
 596:	4f 5f       	subi	r20, 0xFF	; 255
 598:	40 93 70 00 	sts	0x0070, r20
						HaltSetFanSpeed = 0;
 59c:	10 92 66 00 	sts	0x0066, r1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5a0:	f8 94       	cli
					}
					ATOMIC_BLOCK(ATOMIC_FORCEON) keys &= ~KEY_PLUS;
 5a2:	80 91 6e 00 	lds	r24, 0x006E
 5a6:	8b 7f       	andi	r24, 0xFB	; 251
 5a8:	80 93 6e 00 	sts	0x006E, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 5ac:	78 94       	sei
				}
			}
			LED1_ON;
 5ae:	d9 9a       	sbi	0x1b, 1	; 27
 5b0:	8b e4       	ldi	r24, 0x4B	; 75
 5b2:	9d e1       	ldi	r25, 0x1D	; 29
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <main+0x1c6>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <main+0x1cc>
 5ba:	00 00       	nop
			_delay_ms(30);
			LED1_OFF;
 5bc:	d9 98       	cbi	0x1b, 1	; 27
		}
		if(RequestCountdown == 0) {
 5be:	80 91 61 00 	lds	r24, 0x0061
 5c2:	81 11       	cpse	r24, r1
 5c4:	69 cf       	rjmp	.-302    	; 0x498 <main+0xaa>
			if(FanSpeedOverrideOff == 0 || SendOffStasus == 1) {
 5c6:	80 91 67 00 	lds	r24, 0x0067
 5ca:	88 23       	and	r24, r24
 5cc:	29 f0       	breq	.+10     	; 0x5d8 <main+0x1ea>
 5ce:	90 91 64 00 	lds	r25, 0x0064
 5d2:	91 30       	cpi	r25, 0x01	; 1
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <main+0x1ea>
 5d6:	4a c0       	rjmp	.+148    	; 0x66c <main+0x27e>
				if(send_data == 0) send_data = (nrf_last_status << 5) | (FanSpeedOverrideOff << 4) | (FanSpeedOverride & 0x0F);
 5d8:	90 91 62 00 	lds	r25, 0x0062
 5dc:	91 11       	cpse	r25, r1
 5de:	0e c0       	rjmp	.+28     	; 0x5fc <main+0x20e>
 5e0:	90 91 63 00 	lds	r25, 0x0063
 5e4:	92 95       	swap	r25
 5e6:	99 0f       	add	r25, r25
 5e8:	90 7e       	andi	r25, 0xE0	; 224
 5ea:	82 95       	swap	r24
 5ec:	80 7f       	andi	r24, 0xF0	; 240
 5ee:	89 2b       	or	r24, r25
 5f0:	90 91 68 00 	lds	r25, 0x0068
 5f4:	9f 70       	andi	r25, 0x0F	; 15
 5f6:	89 2b       	or	r24, r25
 5f8:	80 93 62 00 	sts	0x0062, r24
				NRF24_Buffer[0] = send_data;
 5fc:	80 91 62 00 	lds	r24, 0x0062
 600:	80 93 71 00 	sts	0x0071, r24
				nrf_last_status = NRF24_TransmitShockBurst(1, sizeof(master_data)); // Enhanced ShockBurst, ACK with payload
 604:	65 e0       	ldi	r22, 0x05	; 5
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	fd dd       	rcall	.-1030   	; 0x204 <NRF24_TransmitShockBurst>
 60a:	80 93 63 00 	sts	0x0063, r24
				if(nrf_last_status) { // some problem
 60e:	88 23       	and	r24, r24
 610:	41 f0       	breq	.+16     	; 0x622 <main+0x234>
					FlashLED(nrf_last_status, 3, 3);
 612:	43 e0       	ldi	r20, 0x03	; 3
 614:	63 e0       	ldi	r22, 0x03	; 3
 616:	6c dd       	rcall	.-1320   	; 0xf0 <FlashLED>
					RequestCountdown = EEPROM_read(EPROM_PauseWhenError); // sec
 618:	84 e0       	ldi	r24, 0x04	; 4
 61a:	27 dd       	rcall	.-1458   	; 0x6a <EEPROM_read>
 61c:	80 93 61 00 	sts	0x0061, r24
 620:	3b cf       	rjmp	.-394    	; 0x498 <main+0xaa>
				} else {
					send_data = 0;
 622:	10 92 62 00 	sts	0x0062, r1
					HaltSetFanSpeed = 1;
					FanSpeed = ((master_data*) &NRF24_Buffer)->FanSpeed + FanSpeedOverride;
 626:	20 91 68 00 	lds	r18, 0x0068
 62a:	80 91 73 00 	lds	r24, 0x0073
 62e:	28 0f       	add	r18, r24
 630:	20 93 6a 00 	sts	0x006A, r18
					if(FanSpeed < 0) FanSpeed = 0;
 634:	27 ff       	sbrs	r18, 7
 636:	03 c0       	rjmp	.+6      	; 0x63e <main+0x250>
 638:	10 92 6a 00 	sts	0x006A, r1
 63c:	0c c0       	rjmp	.+24     	; 0x656 <main+0x268>
					else if(FanSpeed > FanSpeedMax) FanSpeed = FanSpeedMax;
 63e:	40 91 6f 00 	lds	r20, 0x006F
 642:	33 27       	eor	r19, r19
 644:	27 fd       	sbrc	r18, 7
 646:	30 95       	com	r19
 648:	84 2f       	mov	r24, r20
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	82 17       	cp	r24, r18
 64e:	93 07       	cpc	r25, r19
 650:	14 f4       	brge	.+4      	; 0x656 <main+0x268>
 652:	40 93 6a 00 	sts	0x006A, r20
					HaltSetFanSpeed = 0;
 656:	10 92 66 00 	sts	0x0066, r1
					RequestCountdownLast = RequestCountdown = ((master_data*) &NRF24_Buffer)->Pause;
 65a:	80 91 75 00 	lds	r24, 0x0075
 65e:	80 93 61 00 	sts	0x0061, r24
 662:	80 93 60 00 	sts	0x0060, r24
					SendOffStasus = 0;
 666:	10 92 64 00 	sts	0x0064, r1
 66a:	16 cf       	rjmp	.-468    	; 0x498 <main+0xaa>
				}
			} else {
				RequestCountdown = 1; // sec
 66c:	d0 93 61 00 	sts	0x0061, r29
 670:	13 cf       	rjmp	.-474    	; 0x498 <main+0xaa>

00000672 <memcpy_P>:
 672:	fb 01       	movw	r30, r22
 674:	dc 01       	movw	r26, r24
 676:	02 c0       	rjmp	.+4      	; 0x67c <memcpy_P+0xa>
 678:	05 90       	lpm	r0, Z+
 67a:	0d 92       	st	X+, r0
 67c:	41 50       	subi	r20, 0x01	; 1
 67e:	50 40       	sbci	r21, 0x00	; 0
 680:	d8 f7       	brcc	.-10     	; 0x678 <memcpy_P+0x6>
 682:	08 95       	ret

00000684 <_exit>:
 684:	f8 94       	cli

00000686 <__stop_program>:
 686:	ff cf       	rjmp	.-2      	; 0x686 <__stop_program>
