
WirelessCO2Fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000862  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000862  000008f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800062  00800062  000008f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001137  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000303  00000000  00000000  00001b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000670  00000000  00000000  00001e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000284  00000000  00000000  000024a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e6  00000000  00000000  00002728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cef  00000000  00000000  00002c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000038fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	18 c0       	rjmp	.+48     	; 0x32 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__bad_interrupt>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__bad_interrupt>
   6:	45 c0       	rjmp	.+138    	; 0x92 <__vector_3>
   8:	2f c0       	rjmp	.+94     	; 0x68 <__bad_interrupt>
   a:	2e c0       	rjmp	.+92     	; 0x68 <__bad_interrupt>
   c:	2d c0       	rjmp	.+90     	; 0x68 <__bad_interrupt>
   e:	2c c0       	rjmp	.+88     	; 0x68 <__bad_interrupt>
  10:	2b c0       	rjmp	.+86     	; 0x68 <__bad_interrupt>
  12:	2a c0       	rjmp	.+84     	; 0x68 <__bad_interrupt>
  14:	29 c0       	rjmp	.+82     	; 0x68 <__bad_interrupt>
  16:	7f c1       	rjmp	.+766    	; 0x316 <__vector_11>
  18:	27 c0       	rjmp	.+78     	; 0x68 <__bad_interrupt>
  1a:	26 c0       	rjmp	.+76     	; 0x68 <__bad_interrupt>
  1c:	25 c0       	rjmp	.+74     	; 0x68 <__bad_interrupt>
  1e:	24 c0       	rjmp	.+72     	; 0x68 <__bad_interrupt>
  20:	23 c0       	rjmp	.+70     	; 0x68 <__bad_interrupt>

00000022 <NRF24_BASE_ADDR>:
  22:	c8 c8                                               ..

00000024 <NRF24_INIT_DATA>:
  24:	26 07 23 01 24 41 3d 06 21 01 22 01 3c 01           &.#.$A=.!.".<.

00000032 <__ctors_end>:
  32:	11 24       	eor	r1, r1
  34:	1f be       	out	0x3f, r1	; 63
  36:	cf e5       	ldi	r28, 0x5F	; 95
  38:	d1 e0       	ldi	r29, 0x01	; 1
  3a:	de bf       	out	0x3e, r29	; 62
  3c:	cd bf       	out	0x3d, r28	; 61

0000003e <__do_copy_data>:
  3e:	10 e0       	ldi	r17, 0x00	; 0
  40:	a0 e6       	ldi	r26, 0x60	; 96
  42:	b0 e0       	ldi	r27, 0x00	; 0
  44:	e2 e6       	ldi	r30, 0x62	; 98
  46:	f8 e0       	ldi	r31, 0x08	; 8
  48:	02 c0       	rjmp	.+4      	; 0x4e <__SREG__+0xf>
  4a:	05 90       	lpm	r0, Z+
  4c:	0d 92       	st	X+, r0
  4e:	a2 36       	cpi	r26, 0x62	; 98
  50:	b1 07       	cpc	r27, r17
  52:	d9 f7       	brne	.-10     	; 0x4a <__SREG__+0xb>

00000054 <__do_clear_bss>:
  54:	20 e0       	ldi	r18, 0x00	; 0
  56:	a2 e6       	ldi	r26, 0x62	; 98
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	01 c0       	rjmp	.+2      	; 0x5e <.do_clear_bss_start>

0000005c <.do_clear_bss_loop>:
  5c:	1d 92       	st	X+, r1

0000005e <.do_clear_bss_start>:
  5e:	a8 37       	cpi	r26, 0x78	; 120
  60:	b2 07       	cpc	r27, r18
  62:	e1 f7       	brne	.-8      	; 0x5c <.do_clear_bss_loop>
  64:	14 d2       	rcall	.+1064   	; 0x48e <main>
  66:	fb c3       	rjmp	.+2038   	; 0x85e <_exit>

00000068 <__bad_interrupt>:
  68:	cb cf       	rjmp	.-106    	; 0x0 <__vectors>

0000006a <EEPROM_read>:
	Delay100ms(20);
}

static uint8_t EEPROM_read(uint8_t ucAddress) // ATtiny24A/44A only!
{
	while(EECR & (1<<EEPE)) ; // EEWE
  6a:	e1 99       	sbic	0x1c, 1	; 28
  6c:	fe cf       	rjmp	.-4      	; 0x6a <EEPROM_read>
	EEAR = ucAddress;
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	9f bb       	out	0x1f, r25	; 31
  72:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
  74:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
  76:	8d b3       	in	r24, 0x1d	; 29
}
  78:	08 95       	ret

0000007a <EEPROM_write>:
static void EEPROM_write(uint8_t ucAddress, uint8_t ucData) // ATtiny24A/44A only!
{
	while(EECR & (1<<EEPE)) ; // EEWE
  7a:	e1 99       	sbic	0x1c, 1	; 28
  7c:	fe cf       	rjmp	.-4      	; 0x7a <EEPROM_write>
	cli();
  7e:	f8 94       	cli
	EECR = (0<<EEPM1)|(0<<EEPM0);
  80:	1c ba       	out	0x1c, r1	; 28
	EEAR = ucAddress;
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	9f bb       	out	0x1f, r25	; 31
  86:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  88:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMPE); //(1<<EEMWE);
  8a:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEPE); //(1<<EEWE);
  8c:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
  8e:	78 94       	sei
  90:	08 95       	ret

00000092 <__vector_3>:
#define KEYS_INTR_INIT				GIMSK |= (1<<PCIE1); PCMSK1 |= (1<<PCINT10) | (1<<PCINT9) | (1<<PCINT8)  // PCINT8..10
volatile uint8_t keys				= 0;
uint8_t PressKey					= 0;	
uint8_t PressKeyOffTime				= 0; // *0.1 sec
uint8_t PressKeyOnTime				= 0; // *0.1 sec
ISR(PCINT1_vect) {
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	if(PressKeyOnTime == 0 && PressKeyOffTime == 0) { // not in changing process
  9e:	80 91 6d 00 	lds	r24, 0x006D
  a2:	81 11       	cpse	r24, r1
  a4:	0a c0       	rjmp	.+20     	; 0xba <__vector_3+0x28>
  a6:	80 91 6e 00 	lds	r24, 0x006E
  aa:	81 11       	cpse	r24, r1
  ac:	06 c0       	rjmp	.+12     	; 0xba <__vector_3+0x28>
		keys = ~KEYS_PIN & (KEY_PWR | KEY_MINUS | KEY_PLUS);
  ae:	86 b3       	in	r24, 0x16	; 22
  b0:	80 95       	com	r24
  b2:	87 70       	andi	r24, 0x07	; 7
  b4:	80 93 70 00 	sts	0x0070, r24
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__vector_3+0x2c>
	} else keys = 0;
  ba:	10 92 70 00 	sts	0x0070, r1
}
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <Delay10us>:

#define FLAG_LowLight				0x01

#if(1)
void Delay10us(uint8_t ms) {
	while(ms-- > 0) _delay_us(10); wdt_reset();
  ca:	88 23       	and	r24, r24
  cc:	31 f0       	breq	.+12     	; 0xda <Delay10us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	93 e0       	ldi	r25, 0x03	; 3
  d0:	9a 95       	dec	r25
  d2:	f1 f7       	brne	.-4      	; 0xd0 <Delay10us+0x6>
  d4:	00 00       	nop
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	f8 cf       	rjmp	.-16     	; 0xca <Delay10us>
  da:	a8 95       	wdr
  dc:	08 95       	ret

000000de <Delay100ms>:
	while(ms-- > 0) {
		_delay_ms(1); wdt_reset();
	}
}
void Delay100ms(unsigned int ms) {
	while(ms-- > 0) {
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	49 f0       	breq	.+18     	; 0xf4 <Delay100ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	e7 ea       	ldi	r30, 0xA7	; 167
  e4:	f1 e6       	ldi	r31, 0x61	; 97
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <Delay100ms+0x8>
  ea:	00 c0       	rjmp	.+0      	; 0xec <Delay100ms+0xe>
  ec:	00 00       	nop
		_delay_ms(100); wdt_reset();
  ee:	a8 95       	wdr
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f5 cf       	rjmp	.-22     	; 0xde <Delay100ms>
	}
}
  f4:	08 95       	ret

000000f6 <FlashLED>:

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	while (num-- > 0) {
 100:	f8 2e       	mov	r15, r24
		LED1_OFF;
		Delay100ms(toff);
 102:	06 2f       	mov	r16, r22
 104:	10 e0       	ldi	r17, 0x00	; 0
		LED1_ON;
		Delay100ms(ton);
 106:	c4 2f       	mov	r28, r20
 108:	d0 e0       	ldi	r29, 0x00	; 0
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
		LED1_OFF;
 10a:	d9 98       	cbi	0x1b, 1	; 27
		_delay_ms(100); wdt_reset();
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
 10c:	ff 20       	and	r15, r15
 10e:	39 f0       	breq	.+14     	; 0x11e <FlashLED+0x28>
		LED1_OFF;
		Delay100ms(toff);
 110:	c8 01       	movw	r24, r16
 112:	e5 df       	rcall	.-54     	; 0xde <Delay100ms>
		LED1_ON;
 114:	d9 9a       	sbi	0x1b, 1	; 27
		Delay100ms(ton);
 116:	ce 01       	movw	r24, r28
 118:	e2 df       	rcall	.-60     	; 0xde <Delay100ms>
 11a:	fa 94       	dec	r15
 11c:	f6 cf       	rjmp	.-20     	; 0x10a <FlashLED+0x14>
	}
	LED1_OFF;
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	08 95       	ret

0000012a <SPI_WriteReadByte>:
	NRF24_CMD_W_REGISTER | NRF24_REG_DYNPD,		0b000001 // Dynamic payload
};
const uint8_t NRF24_BASE_ADDR[] PROGMEM = { 0xC8, 0xC8 }; // Address MSBs: 2..3

uint8_t SPI_WriteReadByte(uint8_t data) {
	USIDR = data;
 12a:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); // clear overflow flag
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	8e b9       	out	0x0e, r24	; 14
	do {
		USICR = (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);
 130:	8b e1       	ldi	r24, 0x1B	; 27
 132:	8d b9       	out	0x0d, r24	; 13
	} while((USISR & (1<<USIOIF)) == 0);
 134:	76 9b       	sbis	0x0e, 6	; 14
 136:	fd cf       	rjmp	.-6      	; 0x132 <SPI_WriteReadByte+0x8>
	return USIDR;
 138:	8f b1       	in	r24, 0x0f	; 15
}
 13a:	08 95       	ret

0000013c <NRF24_ReadArray>:
	NRF24_SET_CSN_HI;
	return result;
}

void NRF24_ReadArray(uint8_t cmd, uint8_t *array, uint8_t len)
{
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	00 d0       	rcall	.+0      	; 0x148 <NRF24_ReadArray+0xc>
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 14e:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 150:	69 83       	std	Y+1, r22	; 0x01
 152:	7a 83       	std	Y+2, r23	; 0x02
 154:	ea df       	rcall	.-44     	; 0x12a <SPI_WriteReadByte>
	while(len-- > 0) *array++ = SPI_WriteReadByte(NRF24_CMD_NOP);
 156:	69 81       	ldd	r22, Y+1	; 0x01
 158:	e6 2e       	mov	r14, r22
 15a:	7a 81       	ldd	r23, Y+2	; 0x02
 15c:	f7 2e       	mov	r15, r23
 15e:	16 0f       	add	r17, r22
 160:	1e 15       	cp	r17, r14
 162:	31 f0       	breq	.+12     	; 0x170 <__stack+0x11>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	e1 df       	rcall	.-62     	; 0x12a <SPI_WriteReadByte>
 168:	f7 01       	movw	r30, r14
 16a:	81 93       	st	Z+, r24
 16c:	7f 01       	movw	r14, r30
 16e:	f8 cf       	rjmp	.-16     	; 0x160 <__stack+0x1>
	NRF24_SET_CSN_HI;
 170:	db 9a       	sbi	0x1b, 3	; 27
}
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	08 95       	ret

00000182 <NRF24_WriteByte>:

void NRF24_WriteByte(uint8_t cmd, uint8_t value)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
	NRF24_SET_CSN_LOW;
 18c:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 18e:	69 83       	std	Y+1, r22	; 0x01
 190:	cc df       	rcall	.-104    	; 0x12a <SPI_WriteReadByte>
	SPI_WriteReadByte(value);
 192:	69 81       	ldd	r22, Y+1	; 0x01
 194:	86 2f       	mov	r24, r22
 196:	c9 df       	rcall	.-110    	; 0x12a <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 198:	db 9a       	sbi	0x1b, 3	; 27
}
 19a:	0f 90       	pop	r0
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <NRF24_WriteArray>:

void NRF24_WriteArray(int8_t cmd, uint8_t *array, uint8_t len)
{
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	00 d0       	rcall	.+0      	; 0x1ae <NRF24_WriteArray+0xc>
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 1b4:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 1b6:	69 83       	std	Y+1, r22	; 0x01
 1b8:	7a 83       	std	Y+2, r23	; 0x02
 1ba:	b7 df       	rcall	.-146    	; 0x12a <SPI_WriteReadByte>
	while(len-- > 0) SPI_WriteReadByte(*array++);
 1bc:	69 81       	ldd	r22, Y+1	; 0x01
 1be:	e6 2e       	mov	r14, r22
 1c0:	7a 81       	ldd	r23, Y+2	; 0x02
 1c2:	f7 2e       	mov	r15, r23
 1c4:	16 0f       	add	r17, r22
 1c6:	1e 15       	cp	r17, r14
 1c8:	29 f0       	breq	.+10     	; 0x1d4 <NRF24_WriteArray+0x32>
 1ca:	f7 01       	movw	r30, r14
 1cc:	81 91       	ld	r24, Z+
 1ce:	7f 01       	movw	r14, r30
 1d0:	ac df       	rcall	.-168    	; 0x12a <SPI_WriteReadByte>
 1d2:	f9 cf       	rjmp	.-14     	; 0x1c6 <NRF24_WriteArray+0x24>
	NRF24_SET_CSN_HI;
 1d4:	db 9a       	sbi	0x1b, 3	; 27
}
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	08 95       	ret

000001e6 <NRF24_SendCommand>:

uint8_t NRF24_SendCommand(uint8_t cmd) // Send command & receive status
{
	NRF24_SET_CSN_LOW;
 1e6:	db 98       	cbi	0x1b, 3	; 27
	uint8_t result = SPI_WriteReadByte(cmd);
 1e8:	a0 df       	rcall	.-192    	; 0x12a <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 1ea:	db 9a       	sbi	0x1b, 3	; 27
	return result;
}
 1ec:	08 95       	ret

000001ee <NRF24_SetMode>:

void NRF24_SetMode(uint8_t mode) // Set mode in CONFIG reg
{
 1ee:	cf 93       	push	r28
 1f0:	c8 2f       	mov	r28, r24
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG | (1<<NRF24_BIT_PWR_UP) | mode);
 1f2:	68 2f       	mov	r22, r24
 1f4:	6e 67       	ori	r22, 0x7E	; 126
 1f6:	80 e2       	ldi	r24, 0x20	; 32
 1f8:	c4 df       	rcall	.-120    	; 0x182 <NRF24_WriteByte>
	if(mode & NRF24_ReceiveMode) { // Receive mode
 1fa:	c0 ff       	sbrs	r28, 0
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <NRF24_SetMode+0x18>
		//NRF24_SendCommand(NRF24_CMD_FLUSH_RX);
		NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 1fe:	60 e7       	ldi	r22, 0x70	; 112
 200:	87 e2       	ldi	r24, 0x27	; 39
 202:	bf df       	rcall	.-130    	; 0x182 <NRF24_WriteByte>
		NRF24_SET_CE_HI; // start receiving
 204:	da 9a       	sbi	0x1b, 2	; 27
	}
}
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <NRF24_TransmitShockBurst>:
}

// Transmit payload, than receive payload.
// return 0 if success, 1 - Payload not returned, 2 - Max retransmit reached, 3 - return payload len error, 4 - module not responding.
uint8_t NRF24_TransmitShockBurst(uint8_t send_len, uint8_t receive_len)
{
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	1f 92       	push	r1
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	48 2f       	mov	r20, r24
 21a:	06 2f       	mov	r16, r22
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 21c:	60 e7       	ldi	r22, 0x70	; 112
 21e:	87 e2       	ldi	r24, 0x27	; 39
 220:	49 83       	std	Y+1, r20	; 0x01
 222:	af df       	rcall	.-162    	; 0x182 <NRF24_WriteByte>
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
 224:	81 ee       	ldi	r24, 0xE1	; 225
 226:	df df       	rcall	.-66     	; 0x1e6 <NRF24_SendCommand>
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, NRF24_Buffer, send_len);
 228:	49 81       	ldd	r20, Y+1	; 0x01
 22a:	64 e7       	ldi	r22, 0x74	; 116
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	80 ea       	ldi	r24, 0xA0	; 160
 230:	b8 df       	rcall	.-144    	; 0x1a2 <NRF24_WriteArray>
	NRF24_SET_CE_HI; // Start transmission
 232:	da 9a       	sbi	0x1b, 2	; 27
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 234:	11 e0       	ldi	r17, 0x01	; 1
	{
		Delay10us(10);
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	48 df       	rcall	.-368    	; 0xca <Delay10us>
		st = NRF24_SendCommand(NRF24_CMD_NOP);
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	d4 df       	rcall	.-88     	; 0x1e6 <NRF24_SendCommand>
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
 23e:	98 2f       	mov	r25, r24
 240:	90 73       	andi	r25, 0x30	; 48
 242:	11 f4       	brne	.+4      	; 0x248 <NRF24_TransmitShockBurst+0x3e>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, NRF24_Buffer, send_len);
	NRF24_SET_CE_HI; // Start transmission
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 244:	1f 5f       	subi	r17, 0xFF	; 255
 246:	b9 f7       	brne	.-18     	; 0x236 <NRF24_TransmitShockBurst+0x2c>
	{
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	NRF24_SET_CE_LOW;
 248:	da 98       	cbi	0x1b, 2	; 27
	if(i == 0) return 4;
 24a:	11 23       	and	r17, r17
 24c:	d1 f0       	breq	.+52     	; 0x282 <NRF24_TransmitShockBurst+0x78>
	if(st & (1<<NRF24_BIT_MAX_RT)) return 2;
 24e:	18 2f       	mov	r17, r24
 250:	10 71       	andi	r17, 0x10	; 16
 252:	84 fd       	sbrc	r24, 4
 254:	18 c0       	rjmp	.+48     	; 0x286 <NRF24_TransmitShockBurst+0x7c>
	if(st & (1<<NRF24_BIT_RX_DR)) {
 256:	86 ff       	sbrs	r24, 6
 258:	18 c0       	rjmp	.+48     	; 0x28a <NRF24_TransmitShockBurst+0x80>
		NRF24_Buffer[0] = 0xFF;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	80 93 74 00 	sts	0x0074, r24
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	64 e7       	ldi	r22, 0x74	; 116
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e6       	ldi	r24, 0x60	; 96
 268:	69 df       	rcall	.-302    	; 0x13c <NRF24_ReadArray>
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
 26a:	80 91 74 00 	lds	r24, 0x0074
 26e:	81 32       	cpi	r24, 0x21	; 33
 270:	70 f4       	brcc	.+28     	; 0x28e <NRF24_TransmitShockBurst+0x84>
 272:	80 17       	cp	r24, r16
 274:	60 f0       	brcs	.+24     	; 0x28e <NRF24_TransmitShockBurst+0x84>
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
 276:	40 2f       	mov	r20, r16
 278:	64 e7       	ldi	r22, 0x74	; 116
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	81 e6       	ldi	r24, 0x61	; 97
 27e:	5e df       	rcall	.-324    	; 0x13c <NRF24_ReadArray>
		return  0;
 280:	07 c0       	rjmp	.+14     	; 0x290 <NRF24_TransmitShockBurst+0x86>
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	NRF24_SET_CE_LOW;
	if(i == 0) return 4;
 282:	14 e0       	ldi	r17, 0x04	; 4
 284:	05 c0       	rjmp	.+10     	; 0x290 <NRF24_TransmitShockBurst+0x86>
	if(st & (1<<NRF24_BIT_MAX_RT)) return 2;
 286:	12 e0       	ldi	r17, 0x02	; 2
 288:	03 c0       	rjmp	.+6      	; 0x290 <NRF24_TransmitShockBurst+0x86>
		NRF24_Buffer[0] = 0xFF;
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
		return  0;
	} else return 1;
 28a:	11 e0       	ldi	r17, 0x01	; 1
 28c:	01 c0       	rjmp	.+2      	; 0x290 <NRF24_TransmitShockBurst+0x86>
	if(i == 0) return 4;
	if(st & (1<<NRF24_BIT_MAX_RT)) return 2;
	if(st & (1<<NRF24_BIT_RX_DR)) {
		NRF24_Buffer[0] = 0xFF;
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
 28e:	13 e0       	ldi	r17, 0x03	; 3
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
		return  0;
	} else return 1;
}
 290:	81 2f       	mov	r24, r17
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <NRF24_SetAddresses>:

uint8_t NRF24_SetAddresses(uint8_t addr_LSB) // Set addresses: NRF24_BASE_ADDR + addr_LSB, return 1 if success
{
 29e:	cf 93       	push	r28
 2a0:	c8 2f       	mov	r28, r24
	NRF24_Buffer[0] = addr_LSB;
 2a2:	80 93 74 00 	sts	0x0074, r24
	memcpy_P(NRF24_Buffer + 1, NRF24_BASE_ADDR, sizeof(NRF24_BASE_ADDR)/sizeof(NRF24_BASE_ADDR[0]));
 2a6:	42 e0       	ldi	r20, 0x02	; 2
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	62 e2       	ldi	r22, 0x22	; 34
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	85 e7       	ldi	r24, 0x75	; 117
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	cc d2       	rcall	.+1432   	; 0x84c <memcpy_P>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_RX_ADDR_P0, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2b4:	43 e0       	ldi	r20, 0x03	; 3
 2b6:	64 e7       	ldi	r22, 0x74	; 116
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	8a e2       	ldi	r24, 0x2A	; 42
 2bc:	72 df       	rcall	.-284    	; 0x1a2 <NRF24_WriteArray>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2be:	43 e0       	ldi	r20, 0x03	; 3
 2c0:	64 e7       	ldi	r22, 0x74	; 116
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	80 e3       	ldi	r24, 0x30	; 48
 2c6:	6d df       	rcall	.-294    	; 0x1a2 <NRF24_WriteArray>
	NRF24_ReadArray(NRF24_CMD_R_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2c8:	43 e0       	ldi	r20, 0x03	; 3
 2ca:	64 e7       	ldi	r22, 0x74	; 116
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	80 e1       	ldi	r24, 0x10	; 16
 2d0:	35 df       	rcall	.-406    	; 0x13c <NRF24_ReadArray>
	return NRF24_Buffer[0] == addr_LSB;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 91 74 00 	lds	r25, 0x0074
 2d8:	9c 13       	cpse	r25, r28
 2da:	80 e0       	ldi	r24, 0x00	; 0
}
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <NRF24_Powerdown>:

void NRF24_Powerdown(void)
{
	NRF24_SET_CE_LOW;
 2e0:	da 98       	cbi	0x1b, 2	; 27
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG); // Power down
 2e2:	6c e7       	ldi	r22, 0x7C	; 124
 2e4:	80 e2       	ldi	r24, 0x20	; 32
 2e6:	4d cf       	rjmp	.-358    	; 0x182 <NRF24_WriteByte>

000002e8 <NRF24_init>:
}

void NRF24_init(uint8_t channel) // After init transmit must be delayed
{
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	18 2f       	mov	r17, r24
	NRF24_SET_CSN_HI;
 2f0:	db 9a       	sbi	0x1b, 3	; 27
 2f2:	c4 e2       	ldi	r28, 0x24	; 36
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i = 0, c, v;
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 2f6:	fe 01       	movw	r30, r28
 2f8:	84 91       	lpm	r24, Z
 2fa:	31 96       	adiw	r30, 0x01	; 1
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 2fc:	64 91       	lpm	r22, Z
		NRF24_WriteByte(c, v); 
 2fe:	41 df       	rcall	.-382    	; 0x182 <NRF24_WriteByte>
 300:	22 96       	adiw	r28, 0x02	; 2
	} while(i < sizeof(NRF24_INIT_DATA));
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	c2 33       	cpi	r28, 0x32	; 50
 306:	df 07       	cpc	r29, r31
 308:	b1 f7       	brne	.-20     	; 0x2f6 <NRF24_init+0xe>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 30a:	61 2f       	mov	r22, r17
 30c:	85 e2       	ldi	r24, 0x25	; 37
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		NRF24_WriteByte(c, v); 
	} while(i < sizeof(NRF24_INIT_DATA));
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 314:	36 cf       	rjmp	.-404    	; 0x182 <NRF24_WriteByte>

00000316 <__vector_11>:

#define SETUP_WATCHDOG WDTCSR = (1<<WDCE) | (1<<WDE); WDTCSR = (1<<WDE) | (0<<WDIE) | (0<<WDP3) | (1<<WDP2) | (1<<WDP1) | (0<<WDP0); //  Watchdog reset 1 s
uint8_t LED_Warning = 0, LED_WarningOnCnt = 0, LED_WarningOffCnt = 0;

ISR(TIM0_OVF_vect) // 0.10035 sec
{
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
	if(++TimerCntSec == 10) { // 1 sec
 32a:	80 91 69 00 	lds	r24, 0x0069
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	80 93 69 00 	sts	0x0069, r24
 334:	8a 30       	cpi	r24, 0x0A	; 10
 336:	49 f4       	brne	.+18     	; 0x34a <__vector_11+0x34>
		TimerCntSec = 0;
 338:	10 92 69 00 	sts	0x0069, r1
		if(RequestCountdown) RequestCountdown--;
 33c:	80 91 60 00 	lds	r24, 0x0060
 340:	88 23       	and	r24, r24
 342:	19 f0       	breq	.+6      	; 0x34a <__vector_11+0x34>
 344:	81 50       	subi	r24, 0x01	; 1
 346:	80 93 60 00 	sts	0x0060, r24
	}
 	if(LED_WarningOnCnt) {
 34a:	80 91 63 00 	lds	r24, 0x0063
 34e:	88 23       	and	r24, r24
 350:	39 f0       	breq	.+14     	; 0x360 <__vector_11+0x4a>
	 	LED1_ON;
 352:	d9 9a       	sbi	0x1b, 1	; 27
	 	LED_WarningOnCnt--;
 354:	80 91 63 00 	lds	r24, 0x0063
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	80 93 63 00 	sts	0x0063, r24
 35e:	1a c0       	rjmp	.+52     	; 0x394 <__vector_11+0x7e>
	} else if(LED_WarningOffCnt) {
 360:	80 91 62 00 	lds	r24, 0x0062
 364:	88 23       	and	r24, r24
 366:	29 f0       	breq	.+10     	; 0x372 <__vector_11+0x5c>
	 	LED1_OFF;
 368:	d9 98       	cbi	0x1b, 1	; 27
	 	LED_WarningOffCnt--;
 36a:	80 91 62 00 	lds	r24, 0x0062
 36e:	81 50       	subi	r24, 0x01	; 1
 370:	0f c0       	rjmp	.+30     	; 0x390 <__vector_11+0x7a>
	} else if(LED_Warning) { // short flashes
 372:	80 91 64 00 	lds	r24, 0x0064
 376:	88 23       	and	r24, r24
 378:	69 f0       	breq	.+26     	; 0x394 <__vector_11+0x7e>
	 	LED_WarningOffCnt = 3;
 37a:	93 e0       	ldi	r25, 0x03	; 3
 37c:	90 93 62 00 	sts	0x0062, r25
	 	LED_WarningOnCnt = 3;
 380:	90 93 63 00 	sts	0x0063, r25
	 	if(--LED_Warning == 0) LED_WarningOffCnt = 5;
 384:	81 50       	subi	r24, 0x01	; 1
 386:	80 93 64 00 	sts	0x0064, r24
 38a:	81 11       	cpse	r24, r1
 38c:	03 c0       	rjmp	.+6      	; 0x394 <__vector_11+0x7e>
 38e:	85 e0       	ldi	r24, 0x05	; 5
 390:	80 93 62 00 	sts	0x0062, r24
 	}
	if(FanSpeed != SpeedSet && setup_mode == 0) {
 394:	80 91 73 00 	lds	r24, 0x0073
 398:	90 91 72 00 	lds	r25, 0x0072
 39c:	89 17       	cp	r24, r25
 39e:	09 f4       	brne	.+2      	; 0x3a2 <__vector_11+0x8c>
 3a0:	6c c0       	rjmp	.+216    	; 0x47a <__vector_11+0x164>
 3a2:	20 91 66 00 	lds	r18, 0x0066
 3a6:	21 11       	cpse	r18, r1
 3a8:	68 c0       	rjmp	.+208    	; 0x47a <__vector_11+0x164>
		if(PressKeyOffTime) {
 3aa:	20 91 6e 00 	lds	r18, 0x006E
 3ae:	22 23       	and	r18, r18
 3b0:	61 f0       	breq	.+24     	; 0x3ca <__vector_11+0xb4>
			if(--PressKeyOffTime == 0) {
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	82 0f       	add	r24, r18
 3b6:	80 93 6e 00 	sts	0x006E, r24
 3ba:	81 11       	cpse	r24, r1
 3bc:	5e c0       	rjmp	.+188    	; 0x47a <__vector_11+0x164>
				KEYS_DDR |= PressKey; // set Out, level 0 - key pressed
 3be:	87 b3       	in	r24, 0x17	; 23
 3c0:	90 91 6f 00 	lds	r25, 0x006F
 3c4:	89 2b       	or	r24, r25
 3c6:	87 bb       	out	0x17, r24	; 23
 3c8:	58 c0       	rjmp	.+176    	; 0x47a <__vector_11+0x164>
			}
		} else if(PressKeyOnTime) {
 3ca:	20 91 6d 00 	lds	r18, 0x006D
 3ce:	22 23       	and	r18, r18
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <__vector_11+0xbe>
 3d2:	3d c0       	rjmp	.+122    	; 0x44e <__vector_11+0x138>
			if(--PressKeyOnTime == 0) {
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	82 0f       	add	r24, r18
 3d8:	80 93 6d 00 	sts	0x006D, r24
 3dc:	81 11       	cpse	r24, r1
 3de:	4d c0       	rjmp	.+154    	; 0x47a <__vector_11+0x164>
				KEYS_DDR &= ~PressKey; // set In - key released
 3e0:	97 b3       	in	r25, 0x17	; 23
 3e2:	80 91 6f 00 	lds	r24, 0x006F
 3e6:	80 95       	com	r24
 3e8:	89 23       	and	r24, r25
 3ea:	87 bb       	out	0x17, r24	; 23
				if(PressKey == KEY_PWR) {
 3ec:	90 91 6f 00 	lds	r25, 0x006F
 3f0:	91 30       	cpi	r25, 0x01	; 1
 3f2:	61 f4       	brne	.+24     	; 0x40c <__vector_11+0xf6>
					FanSpeedOff ^= 1;
 3f4:	80 91 6a 00 	lds	r24, 0x006A
 3f8:	89 27       	eor	r24, r25
 3fa:	80 93 6a 00 	sts	0x006A, r24
					if(FanSpeedOff) {
 3fe:	88 23       	and	r24, r24
 400:	e1 f1       	breq	.+120    	; 0x47a <__vector_11+0x164>
x_off_ok:				FanSpeed = SpeedSet;
 402:	80 91 72 00 	lds	r24, 0x0072
 406:	80 93 73 00 	sts	0x0073, r24
 40a:	37 c0       	rjmp	.+110    	; 0x47a <__vector_11+0x164>
 40c:	80 91 72 00 	lds	r24, 0x0072
					}
				} else {
					if(PressKey == KEY_MINUS) SpeedSet--;
 410:	92 30       	cpi	r25, 0x02	; 2
 412:	11 f4       	brne	.+4      	; 0x418 <__vector_11+0x102>
 414:	81 50       	subi	r24, 0x01	; 1
 416:	01 c0       	rjmp	.+2      	; 0x41a <__vector_11+0x104>
					else SpeedSet++; // PressKey == KEY_PLUS
 418:	8f 5f       	subi	r24, 0xFF	; 255
 41a:	80 93 72 00 	sts	0x0072, r24
					if(SpeedSet < 1) SpeedSet = 1;
 41e:	20 91 72 00 	lds	r18, 0x0072
 422:	12 16       	cp	r1, r18
 424:	24 f0       	brlt	.+8      	; 0x42e <__vector_11+0x118>
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 72 00 	sts	0x0072, r24
 42c:	0c c0       	rjmp	.+24     	; 0x446 <__vector_11+0x130>
					else if(SpeedSet > FanSpeedMax) SpeedSet = FanSpeedMax;
 42e:	40 91 71 00 	lds	r20, 0x0071
 432:	33 27       	eor	r19, r19
 434:	27 fd       	sbrc	r18, 7
 436:	30 95       	com	r19
 438:	84 2f       	mov	r24, r20
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	82 17       	cp	r24, r18
 43e:	93 07       	cpc	r25, r19
 440:	14 f4       	brge	.+4      	; 0x446 <__vector_11+0x130>
 442:	40 93 72 00 	sts	0x0072, r20
					SpeedSetChanged = 1;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	80 93 6c 00 	sts	0x006C, r24
 44c:	16 c0       	rjmp	.+44     	; 0x47a <__vector_11+0x164>
 44e:	20 91 6a 00 	lds	r18, 0x006A
				}
			}
		} else {
			if(FanSpeed <= 0) { // off
 452:	18 16       	cp	r1, r24
 454:	24 f0       	brlt	.+8      	; 0x45e <__vector_11+0x148>
				if(FanSpeedOff) goto x_off_ok; // Already off
 456:	21 11       	cpse	r18, r1
 458:	d4 cf       	rjmp	.-88     	; 0x402 <__vector_11+0xec>
				PressKey = KEY_PWR;
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	07 c0       	rjmp	.+14     	; 0x46c <__vector_11+0x156>
			} else if(FanSpeedOff) { // switch on, and after set speed
 45e:	21 11       	cpse	r18, r1
 460:	fc cf       	rjmp	.-8      	; 0x45a <__vector_11+0x144>
				PressKey = KEY_PWR;
			} else if(FanSpeed < SpeedSet) { // less
 462:	89 17       	cp	r24, r25
 464:	14 f4       	brge	.+4      	; 0x46a <__vector_11+0x154>
				PressKey = KEY_MINUS;
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	01 c0       	rjmp	.+2      	; 0x46c <__vector_11+0x156>
			} else {
				PressKey = KEY_PLUS;
 46a:	84 e0       	ldi	r24, 0x04	; 4
 46c:	80 93 6f 00 	sts	0x006F, r24
			}
			PressKeyOffTime = 2;
 470:	82 e0       	ldi	r24, 0x02	; 2
 472:	80 93 6e 00 	sts	0x006E, r24
			PressKeyOnTime = 2;
 476:	80 93 6d 00 	sts	0x006D, r24
		}
	}
}
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <main>:

int main(void)
{
	CLKPR = (1<<CLKPCE); CLKPR = (0<<CLKPS3) | (0<<CLKPS2) | (1<<CLKPS1) | (1<<CLKPS0); // Clock prescaler: 8
 48e:	80 e8       	ldi	r24, 0x80	; 128
 490:	86 bd       	out	0x26, r24	; 38
 492:	93 e0       	ldi	r25, 0x03	; 3
 494:	96 bd       	out	0x26, r25	; 38
	MCUCR = (1<<SE) | (0<<SM1) | (0<<SM0); // Idle sleep enable
 496:	80 e2       	ldi	r24, 0x20	; 32
 498:	85 bf       	out	0x35, r24	; 53
	KEYS_DDR &= ~(KEY_PWR | KEY_MINUS | KEY_PLUS); // In
 49a:	87 b3       	in	r24, 0x17	; 23
 49c:	88 7f       	andi	r24, 0xF8	; 248
 49e:	87 bb       	out	0x17, r24	; 23
	KEYS_PORT &= ~(KEY_PWR | KEY_MINUS | KEY_PLUS); // = 0
 4a0:	88 b3       	in	r24, 0x18	; 24
 4a2:	88 7f       	andi	r24, 0xF8	; 248
 4a4:	88 bb       	out	0x18, r24	; 24
	DDRA = LED1; // Out
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	8a bb       	out	0x1a, r24	; 26
	PORTA = (1<<PORTA7) | (1<<PORTA0); // pullup not used pins
 4aa:	81 e8       	ldi	r24, 0x81	; 129
 4ac:	8b bb       	out	0x1b, r24	; 27
	NRF24_DDR |= NRF24_CE | NRF24_CSN | NRF24_SCK | NRF24_MOSI; // Out
 4ae:	8a b3       	in	r24, 0x1a	; 26
 4b0:	8c 63       	ori	r24, 0x3C	; 60
 4b2:	8a bb       	out	0x1a, r24	; 26
//	// Timer 8 bit
 	TCCR0A = (1<<WGM01) | (1<<WGM00);  // Timer0: Fast PWM OCRA
 4b4:	90 bf       	out	0x30, r25	; 48
 	TCCR0B = (1<<WGM02) | (1 << CS02) | (0 << CS01) | (1 << CS00); // Timer0 prescaller: 1024
 4b6:	8d e0       	ldi	r24, 0x0D	; 13
 4b8:	83 bf       	out	0x33, r24	; 51
 	TIMSK0 |= (1<<TOIE0); // Timer/Counter0 Overflow Interrupt Enable
 4ba:	89 b7       	in	r24, 0x39	; 57
 4bc:	81 60       	ori	r24, 0x01	; 1
 4be:	89 bf       	out	0x39, r24	; 57
 	OCR0A = 97; // OC0A(TOP)=Fclk/prescaller/Freq - 1; Freq=Fclk/(prescaller*(1+TOP))
 4c0:	81 e6       	ldi	r24, 0x61	; 97
 4c2:	86 bf       	out	0x36, r24	; 54
 	//OCR0B = 0; // 0..OCR0A, Half Duty cycle = ((TOP+1)/2-1)
	//TCCR0A |= (1<<COM0B1); // Start PWM out
	FanSpeedMax = EEPROM_read(EPROM_FanSpeedMax);
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	d1 dd       	rcall	.-1118   	; 0x6a <EEPROM_read>
 4c8:	80 93 71 00 	sts	0x0071, r24
	if(FanSpeedMax == 0xFF) {
 4cc:	8f 3f       	cpi	r24, 0xFF	; 255
 4ce:	91 f4       	brne	.+36     	; 0x4f4 <main+0x66>
		EEPROM_write(EPROM_OSCCAL, OSCCAL);
 4d0:	61 b7       	in	r22, 0x31	; 49
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	d2 dd       	rcall	.-1116   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_CurrentSpeedAddr, EPROM_CurrentSpeedAddr + 1);
 4d6:	61 e8       	ldi	r22, 0x81	; 129
 4d8:	80 e8       	ldi	r24, 0x80	; 128
 4da:	cf dd       	rcall	.-1122   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_CurrentSpeedAddr + 1, 0);
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	81 e8       	ldi	r24, 0x81	; 129
 4e0:	cc dd       	rcall	.-1128   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_FanSpeedMax, 7);
 4e2:	67 e0       	ldi	r22, 0x07	; 7
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	c9 dd       	rcall	.-1134   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_RFAddress, 0xE5);
 4e8:	65 ee       	ldi	r22, 0xE5	; 229
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	c6 dd       	rcall	.-1140   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_RF_Channel, 120);
 4ee:	68 e7       	ldi	r22, 0x78	; 120
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	c3 dd       	rcall	.-1146   	; 0x7a <EEPROM_write>
	}
	//OSCCAL = EEPROM_read(EPROM_OSCCAL);
	uint8_t addr = EEPROM_read(EPROM_CurrentSpeedAddr);
 4f4:	80 e8       	ldi	r24, 0x80	; 128
 4f6:	b9 dd       	rcall	.-1166   	; 0x6a <EEPROM_read>
	if(addr) {
 4f8:	88 23       	and	r24, r24
 4fa:	31 f0       	breq	.+12     	; 0x508 <main+0x7a>
		SpeedSet = FanSpeed = EEPROM_read(addr);
 4fc:	b6 dd       	rcall	.-1172   	; 0x6a <EEPROM_read>
 4fe:	80 93 73 00 	sts	0x0073, r24
 502:	80 93 72 00 	sts	0x0072, r24
 506:	07 c0       	rjmp	.+14     	; 0x516 <main+0x88>
	} else { // Speed not saved - set 1
		SpeedSet = FanSpeedMax;
 508:	80 91 71 00 	lds	r24, 0x0071
 50c:	80 93 72 00 	sts	0x0072, r24
		FanSpeed = 1;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	80 93 73 00 	sts	0x0073, r24
	}
	NRF24_init(EEPROM_read(EPROM_RF_Channel)); // After init transmit must be delayed
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	a8 dd       	rcall	.-1200   	; 0x6a <EEPROM_read>
 51a:	e6 de       	rcall	.-564    	; 0x2e8 <NRF24_init>
	KEYS_INTR_INIT;
 51c:	8b b7       	in	r24, 0x3b	; 59
 51e:	80 62       	ori	r24, 0x20	; 32
 520:	8b bf       	out	0x3b, r24	; 59
 522:	80 b5       	in	r24, 0x20	; 32
 524:	87 60       	ori	r24, 0x07	; 7
 526:	80 bd       	out	0x20, r24	; 32
	SETUP_WATCHDOG;
 528:	88 e1       	ldi	r24, 0x18	; 24
 52a:	81 bd       	out	0x21, r24	; 33
 52c:	8e e0       	ldi	r24, 0x0E	; 14
 52e:	81 bd       	out	0x21, r24	; 33
	sei();
 530:	78 94       	sei
 	while(!NRF24_SetAddresses(EEPROM_read(EPROM_RFAddress))) {
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	9a dd       	rcall	.-1228   	; 0x6a <EEPROM_read>
 536:	b3 de       	rcall	.-666    	; 0x29e <NRF24_SetAddresses>
 538:	81 11       	cpse	r24, r1
 53a:	05 c0       	rjmp	.+10     	; 0x546 <main+0xb8>
 		FlashLED(1, 50, 20);
 53c:	44 e1       	ldi	r20, 0x14	; 20
 53e:	62 e3       	ldi	r22, 0x32	; 50
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	d9 dd       	rcall	.-1102   	; 0xf6 <FlashLED>
 544:	f6 cf       	rjmp	.-20     	; 0x532 <main+0xa4>
					LED1_ON;
					Delay100ms(10);
					while(keys) {
						wdt_reset(); // wait keys release
						if((keys & KEY_MINUS) && (keys & KEY_PLUS)) {
							setup_mode = 1;
 546:	11 e0       	ldi	r17, 0x01	; 1
 548:	c1 e0       	ldi	r28, 0x01	; 1
							FlashLED(5, 2, 2);
							Delay100ms(30);
							RequestCountdown = 30;
 54a:	de e1       	ldi	r29, 0x1E	; 30
x_save_speed:
				if(EEPROM_read(addr) != SpeedSet) {
					EEPROM_write(addr, SpeedSet);
					if(EEPROM_read(addr) != SpeedSet) { // EEPROM cell broken
						FlashLED(10, 2, 2);
						send_data = 0xEE;
 54c:	0e ee       	ldi	r16, 0xEE	; 238
 		FlashLED(1, 50, 20);
 	}
	while(1)
	{
		__asm__ volatile ("" ::: "memory"); // Need memory barrier
		sleep_cpu();
 54e:	88 95       	sleep
		wdt_reset();
 550:	a8 95       	wdr
		if(keys) {
 552:	80 91 70 00 	lds	r24, 0x0070
 556:	88 23       	and	r24, r24
 558:	09 f4       	brne	.+2      	; 0x55c <main+0xce>
 55a:	d5 c0       	rjmp	.+426    	; 0x706 <main+0x278>
			if(keys & KEY_PWR) {
 55c:	80 91 70 00 	lds	r24, 0x0070
 560:	80 ff       	sbrs	r24, 0
 562:	0e c0       	rjmp	.+28     	; 0x580 <main+0xf2>
				FanSpeedOff ^= 1;
 564:	80 91 6a 00 	lds	r24, 0x006A
 568:	81 27       	eor	r24, r17
 56a:	80 93 6a 00 	sts	0x006A, r24
				if(FanSpeedOff == 0 && setup_mode) setup_mode = 0;
 56e:	81 11       	cpse	r24, r1
 570:	05 c0       	rjmp	.+10     	; 0x57c <main+0xee>
 572:	80 91 66 00 	lds	r24, 0x0066
 576:	81 11       	cpse	r24, r1
 578:	10 92 66 00 	sts	0x0066, r1
				SendOffStatus = 1;
 57c:	c0 93 68 00 	sts	0x0068, r28
			}
			if(FanSpeedOff == 0) {
 580:	80 91 6a 00 	lds	r24, 0x006A
 584:	81 11       	cpse	r24, r1
 586:	52 c0       	rjmp	.+164    	; 0x62c <main+0x19e>
				if(keys & KEY_MINUS) {
 588:	80 91 70 00 	lds	r24, 0x0070
 58c:	81 ff       	sbrs	r24, 1
 58e:	19 c0       	rjmp	.+50     	; 0x5c2 <main+0x134>
					if(FanSpeedOverride > -8) {
 590:	80 91 6b 00 	lds	r24, 0x006B
 594:	89 3f       	cpi	r24, 0xF9	; 249
 596:	ac f0       	brlt	.+42     	; 0x5c2 <main+0x134>
						FanSpeedOverride--;
 598:	81 50       	subi	r24, 0x01	; 1
 59a:	80 93 6b 00 	sts	0x006B, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 59e:	f8 94       	cli
 5a0:	80 91 73 00 	lds	r24, 0x0073
 5a4:	90 91 72 00 	lds	r25, 0x0072
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							if(FanSpeed > 1) FanSpeed--;
 5a8:	82 30       	cpi	r24, 0x02	; 2
 5aa:	0c f0       	brlt	.+2      	; 0x5ae <main+0x120>
 5ac:	81 50       	subi	r24, 0x01	; 1
 5ae:	80 93 73 00 	sts	0x0073, r24
							if(SpeedSet > 1) SpeedSet--;
 5b2:	92 30       	cpi	r25, 0x02	; 2
 5b4:	24 f4       	brge	.+8      	; 0x5be <main+0x130>
 5b6:	90 93 72 00 	sts	0x0072, r25
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 5ba:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <main+0x134>
 5be:	91 50       	subi	r25, 0x01	; 1
 5c0:	fa cf       	rjmp	.-12     	; 0x5b6 <main+0x128>
						}
					}
				}
				if(keys & KEY_PLUS) {
 5c2:	80 91 70 00 	lds	r24, 0x0070
 5c6:	82 ff       	sbrs	r24, 2
 5c8:	90 c0       	rjmp	.+288    	; 0x6ea <main+0x25c>
					if(FanSpeedOverride < 7) {
 5ca:	80 91 6b 00 	lds	r24, 0x006B
 5ce:	87 30       	cpi	r24, 0x07	; 7
 5d0:	0c f0       	brlt	.+2      	; 0x5d4 <main+0x146>
 5d2:	8b c0       	rjmp	.+278    	; 0x6ea <main+0x25c>
						FanSpeedOverride++;
 5d4:	8f 5f       	subi	r24, 0xFF	; 255
 5d6:	80 93 6b 00 	sts	0x006B, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5da:	f8 94       	cli
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							if(FanSpeed < FanSpeedMax) FanSpeed++;
 5dc:	80 91 71 00 	lds	r24, 0x0071
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	40 91 73 00 	lds	r20, 0x0073
 5e6:	50 91 72 00 	lds	r21, 0x0072
					}
				}
				if(keys & KEY_PLUS) {
					if(FanSpeedOverride < 7) {
						FanSpeedOverride++;
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
 5ea:	21 e0       	ldi	r18, 0x01	; 1
 5ec:	65 2f       	mov	r22, r21
 5ee:	22 23       	and	r18, r18
 5f0:	c1 f0       	breq	.+48     	; 0x622 <main+0x194>
							if(FanSpeed < FanSpeedMax) FanSpeed++;
 5f2:	24 2f       	mov	r18, r20
 5f4:	33 27       	eor	r19, r19
 5f6:	27 fd       	sbrc	r18, 7
 5f8:	30 95       	com	r19
 5fa:	28 17       	cp	r18, r24
 5fc:	39 07       	cpc	r19, r25
 5fe:	0c f4       	brge	.+2      	; 0x602 <main+0x174>
 600:	4f 5f       	subi	r20, 0xFF	; 255
 602:	5f 5f       	subi	r21, 0xFF	; 255
							if(SpeedSet < FanSpeedMax) SpeedSet++;
 604:	26 2f       	mov	r18, r22
 606:	33 27       	eor	r19, r19
 608:	27 fd       	sbrc	r18, 7
 60a:	30 95       	com	r19
 60c:	28 17       	cp	r18, r24
 60e:	39 07       	cpc	r19, r25
 610:	34 f0       	brlt	.+12     	; 0x61e <main+0x190>
 612:	40 93 73 00 	sts	0x0073, r20
 616:	60 93 72 00 	sts	0x0072, r22
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 61a:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 61c:	66 c0       	rjmp	.+204    	; 0x6ea <main+0x25c>
					}
				}
				if(keys & KEY_PLUS) {
					if(FanSpeedOverride < 7) {
						FanSpeedOverride++;
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
 61e:	20 e0       	ldi	r18, 0x00	; 0
 620:	e5 cf       	rjmp	.-54     	; 0x5ec <main+0x15e>
 622:	40 93 73 00 	sts	0x0073, r20
 626:	50 93 72 00 	sts	0x0072, r21
 62a:	f7 cf       	rjmp	.-18     	; 0x61a <main+0x18c>
							if(FanSpeed < FanSpeedMax) FanSpeed++;
							if(SpeedSet < FanSpeedMax) SpeedSet++;
						}
					}
				}
			} else if(setup_mode) {
 62c:	80 91 66 00 	lds	r24, 0x0066
 630:	88 23       	and	r24, r24
 632:	79 f1       	breq	.+94     	; 0x692 <main+0x204>
				if(keys & KEY_MINUS) {
 634:	80 91 70 00 	lds	r24, 0x0070
 638:	81 ff       	sbrs	r24, 1
 63a:	05 c0       	rjmp	.+10     	; 0x646 <main+0x1b8>
					SpeedSet--;
 63c:	80 91 72 00 	lds	r24, 0x0072
 640:	81 50       	subi	r24, 0x01	; 1
 642:	80 93 72 00 	sts	0x0072, r24
				}
				if(keys & KEY_PLUS) {
 646:	80 91 70 00 	lds	r24, 0x0070
 64a:	82 ff       	sbrs	r24, 2
 64c:	05 c0       	rjmp	.+10     	; 0x658 <main+0x1ca>
					SpeedSet++;
 64e:	80 91 72 00 	lds	r24, 0x0072
 652:	8f 5f       	subi	r24, 0xFF	; 255
 654:	80 93 72 00 	sts	0x0072, r24
				}
				if(SpeedSet < 1) SpeedSet = 1;
 658:	20 91 72 00 	lds	r18, 0x0072
 65c:	12 16       	cp	r1, r18
 65e:	1c f0       	brlt	.+6      	; 0x666 <main+0x1d8>
 660:	c0 93 72 00 	sts	0x0072, r28
 664:	0c c0       	rjmp	.+24     	; 0x67e <main+0x1f0>
				else if(SpeedSet > FanSpeedMax) SpeedSet = FanSpeedMax;
 666:	40 91 71 00 	lds	r20, 0x0071
 66a:	33 27       	eor	r19, r19
 66c:	27 fd       	sbrc	r18, 7
 66e:	30 95       	com	r19
 670:	84 2f       	mov	r24, r20
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	82 17       	cp	r24, r18
 676:	93 07       	cpc	r25, r19
 678:	14 f4       	brge	.+4      	; 0x67e <main+0x1f0>
 67a:	40 93 72 00 	sts	0x0072, r20
				FlashLED(SpeedSet, 5, 5);
 67e:	45 e0       	ldi	r20, 0x05	; 5
 680:	65 e0       	ldi	r22, 0x05	; 5
 682:	80 91 72 00 	lds	r24, 0x0072
 686:	37 dd       	rcall	.-1426   	; 0xf6 <FlashLED>
				RequestCountdown = 30;
 688:	d0 93 60 00 	sts	0x0060, r29
				SpeedSetChanged = 1;
 68c:	c0 93 6c 00 	sts	0x006C, r28
 690:	2c c0       	rjmp	.+88     	; 0x6ea <main+0x25c>
			} else if((keys & KEY_MINUS) || (keys & KEY_PLUS)) {
 692:	80 91 70 00 	lds	r24, 0x0070
 696:	81 fd       	sbrc	r24, 1
 698:	04 c0       	rjmp	.+8      	; 0x6a2 <main+0x214>
 69a:	80 91 70 00 	lds	r24, 0x0070
 69e:	82 ff       	sbrs	r24, 2
 6a0:	24 c0       	rjmp	.+72     	; 0x6ea <main+0x25c>
				if(PressKeyOnTime == 0 && PressKeyOffTime == 0) { // not in changing process
 6a2:	80 91 6d 00 	lds	r24, 0x006D
 6a6:	81 11       	cpse	r24, r1
 6a8:	20 c0       	rjmp	.+64     	; 0x6ea <main+0x25c>
 6aa:	80 91 6e 00 	lds	r24, 0x006E
 6ae:	81 11       	cpse	r24, r1
 6b0:	1c c0       	rjmp	.+56     	; 0x6ea <main+0x25c>
					LED1_ON;
 6b2:	d9 9a       	sbi	0x1b, 1	; 27
					Delay100ms(10);
 6b4:	8a e0       	ldi	r24, 0x0A	; 10
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	12 dd       	rcall	.-1500   	; 0xde <Delay100ms>
					while(keys) {
 6ba:	80 91 70 00 	lds	r24, 0x0070
 6be:	88 23       	and	r24, r24
 6c0:	a1 f0       	breq	.+40     	; 0x6ea <main+0x25c>
						wdt_reset(); // wait keys release
 6c2:	a8 95       	wdr
						if((keys & KEY_MINUS) && (keys & KEY_PLUS)) {
 6c4:	80 91 70 00 	lds	r24, 0x0070
 6c8:	81 ff       	sbrs	r24, 1
 6ca:	f7 cf       	rjmp	.-18     	; 0x6ba <main+0x22c>
 6cc:	80 91 70 00 	lds	r24, 0x0070
 6d0:	82 ff       	sbrs	r24, 2
 6d2:	f3 cf       	rjmp	.-26     	; 0x6ba <main+0x22c>
							setup_mode = 1;
 6d4:	c0 93 66 00 	sts	0x0066, r28
							FlashLED(5, 2, 2);
 6d8:	42 e0       	ldi	r20, 0x02	; 2
 6da:	62 e0       	ldi	r22, 0x02	; 2
 6dc:	85 e0       	ldi	r24, 0x05	; 5
 6de:	0b dd       	rcall	.-1514   	; 0xf6 <FlashLED>
							Delay100ms(30);
 6e0:	8e e1       	ldi	r24, 0x1E	; 30
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	fc dc       	rcall	.-1544   	; 0xde <Delay100ms>
							RequestCountdown = 30;
 6e6:	d0 93 60 00 	sts	0x0060, r29
							break;
						}
					}
				}
			}
			LED1_ON;
 6ea:	d9 9a       	sbi	0x1b, 1	; 27
			while(keys) wdt_reset(); // wait keys release
 6ec:	80 91 70 00 	lds	r24, 0x0070
 6f0:	88 23       	and	r24, r24
 6f2:	11 f0       	breq	.+4      	; 0x6f8 <main+0x26a>
 6f4:	a8 95       	wdr
 6f6:	fa cf       	rjmp	.-12     	; 0x6ec <main+0x25e>
 6f8:	8b e4       	ldi	r24, 0x4B	; 75
 6fa:	9d e1       	ldi	r25, 0x1D	; 29
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <main+0x26e>
 700:	00 c0       	rjmp	.+0      	; 0x702 <main+0x274>
 702:	00 00       	nop
			_delay_ms(30);
			LED1_OFF;
 704:	d9 98       	cbi	0x1b, 1	; 27
		}
		__asm__ volatile ("" ::: "memory"); // Need memory barrier
		if(SpeedSetChanged) {
 706:	80 91 6c 00 	lds	r24, 0x006C
 70a:	88 23       	and	r24, r24
 70c:	91 f1       	breq	.+100    	; 0x772 <main+0x2e4>
			uint8_t addr = EEPROM_read(EPROM_CurrentSpeedAddr);
 70e:	80 e8       	ldi	r24, 0x80	; 128
 710:	ac dc       	rcall	.-1704   	; 0x6a <EEPROM_read>
 712:	f8 2e       	mov	r15, r24
			if(addr) {
 714:	88 23       	and	r24, r24
 716:	59 f1       	breq	.+86     	; 0x76e <main+0x2e0>
x_save_speed:
				if(EEPROM_read(addr) != SpeedSet) {
 718:	8f 2d       	mov	r24, r15
 71a:	a7 dc       	rcall	.-1714   	; 0x6a <EEPROM_read>
 71c:	60 91 72 00 	lds	r22, 0x0072
 720:	48 2f       	mov	r20, r24
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	26 2f       	mov	r18, r22
 726:	33 27       	eor	r19, r19
 728:	27 fd       	sbrc	r18, 7
 72a:	30 95       	com	r19
 72c:	42 17       	cp	r20, r18
 72e:	53 07       	cpc	r21, r19
 730:	f1 f0       	breq	.+60     	; 0x76e <main+0x2e0>
					EEPROM_write(addr, SpeedSet);
 732:	8f 2d       	mov	r24, r15
 734:	a2 dc       	rcall	.-1724   	; 0x7a <EEPROM_write>
					if(EEPROM_read(addr) != SpeedSet) { // EEPROM cell broken
 736:	8f 2d       	mov	r24, r15
 738:	98 dc       	rcall	.-1744   	; 0x6a <EEPROM_read>
 73a:	48 2f       	mov	r20, r24
 73c:	50 e0       	ldi	r21, 0x00	; 0
 73e:	20 91 72 00 	lds	r18, 0x0072
 742:	33 27       	eor	r19, r19
 744:	27 fd       	sbrc	r18, 7
 746:	30 95       	com	r19
 748:	42 17       	cp	r20, r18
 74a:	53 07       	cpc	r21, r19
 74c:	81 f0       	breq	.+32     	; 0x76e <main+0x2e0>
						FlashLED(10, 2, 2);
 74e:	42 e0       	ldi	r20, 0x02	; 2
 750:	62 e0       	ldi	r22, 0x02	; 2
 752:	8a e0       	ldi	r24, 0x0A	; 10
 754:	d0 dc       	rcall	.-1632   	; 0xf6 <FlashLED>
						send_data = 0xEE;
 756:	00 93 65 00 	sts	0x0065, r16
						EEPROM_write(EPROM_CurrentSpeedAddr, ++addr);
 75a:	f3 94       	inc	r15
 75c:	6f 2d       	mov	r22, r15
 75e:	80 e8       	ldi	r24, 0x80	; 128
 760:	8c dc       	rcall	.-1768   	; 0x7a <EEPROM_write>
						if(addr == 0) { // memory ends
 762:	f1 10       	cpse	r15, r1
 764:	d9 cf       	rjmp	.-78     	; 0x718 <main+0x28a>
							FlashLED(10, 2, 2);
 766:	42 e0       	ldi	r20, 0x02	; 2
 768:	62 e0       	ldi	r22, 0x02	; 2
 76a:	8a e0       	ldi	r24, 0x0A	; 10
 76c:	c4 dc       	rcall	.-1656   	; 0xf6 <FlashLED>
							goto x_save_speed;
						}
					}
				}
			}
			SpeedSetChanged = 0;
 76e:	10 92 6c 00 	sts	0x006C, r1
		}
		if(RequestCountdown == 0) {
 772:	80 91 60 00 	lds	r24, 0x0060
 776:	81 11       	cpse	r24, r1
 778:	ea ce       	rjmp	.-556    	; 0x54e <main+0xc0>
			if(setup_mode == 0) {
 77a:	80 91 66 00 	lds	r24, 0x0066
 77e:	81 11       	cpse	r24, r1
 780:	62 c0       	rjmp	.+196    	; 0x846 <main+0x3b8>
				if(1) {
				//if(FanSpeedOff == 0 || SendOffStatus == 1) {
					if(send_data != 0xEE) send_data = (nrf_last_status << 5) | (FanSpeedOff << 4) | (FanSpeedOverride & 0x0F); // 11123333
 782:	80 91 65 00 	lds	r24, 0x0065
 786:	20 91 6a 00 	lds	r18, 0x006A
 78a:	8e 3e       	cpi	r24, 0xEE	; 238
 78c:	79 f0       	breq	.+30     	; 0x7ac <main+0x31e>
 78e:	90 91 67 00 	lds	r25, 0x0067
 792:	92 95       	swap	r25
 794:	99 0f       	add	r25, r25
 796:	90 7e       	andi	r25, 0xE0	; 224
 798:	82 2f       	mov	r24, r18
 79a:	82 95       	swap	r24
 79c:	80 7f       	andi	r24, 0xF0	; 240
 79e:	89 2b       	or	r24, r25
 7a0:	90 91 6b 00 	lds	r25, 0x006B
 7a4:	9f 70       	andi	r25, 0x0F	; 15
 7a6:	89 2b       	or	r24, r25
 7a8:	80 93 65 00 	sts	0x0065, r24
					
					if(FanSpeedOff) send_data = NRF24_SendCommand(NRF24_CMD_NOP);
 7ac:	22 23       	and	r18, r18
 7ae:	11 f0       	breq	.+4      	; 0x7b4 <main+0x326>
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	05 c0       	rjmp	.+10     	; 0x7be <main+0x330>
					else if(FanSpeedOverride == 1) send_data = NRF24_SendCommand(NRF24_CMD_R_REGISTER | NRF24_REG_FIFO_STATUS);
 7b4:	80 91 6b 00 	lds	r24, 0x006B
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	21 f4       	brne	.+8      	; 0x7c4 <main+0x336>
 7bc:	87 e1       	ldi	r24, 0x17	; 23
 7be:	13 dd       	rcall	.-1498   	; 0x1e6 <NRF24_SendCommand>
 7c0:	80 93 65 00 	sts	0x0065, r24
					
					NRF24_Buffer[0] = send_data;
 7c4:	80 91 65 00 	lds	r24, 0x0065
 7c8:	80 93 74 00 	sts	0x0074, r24
					NRF24_SetMode(NRF24_TransmitMode);
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	0f dd       	rcall	.-1506   	; 0x1ee <NRF24_SetMode>
					nrf_last_status = NRF24_TransmitShockBurst(1, sizeof(master_data)); // Enhanced ShockBurst, ACK with payload
 7d0:	64 e0       	ldi	r22, 0x04	; 4
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	1a dd       	rcall	.-1484   	; 0x20a <NRF24_TransmitShockBurst>
 7d6:	80 93 67 00 	sts	0x0067, r24
					if(nrf_last_status) { // some problem
 7da:	88 23       	and	r24, r24
 7dc:	39 f0       	breq	.+14     	; 0x7ec <main+0x35e>
						LED_Warning = nrf_last_status;
 7de:	80 93 64 00 	sts	0x0064, r24
						RequestCountdown = EEPROM_read(EPROM_PauseWhenError); // sec
 7e2:	84 e0       	ldi	r24, 0x04	; 4
 7e4:	42 dc       	rcall	.-1916   	; 0x6a <EEPROM_read>
 7e6:	80 93 60 00 	sts	0x0060, r24
 7ea:	23 c0       	rjmp	.+70     	; 0x832 <main+0x3a4>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 7ec:	f8 94       	cli
					} else {
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							FanSpeed = ((master_data*) NRF24_Buffer)->FanSpeed + FanSpeedOverride;
 7ee:	20 91 6b 00 	lds	r18, 0x006B
 7f2:	80 91 76 00 	lds	r24, 0x0076
 7f6:	28 0f       	add	r18, r24
 7f8:	20 93 73 00 	sts	0x0073, r18
							if(FanSpeed < 0) FanSpeed = 0; // off
 7fc:	27 ff       	sbrs	r18, 7
 7fe:	03 c0       	rjmp	.+6      	; 0x806 <main+0x378>
 800:	10 92 73 00 	sts	0x0073, r1
 804:	0c c0       	rjmp	.+24     	; 0x81e <main+0x390>
							else if(FanSpeed > FanSpeedMax) FanSpeed = FanSpeedMax;
 806:	40 91 71 00 	lds	r20, 0x0071
 80a:	33 27       	eor	r19, r19
 80c:	27 fd       	sbrc	r18, 7
 80e:	30 95       	com	r19
 810:	84 2f       	mov	r24, r20
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	82 17       	cp	r24, r18
 816:	93 07       	cpc	r25, r19
 818:	14 f4       	brge	.+4      	; 0x81e <main+0x390>
 81a:	40 93 73 00 	sts	0x0073, r20
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 81e:	78 94       	sei
						}
						RequestCountdown = ((master_data*) NRF24_Buffer)->Pause;
 820:	80 91 77 00 	lds	r24, 0x0077
 824:	80 93 60 00 	sts	0x0060, r24
						FlashLED(FanSpeed, 5, 10);
 828:	4a e0       	ldi	r20, 0x0A	; 10
 82a:	65 e0       	ldi	r22, 0x05	; 5
 82c:	80 91 73 00 	lds	r24, 0x0073
 830:	62 dc       	rcall	.-1852   	; 0xf6 <FlashLED>
					}
					if(nrf_last_status <= 1) { // Status was send successfully
 832:	80 91 67 00 	lds	r24, 0x0067
 836:	82 30       	cpi	r24, 0x02	; 2
 838:	20 f4       	brcc	.+8      	; 0x842 <main+0x3b4>
						SendOffStatus = 0;
 83a:	10 92 68 00 	sts	0x0068, r1
						send_data = 0;
 83e:	10 92 65 00 	sts	0x0065, r1
					}
					NRF24_Powerdown();
 842:	4e dd       	rcall	.-1380   	; 0x2e0 <NRF24_Powerdown>
 844:	84 ce       	rjmp	.-760    	; 0x54e <main+0xc0>
				} else {
					RequestCountdown = 1; // sec
				}
			} else { // setup mode timeout
				setup_mode = 0;
 846:	10 92 66 00 	sts	0x0066, r1
 84a:	81 ce       	rjmp	.-766    	; 0x54e <main+0xc0>

0000084c <memcpy_P>:
 84c:	fb 01       	movw	r30, r22
 84e:	dc 01       	movw	r26, r24
 850:	02 c0       	rjmp	.+4      	; 0x856 <memcpy_P+0xa>
 852:	05 90       	lpm	r0, Z+
 854:	0d 92       	st	X+, r0
 856:	41 50       	subi	r20, 0x01	; 1
 858:	50 40       	sbci	r21, 0x00	; 0
 85a:	d8 f7       	brcc	.-10     	; 0x852 <memcpy_P+0x6>
 85c:	08 95       	ret

0000085e <_exit>:
 85e:	f8 94       	cli

00000860 <__stop_program>:
 860:	ff cf       	rjmp	.-2      	; 0x860 <__stop_program>
