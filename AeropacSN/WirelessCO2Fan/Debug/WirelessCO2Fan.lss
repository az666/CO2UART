
WirelessCO2Fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000091a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000091a  000009ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800062  00800062  000009b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001291  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000303  00000000  00000000  00001d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000685  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b8  00000000  00000000  000026d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ff  00000000  00000000  0000298c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ddc  00000000  00000000  00002e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00003c67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	18 c0       	rjmp	.+48     	; 0x32 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__bad_interrupt>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__bad_interrupt>
   6:	45 c0       	rjmp	.+138    	; 0x92 <__vector_3>
   8:	2f c0       	rjmp	.+94     	; 0x68 <__bad_interrupt>
   a:	2e c0       	rjmp	.+92     	; 0x68 <__bad_interrupt>
   c:	2d c0       	rjmp	.+90     	; 0x68 <__bad_interrupt>
   e:	2c c0       	rjmp	.+88     	; 0x68 <__bad_interrupt>
  10:	2b c0       	rjmp	.+86     	; 0x68 <__bad_interrupt>
  12:	2a c0       	rjmp	.+84     	; 0x68 <__bad_interrupt>
  14:	29 c0       	rjmp	.+82     	; 0x68 <__bad_interrupt>
  16:	7f c1       	rjmp	.+766    	; 0x316 <__vector_11>
  18:	27 c0       	rjmp	.+78     	; 0x68 <__bad_interrupt>
  1a:	26 c0       	rjmp	.+76     	; 0x68 <__bad_interrupt>
  1c:	25 c0       	rjmp	.+74     	; 0x68 <__bad_interrupt>
  1e:	24 c0       	rjmp	.+72     	; 0x68 <__bad_interrupt>
  20:	23 c0       	rjmp	.+70     	; 0x68 <__bad_interrupt>

00000022 <NRF24_BASE_ADDR>:
  22:	c8 c8                                               ..

00000024 <NRF24_INIT_DATA>:
  24:	26 07 23 01 24 73 3d 06 21 01 22 01 3c 01           &.#.$s=.!.".<.

00000032 <__ctors_end>:
  32:	11 24       	eor	r1, r1
  34:	1f be       	out	0x3f, r1	; 63
  36:	cf e5       	ldi	r28, 0x5F	; 95
  38:	d1 e0       	ldi	r29, 0x01	; 1
  3a:	de bf       	out	0x3e, r29	; 62
  3c:	cd bf       	out	0x3d, r28	; 61

0000003e <__do_copy_data>:
  3e:	10 e0       	ldi	r17, 0x00	; 0
  40:	a0 e6       	ldi	r26, 0x60	; 96
  42:	b0 e0       	ldi	r27, 0x00	; 0
  44:	ea e1       	ldi	r30, 0x1A	; 26
  46:	f9 e0       	ldi	r31, 0x09	; 9
  48:	02 c0       	rjmp	.+4      	; 0x4e <__SREG__+0xf>
  4a:	05 90       	lpm	r0, Z+
  4c:	0d 92       	st	X+, r0
  4e:	a2 36       	cpi	r26, 0x62	; 98
  50:	b1 07       	cpc	r27, r17
  52:	d9 f7       	brne	.-10     	; 0x4a <__SREG__+0xb>

00000054 <__do_clear_bss>:
  54:	20 e0       	ldi	r18, 0x00	; 0
  56:	a2 e6       	ldi	r26, 0x62	; 98
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	01 c0       	rjmp	.+2      	; 0x5e <.do_clear_bss_start>

0000005c <.do_clear_bss_loop>:
  5c:	1d 92       	st	X+, r1

0000005e <.do_clear_bss_start>:
  5e:	a9 37       	cpi	r26, 0x79	; 121
  60:	b2 07       	cpc	r27, r18
  62:	e1 f7       	brne	.-8      	; 0x5c <.do_clear_bss_loop>
  64:	70 d2       	rcall	.+1248   	; 0x546 <main>
  66:	57 c4       	rjmp	.+2222   	; 0x916 <_exit>

00000068 <__bad_interrupt>:
  68:	cb cf       	rjmp	.-106    	; 0x0 <__vectors>

0000006a <EEPROM_read>:
	Delay100ms(20);
}

static uint8_t EEPROM_read(uint8_t ucAddress) // ATtiny24A/44A only!
{
	while(EECR & (1<<EEPE)) ; // EEWE
  6a:	e1 99       	sbic	0x1c, 1	; 28
  6c:	fe cf       	rjmp	.-4      	; 0x6a <EEPROM_read>
	EEAR = ucAddress;
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	9f bb       	out	0x1f, r25	; 31
  72:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
  74:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
  76:	8d b3       	in	r24, 0x1d	; 29
}
  78:	08 95       	ret

0000007a <EEPROM_write>:
static void EEPROM_write(uint8_t ucAddress, uint8_t ucData) // ATtiny24A/44A only!
{
	while(EECR & (1<<EEPE)) ; // EEWE
  7a:	e1 99       	sbic	0x1c, 1	; 28
  7c:	fe cf       	rjmp	.-4      	; 0x7a <EEPROM_write>
	cli();
  7e:	f8 94       	cli
	EECR = (0<<EEPM1)|(0<<EEPM0);
  80:	1c ba       	out	0x1c, r1	; 28
	EEAR = ucAddress;
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	9f bb       	out	0x1f, r25	; 31
  86:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  88:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMPE); //(1<<EEMWE);
  8a:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEPE); //(1<<EEWE);
  8c:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
  8e:	78 94       	sei
  90:	08 95       	ret

00000092 <__vector_3>:
#define KEYS_INTR_INIT				GIMSK |= (1<<PCIE1); PCMSK1 |= (1<<PCINT10) | (1<<PCINT9) | (1<<PCINT8)  // PCINT8..10
volatile uint8_t keys				= 0;
uint8_t PressKey					= 0;	
uint8_t PressKeyOffTime				= 0; // *0.1 sec
uint8_t PressKeyOnTime				= 0; // *0.1 sec
ISR(PCINT1_vect) {
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	if(PressKeyOnTime == 0 && PressKeyOffTime == 0) { // not in changing process
  9e:	80 91 6e 00 	lds	r24, 0x006E
  a2:	81 11       	cpse	r24, r1
  a4:	0a c0       	rjmp	.+20     	; 0xba <__vector_3+0x28>
  a6:	80 91 6f 00 	lds	r24, 0x006F
  aa:	81 11       	cpse	r24, r1
  ac:	06 c0       	rjmp	.+12     	; 0xba <__vector_3+0x28>
		keys = (~KEYS_PIN) & (KEY_PWR | KEY_MINUS | KEY_PLUS);
  ae:	86 b3       	in	r24, 0x16	; 22
  b0:	80 95       	com	r24
  b2:	87 70       	andi	r24, 0x07	; 7
  b4:	80 93 71 00 	sts	0x0071, r24
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__vector_3+0x2c>
	} else keys = 0;
  ba:	10 92 71 00 	sts	0x0071, r1
}
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <Delay10us>:

#define FLAG_LowLight				0x01

#if(1)
void Delay10us(uint8_t ms) {
	while(ms-- > 0) _delay_us(10); wdt_reset();
  ca:	88 23       	and	r24, r24
  cc:	31 f0       	breq	.+12     	; 0xda <Delay10us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	93 e0       	ldi	r25, 0x03	; 3
  d0:	9a 95       	dec	r25
  d2:	f1 f7       	brne	.-4      	; 0xd0 <Delay10us+0x6>
  d4:	00 00       	nop
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	f8 cf       	rjmp	.-16     	; 0xca <Delay10us>
  da:	a8 95       	wdr
  dc:	08 95       	ret

000000de <Delay100ms>:
	while(ms-- > 0) {
		_delay_ms(1); wdt_reset();
	}
}
void Delay100ms(unsigned int ms) {
	while(ms-- > 0) {
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	49 f0       	breq	.+18     	; 0xf4 <Delay100ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	e7 ea       	ldi	r30, 0xA7	; 167
  e4:	f1 e6       	ldi	r31, 0x61	; 97
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <Delay100ms+0x8>
  ea:	00 c0       	rjmp	.+0      	; 0xec <Delay100ms+0xe>
  ec:	00 00       	nop
		_delay_ms(100); wdt_reset();
  ee:	a8 95       	wdr
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f5 cf       	rjmp	.-22     	; 0xde <Delay100ms>
	}
}
  f4:	08 95       	ret

000000f6 <FlashLED>:

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	while (num-- > 0) {
 100:	f8 2e       	mov	r15, r24
		LED1_OFF;
		Delay100ms(toff);
 102:	06 2f       	mov	r16, r22
 104:	10 e0       	ldi	r17, 0x00	; 0
		LED1_ON;
		Delay100ms(ton);
 106:	c4 2f       	mov	r28, r20
 108:	d0 e0       	ldi	r29, 0x00	; 0
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
		LED1_OFF;
 10a:	d9 98       	cbi	0x1b, 1	; 27
		_delay_ms(100); wdt_reset();
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
 10c:	ff 20       	and	r15, r15
 10e:	39 f0       	breq	.+14     	; 0x11e <FlashLED+0x28>
		LED1_OFF;
		Delay100ms(toff);
 110:	c8 01       	movw	r24, r16
 112:	e5 df       	rcall	.-54     	; 0xde <Delay100ms>
		LED1_ON;
 114:	d9 9a       	sbi	0x1b, 1	; 27
		Delay100ms(ton);
 116:	ce 01       	movw	r24, r28
 118:	e2 df       	rcall	.-60     	; 0xde <Delay100ms>
 11a:	fa 94       	dec	r15
 11c:	f6 cf       	rjmp	.-20     	; 0x10a <FlashLED+0x14>
	}
	LED1_OFF;
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	08 95       	ret

0000012a <SPI_WriteReadByte>:
	NRF24_CMD_W_REGISTER | NRF24_REG_DYNPD,		0b000001 // Dynamic payload
};
const uint8_t NRF24_BASE_ADDR[] PROGMEM = { 0xC8, 0xC8 }; // Address MSBs: 2..3

uint8_t SPI_WriteReadByte(uint8_t data) {
	USIDR = data;
 12a:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); // clear overflow flag
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	8e b9       	out	0x0e, r24	; 14
	do {
		USICR = (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);
 130:	8b e1       	ldi	r24, 0x1B	; 27
 132:	8d b9       	out	0x0d, r24	; 13
	} while((USISR & (1<<USIOIF)) == 0);
 134:	76 9b       	sbis	0x0e, 6	; 14
 136:	fd cf       	rjmp	.-6      	; 0x132 <SPI_WriteReadByte+0x8>
	return USIDR;
 138:	8f b1       	in	r24, 0x0f	; 15
}
 13a:	08 95       	ret

0000013c <NRF24_ReadArray>:
	NRF24_SET_CSN_HI;
	return result;
}

void NRF24_ReadArray(uint8_t cmd, uint8_t *array, uint8_t len)
{
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	00 d0       	rcall	.+0      	; 0x148 <NRF24_ReadArray+0xc>
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 14e:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 150:	69 83       	std	Y+1, r22	; 0x01
 152:	7a 83       	std	Y+2, r23	; 0x02
 154:	ea df       	rcall	.-44     	; 0x12a <SPI_WriteReadByte>
	while(len-- > 0) *array++ = SPI_WriteReadByte(NRF24_CMD_NOP);
 156:	69 81       	ldd	r22, Y+1	; 0x01
 158:	e6 2e       	mov	r14, r22
 15a:	7a 81       	ldd	r23, Y+2	; 0x02
 15c:	f7 2e       	mov	r15, r23
 15e:	16 0f       	add	r17, r22
 160:	1e 15       	cp	r17, r14
 162:	31 f0       	breq	.+12     	; 0x170 <__stack+0x11>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	e1 df       	rcall	.-62     	; 0x12a <SPI_WriteReadByte>
 168:	f7 01       	movw	r30, r14
 16a:	81 93       	st	Z+, r24
 16c:	7f 01       	movw	r14, r30
 16e:	f8 cf       	rjmp	.-16     	; 0x160 <__stack+0x1>
	NRF24_SET_CSN_HI;
 170:	db 9a       	sbi	0x1b, 3	; 27
}
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	08 95       	ret

00000182 <NRF24_WriteByte>:

void NRF24_WriteByte(uint8_t cmd, uint8_t value)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
	NRF24_SET_CSN_LOW;
 18c:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 18e:	69 83       	std	Y+1, r22	; 0x01
 190:	cc df       	rcall	.-104    	; 0x12a <SPI_WriteReadByte>
	SPI_WriteReadByte(value);
 192:	69 81       	ldd	r22, Y+1	; 0x01
 194:	86 2f       	mov	r24, r22
 196:	c9 df       	rcall	.-110    	; 0x12a <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 198:	db 9a       	sbi	0x1b, 3	; 27
}
 19a:	0f 90       	pop	r0
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <NRF24_WriteArray>:

void NRF24_WriteArray(int8_t cmd, uint8_t *array, uint8_t len)
{
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	00 d0       	rcall	.+0      	; 0x1ae <NRF24_WriteArray+0xc>
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 1b4:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 1b6:	69 83       	std	Y+1, r22	; 0x01
 1b8:	7a 83       	std	Y+2, r23	; 0x02
 1ba:	b7 df       	rcall	.-146    	; 0x12a <SPI_WriteReadByte>
	while(len-- > 0) SPI_WriteReadByte(*array++);
 1bc:	69 81       	ldd	r22, Y+1	; 0x01
 1be:	e6 2e       	mov	r14, r22
 1c0:	7a 81       	ldd	r23, Y+2	; 0x02
 1c2:	f7 2e       	mov	r15, r23
 1c4:	16 0f       	add	r17, r22
 1c6:	1e 15       	cp	r17, r14
 1c8:	29 f0       	breq	.+10     	; 0x1d4 <NRF24_WriteArray+0x32>
 1ca:	f7 01       	movw	r30, r14
 1cc:	81 91       	ld	r24, Z+
 1ce:	7f 01       	movw	r14, r30
 1d0:	ac df       	rcall	.-168    	; 0x12a <SPI_WriteReadByte>
 1d2:	f9 cf       	rjmp	.-14     	; 0x1c6 <NRF24_WriteArray+0x24>
	NRF24_SET_CSN_HI;
 1d4:	db 9a       	sbi	0x1b, 3	; 27
}
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	08 95       	ret

000001e6 <NRF24_SendCommand>:

uint8_t NRF24_SendCommand(uint8_t cmd) // Send command & receive status
{
	NRF24_SET_CSN_LOW;
 1e6:	db 98       	cbi	0x1b, 3	; 27
	uint8_t result = SPI_WriteReadByte(cmd);
 1e8:	a0 df       	rcall	.-192    	; 0x12a <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 1ea:	db 9a       	sbi	0x1b, 3	; 27
	return result;
}
 1ec:	08 95       	ret

000001ee <NRF24_SetMode>:

void NRF24_SetMode(uint8_t mode) // Set mode in CONFIG reg
{
 1ee:	cf 93       	push	r28
 1f0:	c8 2f       	mov	r28, r24
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG | (1<<NRF24_BIT_PWR_UP) | mode);
 1f2:	68 2f       	mov	r22, r24
 1f4:	6e 67       	ori	r22, 0x7E	; 126
 1f6:	80 e2       	ldi	r24, 0x20	; 32
 1f8:	c4 df       	rcall	.-120    	; 0x182 <NRF24_WriteByte>
	if(mode & NRF24_ReceiveMode) { // Receive mode
 1fa:	c0 ff       	sbrs	r28, 0
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <NRF24_SetMode+0x18>
		//NRF24_SendCommand(NRF24_CMD_FLUSH_RX);
		NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 1fe:	60 e7       	ldi	r22, 0x70	; 112
 200:	87 e2       	ldi	r24, 0x27	; 39
 202:	bf df       	rcall	.-130    	; 0x182 <NRF24_WriteByte>
		NRF24_SET_CE_HI; // start receiving
 204:	da 9a       	sbi	0x1b, 2	; 27
	}
}
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <NRF24_TransmitShockBurst>:
}

// Transmit payload, than receive payload.
// return 0 if success, 1 - Payload not returned, 2 - Max retransmit reached, 3 - return payload len error, 4 - module not responding.
uint8_t NRF24_TransmitShockBurst(uint8_t send_len, uint8_t receive_len)
{
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	1f 92       	push	r1
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	48 2f       	mov	r20, r24
 21a:	06 2f       	mov	r16, r22
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 21c:	60 e7       	ldi	r22, 0x70	; 112
 21e:	87 e2       	ldi	r24, 0x27	; 39
 220:	49 83       	std	Y+1, r20	; 0x01
 222:	af df       	rcall	.-162    	; 0x182 <NRF24_WriteByte>
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
 224:	81 ee       	ldi	r24, 0xE1	; 225
 226:	df df       	rcall	.-66     	; 0x1e6 <NRF24_SendCommand>
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, NRF24_Buffer, send_len);
 228:	49 81       	ldd	r20, Y+1	; 0x01
 22a:	65 e7       	ldi	r22, 0x75	; 117
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	80 ea       	ldi	r24, 0xA0	; 160
 230:	b8 df       	rcall	.-144    	; 0x1a2 <NRF24_WriteArray>
	NRF24_SET_CE_HI; // Start transmission
 232:	da 9a       	sbi	0x1b, 2	; 27
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 234:	11 e0       	ldi	r17, 0x01	; 1
	{
		Delay10us(10);
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	48 df       	rcall	.-368    	; 0xca <Delay10us>
		st = NRF24_SendCommand(NRF24_CMD_NOP);
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	d4 df       	rcall	.-88     	; 0x1e6 <NRF24_SendCommand>
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
 23e:	98 2f       	mov	r25, r24
 240:	90 73       	andi	r25, 0x30	; 48
 242:	11 f4       	brne	.+4      	; 0x248 <NRF24_TransmitShockBurst+0x3e>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, NRF24_Buffer, send_len);
	NRF24_SET_CE_HI; // Start transmission
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 244:	1f 5f       	subi	r17, 0xFF	; 255
 246:	b9 f7       	brne	.-18     	; 0x236 <NRF24_TransmitShockBurst+0x2c>
	{
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	NRF24_SET_CE_LOW;
 248:	da 98       	cbi	0x1b, 2	; 27
	if(i == 0) return 4;
 24a:	11 23       	and	r17, r17
 24c:	d1 f0       	breq	.+52     	; 0x282 <NRF24_TransmitShockBurst+0x78>
	if(st & (1<<NRF24_BIT_MAX_RT)) return 2;
 24e:	18 2f       	mov	r17, r24
 250:	10 71       	andi	r17, 0x10	; 16
 252:	84 fd       	sbrc	r24, 4
 254:	18 c0       	rjmp	.+48     	; 0x286 <NRF24_TransmitShockBurst+0x7c>
	if(st & (1<<NRF24_BIT_RX_DR)) {
 256:	86 ff       	sbrs	r24, 6
 258:	18 c0       	rjmp	.+48     	; 0x28a <NRF24_TransmitShockBurst+0x80>
		NRF24_Buffer[0] = 0xFF;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	80 93 75 00 	sts	0x0075, r24
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	65 e7       	ldi	r22, 0x75	; 117
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e6       	ldi	r24, 0x60	; 96
 268:	69 df       	rcall	.-302    	; 0x13c <NRF24_ReadArray>
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
 26a:	80 91 75 00 	lds	r24, 0x0075
 26e:	81 32       	cpi	r24, 0x21	; 33
 270:	70 f4       	brcc	.+28     	; 0x28e <NRF24_TransmitShockBurst+0x84>
 272:	80 17       	cp	r24, r16
 274:	60 f0       	brcs	.+24     	; 0x28e <NRF24_TransmitShockBurst+0x84>
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
 276:	40 2f       	mov	r20, r16
 278:	65 e7       	ldi	r22, 0x75	; 117
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	81 e6       	ldi	r24, 0x61	; 97
 27e:	5e df       	rcall	.-324    	; 0x13c <NRF24_ReadArray>
		return  0;
 280:	07 c0       	rjmp	.+14     	; 0x290 <NRF24_TransmitShockBurst+0x86>
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	NRF24_SET_CE_LOW;
	if(i == 0) return 4;
 282:	14 e0       	ldi	r17, 0x04	; 4
 284:	05 c0       	rjmp	.+10     	; 0x290 <NRF24_TransmitShockBurst+0x86>
	if(st & (1<<NRF24_BIT_MAX_RT)) return 2;
 286:	12 e0       	ldi	r17, 0x02	; 2
 288:	03 c0       	rjmp	.+6      	; 0x290 <NRF24_TransmitShockBurst+0x86>
		NRF24_Buffer[0] = 0xFF;
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
		return  0;
	} else return 1;
 28a:	11 e0       	ldi	r17, 0x01	; 1
 28c:	01 c0       	rjmp	.+2      	; 0x290 <NRF24_TransmitShockBurst+0x86>
	if(i == 0) return 4;
	if(st & (1<<NRF24_BIT_MAX_RT)) return 2;
	if(st & (1<<NRF24_BIT_RX_DR)) {
		NRF24_Buffer[0] = 0xFF;
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
 28e:	13 e0       	ldi	r17, 0x03	; 3
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
		return  0;
	} else return 1;
}
 290:	81 2f       	mov	r24, r17
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <NRF24_SetAddresses>:

uint8_t NRF24_SetAddresses(uint8_t addr_LSB) // Set addresses: NRF24_BASE_ADDR + addr_LSB, return 1 if success
{
 29e:	cf 93       	push	r28
 2a0:	c8 2f       	mov	r28, r24
	NRF24_Buffer[0] = addr_LSB;
 2a2:	80 93 75 00 	sts	0x0075, r24
	memcpy_P(NRF24_Buffer + 1, NRF24_BASE_ADDR, sizeof(NRF24_BASE_ADDR)/sizeof(NRF24_BASE_ADDR[0]));
 2a6:	42 e0       	ldi	r20, 0x02	; 2
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	62 e2       	ldi	r22, 0x22	; 34
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	86 e7       	ldi	r24, 0x76	; 118
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	28 d3       	rcall	.+1616   	; 0x904 <memcpy_P>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_RX_ADDR_P0, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2b4:	43 e0       	ldi	r20, 0x03	; 3
 2b6:	65 e7       	ldi	r22, 0x75	; 117
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	8a e2       	ldi	r24, 0x2A	; 42
 2bc:	72 df       	rcall	.-284    	; 0x1a2 <NRF24_WriteArray>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2be:	43 e0       	ldi	r20, 0x03	; 3
 2c0:	65 e7       	ldi	r22, 0x75	; 117
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	80 e3       	ldi	r24, 0x30	; 48
 2c6:	6d df       	rcall	.-294    	; 0x1a2 <NRF24_WriteArray>
	NRF24_ReadArray(NRF24_CMD_R_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2c8:	43 e0       	ldi	r20, 0x03	; 3
 2ca:	65 e7       	ldi	r22, 0x75	; 117
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	80 e1       	ldi	r24, 0x10	; 16
 2d0:	35 df       	rcall	.-406    	; 0x13c <NRF24_ReadArray>
	return NRF24_Buffer[0] == addr_LSB;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 91 75 00 	lds	r25, 0x0075
 2d8:	9c 13       	cpse	r25, r28
 2da:	80 e0       	ldi	r24, 0x00	; 0
}
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <NRF24_Powerdown>:

void NRF24_Powerdown(void)
{
	NRF24_SET_CE_LOW;
 2e0:	da 98       	cbi	0x1b, 2	; 27
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG); // Power down
 2e2:	6c e7       	ldi	r22, 0x7C	; 124
 2e4:	80 e2       	ldi	r24, 0x20	; 32
 2e6:	4d cf       	rjmp	.-358    	; 0x182 <NRF24_WriteByte>

000002e8 <NRF24_init>:
}

void NRF24_init(uint8_t channel) // After init transmit must be delayed
{
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	18 2f       	mov	r17, r24
	NRF24_SET_CSN_HI;
 2f0:	db 9a       	sbi	0x1b, 3	; 27
 2f2:	c4 e2       	ldi	r28, 0x24	; 36
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i = 0, c, v;
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 2f6:	fe 01       	movw	r30, r28
 2f8:	84 91       	lpm	r24, Z
 2fa:	31 96       	adiw	r30, 0x01	; 1
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 2fc:	64 91       	lpm	r22, Z
		NRF24_WriteByte(c, v); 
 2fe:	41 df       	rcall	.-382    	; 0x182 <NRF24_WriteByte>
 300:	22 96       	adiw	r28, 0x02	; 2
	} while(i < sizeof(NRF24_INIT_DATA));
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	c2 33       	cpi	r28, 0x32	; 50
 306:	df 07       	cpc	r29, r31
 308:	b1 f7       	brne	.-20     	; 0x2f6 <NRF24_init+0xe>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 30a:	61 2f       	mov	r22, r17
 30c:	85 e2       	ldi	r24, 0x25	; 37
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		NRF24_WriteByte(c, v); 
	} while(i < sizeof(NRF24_INIT_DATA));
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 314:	36 cf       	rjmp	.-404    	; 0x182 <NRF24_WriteByte>

00000316 <__vector_11>:
#define SETUP_WATCHDOG WDTCSR = (1<<WDCE) | (1<<WDE); WDTCSR = (1<<WDE) | (0<<WDIE) | (0<<WDP3) | (1<<WDP2) | (1<<WDP1) | (0<<WDP0); //  Watchdog reset 1 s
uint8_t LED_Warning = 0, LED_WarningOnCnt = 0, LED_WarningOffCnt = 0;
uint8_t Timer = 0;

ISR(TIM0_OVF_vect) // 0.10035 sec
{
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
	if(++TimerCntSec == 10) { // 1 sec
 32a:	80 91 6a 00 	lds	r24, 0x006A
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	8a 30       	cpi	r24, 0x0A	; 10
 332:	19 f0       	breq	.+6      	; 0x33a <__vector_11+0x24>
 334:	80 93 6a 00 	sts	0x006A, r24
 338:	0e c0       	rjmp	.+28     	; 0x356 <__vector_11+0x40>
		TimerCntSec = 0;
 33a:	10 92 6a 00 	sts	0x006A, r1
		if(RequestCountdown) RequestCountdown--;
 33e:	80 91 60 00 	lds	r24, 0x0060
 342:	88 23       	and	r24, r24
 344:	19 f0       	breq	.+6      	; 0x34c <__vector_11+0x36>
 346:	81 50       	subi	r24, 0x01	; 1
 348:	80 93 60 00 	sts	0x0060, r24
		Timer++;
 34c:	80 91 62 00 	lds	r24, 0x0062
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	80 93 62 00 	sts	0x0062, r24
	}
 	if(LED_WarningOnCnt) {
 356:	80 91 64 00 	lds	r24, 0x0064
 35a:	88 23       	and	r24, r24
 35c:	39 f0       	breq	.+14     	; 0x36c <__vector_11+0x56>
	 	LED1_ON;
 35e:	d9 9a       	sbi	0x1b, 1	; 27
	 	LED_WarningOnCnt--;
 360:	80 91 64 00 	lds	r24, 0x0064
 364:	81 50       	subi	r24, 0x01	; 1
 366:	80 93 64 00 	sts	0x0064, r24
 36a:	1a c0       	rjmp	.+52     	; 0x3a0 <__vector_11+0x8a>
	} else if(LED_WarningOffCnt) {
 36c:	80 91 63 00 	lds	r24, 0x0063
 370:	88 23       	and	r24, r24
 372:	29 f0       	breq	.+10     	; 0x37e <__vector_11+0x68>
	 	LED1_OFF;
 374:	d9 98       	cbi	0x1b, 1	; 27
	 	LED_WarningOffCnt--;
 376:	80 91 63 00 	lds	r24, 0x0063
 37a:	81 50       	subi	r24, 0x01	; 1
 37c:	0f c0       	rjmp	.+30     	; 0x39c <__vector_11+0x86>
	} else if(LED_Warning) { // short flashes
 37e:	80 91 65 00 	lds	r24, 0x0065
 382:	88 23       	and	r24, r24
 384:	69 f0       	breq	.+26     	; 0x3a0 <__vector_11+0x8a>
	 	LED_WarningOffCnt = 3;
 386:	93 e0       	ldi	r25, 0x03	; 3
 388:	90 93 63 00 	sts	0x0063, r25
	 	LED_WarningOnCnt = 3;
 38c:	90 93 64 00 	sts	0x0064, r25
	 	if(--LED_Warning == 0) LED_WarningOffCnt = 5;
 390:	81 50       	subi	r24, 0x01	; 1
 392:	80 93 65 00 	sts	0x0065, r24
 396:	81 11       	cpse	r24, r1
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <__vector_11+0x8a>
 39a:	85 e0       	ldi	r24, 0x05	; 5
 39c:	80 93 63 00 	sts	0x0063, r24
 	}
	if(FanSpeed != SpeedSet && setup_mode == 0) {
 3a0:	80 91 74 00 	lds	r24, 0x0074
 3a4:	90 91 73 00 	lds	r25, 0x0073
 3a8:	89 17       	cp	r24, r25
 3aa:	09 f4       	brne	.+2      	; 0x3ae <__vector_11+0x98>
 3ac:	6c c0       	rjmp	.+216    	; 0x486 <__vector_11+0x170>
 3ae:	20 91 67 00 	lds	r18, 0x0067
 3b2:	21 11       	cpse	r18, r1
 3b4:	68 c0       	rjmp	.+208    	; 0x486 <__vector_11+0x170>
		if(PressKeyOffTime) {
 3b6:	20 91 6f 00 	lds	r18, 0x006F
 3ba:	22 23       	and	r18, r18
 3bc:	61 f0       	breq	.+24     	; 0x3d6 <__vector_11+0xc0>
			if(--PressKeyOffTime == 0) {
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	82 0f       	add	r24, r18
 3c2:	80 93 6f 00 	sts	0x006F, r24
 3c6:	81 11       	cpse	r24, r1
 3c8:	5e c0       	rjmp	.+188    	; 0x486 <__vector_11+0x170>
				KEYS_DDR |= PressKey; // set Out, level 0 - key pressed
 3ca:	87 b3       	in	r24, 0x17	; 23
 3cc:	90 91 70 00 	lds	r25, 0x0070
 3d0:	89 2b       	or	r24, r25
 3d2:	87 bb       	out	0x17, r24	; 23
 3d4:	58 c0       	rjmp	.+176    	; 0x486 <__vector_11+0x170>
			}
		} else if(PressKeyOnTime) {
 3d6:	20 91 6e 00 	lds	r18, 0x006E
 3da:	22 23       	and	r18, r18
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <__vector_11+0xca>
 3de:	3d c0       	rjmp	.+122    	; 0x45a <__vector_11+0x144>
			if(--PressKeyOnTime == 0) {
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	82 0f       	add	r24, r18
 3e4:	80 93 6e 00 	sts	0x006E, r24
 3e8:	81 11       	cpse	r24, r1
 3ea:	4d c0       	rjmp	.+154    	; 0x486 <__vector_11+0x170>
				KEYS_DDR &= ~PressKey; // set In - key released
 3ec:	97 b3       	in	r25, 0x17	; 23
 3ee:	80 91 70 00 	lds	r24, 0x0070
 3f2:	80 95       	com	r24
 3f4:	89 23       	and	r24, r25
 3f6:	87 bb       	out	0x17, r24	; 23
				if(PressKey == KEY_PWR) {
 3f8:	90 91 70 00 	lds	r25, 0x0070
 3fc:	91 30       	cpi	r25, 0x01	; 1
 3fe:	61 f4       	brne	.+24     	; 0x418 <__vector_11+0x102>
					FanSpeedOff ^= 1;
 400:	80 91 6b 00 	lds	r24, 0x006B
 404:	89 27       	eor	r24, r25
 406:	80 93 6b 00 	sts	0x006B, r24
					if(FanSpeedOff) {
 40a:	88 23       	and	r24, r24
 40c:	e1 f1       	breq	.+120    	; 0x486 <__vector_11+0x170>
x_off_ok:				FanSpeed = SpeedSet;
 40e:	80 91 73 00 	lds	r24, 0x0073
 412:	80 93 74 00 	sts	0x0074, r24
 416:	37 c0       	rjmp	.+110    	; 0x486 <__vector_11+0x170>
 418:	80 91 73 00 	lds	r24, 0x0073
					}
				} else {
					if(PressKey == KEY_MINUS) SpeedSet--;
 41c:	92 30       	cpi	r25, 0x02	; 2
 41e:	11 f4       	brne	.+4      	; 0x424 <__vector_11+0x10e>
 420:	81 50       	subi	r24, 0x01	; 1
 422:	01 c0       	rjmp	.+2      	; 0x426 <__vector_11+0x110>
					else SpeedSet++; // PressKey == KEY_PLUS
 424:	8f 5f       	subi	r24, 0xFF	; 255
 426:	80 93 73 00 	sts	0x0073, r24
					if(SpeedSet < 1) SpeedSet = 1;
 42a:	20 91 73 00 	lds	r18, 0x0073
 42e:	12 16       	cp	r1, r18
 430:	24 f0       	brlt	.+8      	; 0x43a <__vector_11+0x124>
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 93 73 00 	sts	0x0073, r24
 438:	0c c0       	rjmp	.+24     	; 0x452 <__vector_11+0x13c>
					else if(SpeedSet > FanSpeedMax) SpeedSet = FanSpeedMax;
 43a:	40 91 72 00 	lds	r20, 0x0072
 43e:	33 27       	eor	r19, r19
 440:	27 fd       	sbrc	r18, 7
 442:	30 95       	com	r19
 444:	84 2f       	mov	r24, r20
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	82 17       	cp	r24, r18
 44a:	93 07       	cpc	r25, r19
 44c:	14 f4       	brge	.+4      	; 0x452 <__vector_11+0x13c>
 44e:	40 93 73 00 	sts	0x0073, r20
					SpeedSetChanged = 1;
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	80 93 6d 00 	sts	0x006D, r24
 458:	16 c0       	rjmp	.+44     	; 0x486 <__vector_11+0x170>
 45a:	20 91 6b 00 	lds	r18, 0x006B
				}
			}
		} else {
			if(FanSpeed <= 0) { // off
 45e:	18 16       	cp	r1, r24
 460:	24 f0       	brlt	.+8      	; 0x46a <__vector_11+0x154>
				if(FanSpeedOff) goto x_off_ok; // Already off
 462:	21 11       	cpse	r18, r1
 464:	d4 cf       	rjmp	.-88     	; 0x40e <__vector_11+0xf8>
				PressKey = KEY_PWR;
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	07 c0       	rjmp	.+14     	; 0x478 <__vector_11+0x162>
			} else if(FanSpeedOff) { // switch on, and after set speed
 46a:	21 11       	cpse	r18, r1
 46c:	fc cf       	rjmp	.-8      	; 0x466 <__vector_11+0x150>
				PressKey = KEY_PWR;
			} else if(FanSpeed < SpeedSet) { // less
 46e:	89 17       	cp	r24, r25
 470:	14 f4       	brge	.+4      	; 0x476 <__vector_11+0x160>
				PressKey = KEY_MINUS;
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	01 c0       	rjmp	.+2      	; 0x478 <__vector_11+0x162>
			} else {
				PressKey = KEY_PLUS;
 476:	84 e0       	ldi	r24, 0x04	; 4
 478:	80 93 70 00 	sts	0x0070, r24
			}
			PressKeyOffTime = 2;
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	80 93 6f 00 	sts	0x006F, r24
			PressKeyOnTime = 2;
 482:	80 93 6e 00 	sts	0x006E, r24
		}
	}
}
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <NRF_save_registers>:

void NRF_save_registers(void)
{
 49a:	ef 92       	push	r14
 49c:	ff 92       	push	r15
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	1f 92       	push	r1
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
	#define EPROM_SaveRegIdx 0x0F
	#define EPROM_SaveReg	 0x10
	#define IDX_MAX			 7
	uint8_t buf[1];
	
	uint8_t idx = EEPROM_read(EPROM_SaveRegIdx);
 4ac:	8f e0       	ldi	r24, 0x0F	; 15
 4ae:	dd dd       	rcall	.-1094   	; 0x6a <EEPROM_read>
	if(idx > IDX_MAX) idx = 0;
 4b0:	88 30       	cpi	r24, 0x08	; 8
 4b2:	08 f0       	brcs	.+2      	; 0x4b6 <NRF_save_registers+0x1c>
 4b4:	80 e0       	ldi	r24, 0x00	; 0
	idx = EPROM_SaveReg + idx * 0x20;
 4b6:	18 2f       	mov	r17, r24
 4b8:	12 95       	swap	r17
 4ba:	11 0f       	add	r17, r17
 4bc:	10 7e       	andi	r17, 0xE0	; 224
 4be:	80 e1       	ldi	r24, 0x10	; 16
 4c0:	f8 2e       	mov	r15, r24
 4c2:	f1 0e       	add	r15, r17
	for(uint8_t i = 0; i <= 0x17; i++) {
 4c4:	00 e0       	ldi	r16, 0x00	; 0
		NRF24_ReadArray(NRF24_CMD_R_REGISTER + i, buf, 1);
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	be 01       	movw	r22, r28
 4ca:	6f 5f       	subi	r22, 0xFF	; 255
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	80 2f       	mov	r24, r16
 4d0:	35 de       	rcall	.-918    	; 0x13c <NRF24_ReadArray>
		EEPROM_write(idx++, buf[0]);
 4d2:	ee 24       	eor	r14, r14
 4d4:	e3 94       	inc	r14
 4d6:	ef 0c       	add	r14, r15
 4d8:	69 81       	ldd	r22, Y+1	; 0x01
 4da:	8f 2d       	mov	r24, r15
 4dc:	ce dd       	rcall	.-1124   	; 0x7a <EEPROM_write>
	uint8_t buf[1];
	
	uint8_t idx = EEPROM_read(EPROM_SaveRegIdx);
	if(idx > IDX_MAX) idx = 0;
	idx = EPROM_SaveReg + idx * 0x20;
	for(uint8_t i = 0; i <= 0x17; i++) {
 4de:	0f 5f       	subi	r16, 0xFF	; 255
 4e0:	08 31       	cpi	r16, 0x18	; 24
 4e2:	11 f0       	breq	.+4      	; 0x4e8 <NRF_save_registers+0x4e>
		NRF24_ReadArray(NRF24_CMD_R_REGISTER + i, buf, 1);
		EEPROM_write(idx++, buf[0]);
 4e4:	fe 2c       	mov	r15, r14
 4e6:	ef cf       	rjmp	.-34     	; 0x4c6 <NRF_save_registers+0x2c>
	}
	NRF24_ReadArray(NRF24_CMD_R_REGISTER + 0x1C, buf, 1); // at 0x18
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	be 01       	movw	r22, r28
 4ec:	6f 5f       	subi	r22, 0xFF	; 255
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8c e1       	ldi	r24, 0x1C	; 28
 4f2:	24 de       	rcall	.-952    	; 0x13c <NRF24_ReadArray>
	EEPROM_write(idx++, buf[0]);
 4f4:	69 81       	ldd	r22, Y+1	; 0x01
 4f6:	88 e2       	ldi	r24, 0x28	; 40
 4f8:	81 0f       	add	r24, r17
 4fa:	bf dd       	rcall	.-1154   	; 0x7a <EEPROM_write>
	NRF24_ReadArray(NRF24_CMD_R_REGISTER + 0x1D, buf, 1); // at 0x19
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	be 01       	movw	r22, r28
 500:	6f 5f       	subi	r22, 0xFF	; 255
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8d e1       	ldi	r24, 0x1D	; 29
 506:	1a de       	rcall	.-972    	; 0x13c <NRF24_ReadArray>
	EEPROM_write(idx++, buf[0]);
 508:	69 81       	ldd	r22, Y+1	; 0x01
 50a:	89 e2       	ldi	r24, 0x29	; 41
 50c:	81 0f       	add	r24, r17
 50e:	b5 dd       	rcall	.-1174   	; 0x7a <EEPROM_write>
	EEPROM_write(idx++, Timer);
 510:	60 91 62 00 	lds	r22, 0x0062
 514:	8a e2       	ldi	r24, 0x2A	; 42
 516:	81 0f       	add	r24, r17
 518:	b0 dd       	rcall	.-1184   	; 0x7a <EEPROM_write>
	EEPROM_write(idx++, nrf_last_status);
 51a:	60 91 68 00 	lds	r22, 0x0068
 51e:	8b e2       	ldi	r24, 0x2B	; 43
 520:	81 0f       	add	r24, r17
 522:	ab dd       	rcall	.-1194   	; 0x7a <EEPROM_write>
	
	idx = EEPROM_read(EPROM_SaveRegIdx) + 1;
 524:	8f e0       	ldi	r24, 0x0F	; 15
 526:	a1 dd       	rcall	.-1214   	; 0x6a <EEPROM_read>
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	68 0f       	add	r22, r24
 52c:	68 30       	cpi	r22, 0x08	; 8
 52e:	08 f0       	brcs	.+2      	; 0x532 <NRF_save_registers+0x98>
 530:	67 e0       	ldi	r22, 0x07	; 7
	if(idx > IDX_MAX) idx = IDX_MAX;
	EEPROM_write(EPROM_SaveRegIdx, idx);
 532:	8f e0       	ldi	r24, 0x0F	; 15
 534:	a2 dd       	rcall	.-1212   	; 0x7a <EEPROM_write>
}
 536:	0f 90       	pop	r0
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	1f 91       	pop	r17
 53e:	0f 91       	pop	r16
 540:	ff 90       	pop	r15
 542:	ef 90       	pop	r14
 544:	08 95       	ret

00000546 <main>:

int main(void)
{
	CLKPR = (1<<CLKPCE); CLKPR = (0<<CLKPS3) | (0<<CLKPS2) | (1<<CLKPS1) | (1<<CLKPS0); // Clock prescaler: 8
 546:	80 e8       	ldi	r24, 0x80	; 128
 548:	86 bd       	out	0x26, r24	; 38
 54a:	93 e0       	ldi	r25, 0x03	; 3
 54c:	96 bd       	out	0x26, r25	; 38
	MCUCR = (1<<SE) | (0<<SM1) | (0<<SM0); // Idle sleep enable
 54e:	80 e2       	ldi	r24, 0x20	; 32
 550:	85 bf       	out	0x35, r24	; 53
	KEYS_DDR &= ~(KEY_PWR | KEY_MINUS | KEY_PLUS); // In
 552:	87 b3       	in	r24, 0x17	; 23
 554:	88 7f       	andi	r24, 0xF8	; 248
 556:	87 bb       	out	0x17, r24	; 23
	KEYS_PORT &= ~(KEY_PWR | KEY_MINUS | KEY_PLUS); // = 0
 558:	88 b3       	in	r24, 0x18	; 24
 55a:	88 7f       	andi	r24, 0xF8	; 248
 55c:	88 bb       	out	0x18, r24	; 24
	DDRA = LED1; // Out
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	8a bb       	out	0x1a, r24	; 26
	PORTA = (1<<PORTA7) | (1<<PORTA0); // pullup not used pins
 562:	81 e8       	ldi	r24, 0x81	; 129
 564:	8b bb       	out	0x1b, r24	; 27
	NRF24_DDR |= NRF24_CE | NRF24_CSN | NRF24_SCK | NRF24_MOSI; // Out
 566:	8a b3       	in	r24, 0x1a	; 26
 568:	8c 63       	ori	r24, 0x3C	; 60
 56a:	8a bb       	out	0x1a, r24	; 26
//	// Timer 8 bit
 	TCCR0A = (1<<WGM01) | (1<<WGM00);  // Timer0: Fast PWM OCRA
 56c:	90 bf       	out	0x30, r25	; 48
 	TCCR0B = (1<<WGM02) | (1 << CS02) | (0 << CS01) | (1 << CS00); // Timer0 prescaller: 1024
 56e:	8d e0       	ldi	r24, 0x0D	; 13
 570:	83 bf       	out	0x33, r24	; 51
 	TIMSK0 |= (1<<TOIE0); // Timer/Counter0 Overflow Interrupt Enable
 572:	89 b7       	in	r24, 0x39	; 57
 574:	81 60       	ori	r24, 0x01	; 1
 576:	89 bf       	out	0x39, r24	; 57
 	OCR0A = 97; // OC0A(TOP)=Fclk/prescaller/Freq - 1; Freq=Fclk/(prescaller*(1+TOP))
 578:	81 e6       	ldi	r24, 0x61	; 97
 57a:	86 bf       	out	0x36, r24	; 54
 	//OCR0B = 0; // 0..OCR0A, Half Duty cycle = ((TOP+1)/2-1)
	//TCCR0A |= (1<<COM0B1); // Start PWM out
	FanSpeedMax = EEPROM_read(EPROM_FanSpeedMax);
 57c:	83 e0       	ldi	r24, 0x03	; 3
 57e:	75 dd       	rcall	.-1302   	; 0x6a <EEPROM_read>
 580:	80 93 72 00 	sts	0x0072, r24
	if(FanSpeedMax == 0xFF) {
 584:	8f 3f       	cpi	r24, 0xFF	; 255
 586:	91 f4       	brne	.+36     	; 0x5ac <main+0x66>
		EEPROM_write(EPROM_OSCCAL, OSCCAL);
 588:	61 b7       	in	r22, 0x31	; 49
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	76 dd       	rcall	.-1300   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_CurrentSpeedAddr, EPROM_CurrentSpeedAddr + 1);
 58e:	60 e1       	ldi	r22, 0x10	; 16
 590:	8f e0       	ldi	r24, 0x0F	; 15
 592:	73 dd       	rcall	.-1306   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_CurrentSpeedAddr + 1, 1);
 594:	61 e0       	ldi	r22, 0x01	; 1
 596:	80 e1       	ldi	r24, 0x10	; 16
 598:	70 dd       	rcall	.-1312   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_FanSpeedMax, 7);
 59a:	67 e0       	ldi	r22, 0x07	; 7
 59c:	83 e0       	ldi	r24, 0x03	; 3
 59e:	6d dd       	rcall	.-1318   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_RFAddress, 0xE5);
 5a0:	65 ee       	ldi	r22, 0xE5	; 229
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	6a dd       	rcall	.-1324   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_RF_Channel, 120);
 5a6:	68 e7       	ldi	r22, 0x78	; 120
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	67 dd       	rcall	.-1330   	; 0x7a <EEPROM_write>
	}
	//OSCCAL = EEPROM_read(EPROM_OSCCAL);
	uint8_t addr = EEPROM_read(EPROM_CurrentSpeedAddr);
 5ac:	8f e0       	ldi	r24, 0x0F	; 15
 5ae:	5d dd       	rcall	.-1350   	; 0x6a <EEPROM_read>
	if(addr && (SpeedSet = EEPROM_read(addr)) <= FanSpeedMax) {
 5b0:	88 23       	and	r24, r24
 5b2:	69 f0       	breq	.+26     	; 0x5ce <main+0x88>
 5b4:	5a dd       	rcall	.-1356   	; 0x6a <EEPROM_read>
 5b6:	80 93 73 00 	sts	0x0073, r24
 5ba:	48 2f       	mov	r20, r24
 5bc:	55 27       	eor	r21, r21
 5be:	47 fd       	sbrc	r20, 7
 5c0:	50 95       	com	r21
 5c2:	20 91 72 00 	lds	r18, 0x0072
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	24 17       	cp	r18, r20
 5ca:	35 07       	cpc	r19, r21
 5cc:	2c f4       	brge	.+10     	; 0x5d8 <main+0x92>
		FanSpeed = SpeedSet;
	} else { // Speed not saved - set 1
		SpeedSet = FanSpeedMax;
 5ce:	80 91 72 00 	lds	r24, 0x0072
 5d2:	80 93 73 00 	sts	0x0073, r24
		FanSpeed = 1;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	80 93 74 00 	sts	0x0074, r24
	}
	NRF24_init(EEPROM_read(EPROM_RF_Channel)); // After init transmit must be delayed
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	45 dd       	rcall	.-1398   	; 0x6a <EEPROM_read>
 5e0:	83 de       	rcall	.-762    	; 0x2e8 <NRF24_init>
	KEYS_INTR_INIT;
 5e2:	8b b7       	in	r24, 0x3b	; 59
 5e4:	80 62       	ori	r24, 0x20	; 32
 5e6:	8b bf       	out	0x3b, r24	; 59
 5e8:	80 b5       	in	r24, 0x20	; 32
 5ea:	87 60       	ori	r24, 0x07	; 7
 5ec:	80 bd       	out	0x20, r24	; 32
	SETUP_WATCHDOG;
 5ee:	88 e1       	ldi	r24, 0x18	; 24
 5f0:	81 bd       	out	0x21, r24	; 33
 5f2:	8e e0       	ldi	r24, 0x0E	; 14
 5f4:	81 bd       	out	0x21, r24	; 33
	sei();
 5f6:	78 94       	sei
 	while(!NRF24_SetAddresses(EEPROM_read(EPROM_RFAddress))) {
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	37 dd       	rcall	.-1426   	; 0x6a <EEPROM_read>
 5fc:	50 de       	rcall	.-864    	; 0x29e <NRF24_SetAddresses>
 5fe:	81 11       	cpse	r24, r1
 600:	05 c0       	rjmp	.+10     	; 0x60c <main+0xc6>
 		FlashLED(1, 50, 20);
 602:	44 e1       	ldi	r20, 0x14	; 20
 604:	62 e3       	ldi	r22, 0x32	; 50
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	76 dd       	rcall	.-1300   	; 0xf6 <FlashLED>
 60a:	f6 cf       	rjmp	.-20     	; 0x5f8 <main+0xb2>
					LED1_ON;
					Delay100ms(10);
					while(keys) {
						wdt_reset(); // wait keys release
						if((keys & KEY_MINUS) && (keys & KEY_PLUS)) {
							setup_mode = 1;
 60c:	11 e0       	ldi	r17, 0x01	; 1
 60e:	c1 e0       	ldi	r28, 0x01	; 1
							FlashLED(5, 2, 2);
							Delay100ms(30);
							RequestCountdown = 30;
 610:	de e1       	ldi	r29, 0x1E	; 30
x_save_speed:
				if(EEPROM_read(addr) != SpeedSet) {
					EEPROM_write(addr, SpeedSet);
					if(EEPROM_read(addr) != SpeedSet) { // EEPROM cell broken
						FlashLED(10, 2, 2);
						send_data = 0xEE;
 612:	0e ee       	ldi	r16, 0xEE	; 238
 		FlashLED(1, 50, 20);
 	}
	while(1)
	{
		__asm__ volatile ("" ::: "memory"); // Need memory barrier
		sleep_cpu();
 614:	88 95       	sleep
		wdt_reset();
 616:	a8 95       	wdr
		if(keys) {
 618:	80 91 71 00 	lds	r24, 0x0071
 61c:	88 23       	and	r24, r24
 61e:	09 f4       	brne	.+2      	; 0x622 <main+0xdc>
 620:	d5 c0       	rjmp	.+426    	; 0x7cc <main+0x286>
			if(keys & KEY_PWR) {
 622:	80 91 71 00 	lds	r24, 0x0071
 626:	80 ff       	sbrs	r24, 0
 628:	0e c0       	rjmp	.+28     	; 0x646 <main+0x100>
				FanSpeedOff ^= 1;
 62a:	80 91 6b 00 	lds	r24, 0x006B
 62e:	81 27       	eor	r24, r17
 630:	80 93 6b 00 	sts	0x006B, r24
				if(FanSpeedOff == 0 && setup_mode) setup_mode = 0;
 634:	81 11       	cpse	r24, r1
 636:	05 c0       	rjmp	.+10     	; 0x642 <main+0xfc>
 638:	80 91 67 00 	lds	r24, 0x0067
 63c:	81 11       	cpse	r24, r1
 63e:	10 92 67 00 	sts	0x0067, r1
				SendOffStatus = 1;
 642:	c0 93 69 00 	sts	0x0069, r28
			}
			if(FanSpeedOff == 0) {
 646:	80 91 6b 00 	lds	r24, 0x006B
 64a:	81 11       	cpse	r24, r1
 64c:	52 c0       	rjmp	.+164    	; 0x6f2 <main+0x1ac>
				if(keys & KEY_MINUS) {
 64e:	80 91 71 00 	lds	r24, 0x0071
 652:	81 ff       	sbrs	r24, 1
 654:	19 c0       	rjmp	.+50     	; 0x688 <main+0x142>
					if(FanSpeedOverride > -8) {
 656:	80 91 6c 00 	lds	r24, 0x006C
 65a:	89 3f       	cpi	r24, 0xF9	; 249
 65c:	ac f0       	brlt	.+42     	; 0x688 <main+0x142>
						FanSpeedOverride--;
 65e:	81 50       	subi	r24, 0x01	; 1
 660:	80 93 6c 00 	sts	0x006C, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 664:	f8 94       	cli
 666:	80 91 74 00 	lds	r24, 0x0074
 66a:	90 91 73 00 	lds	r25, 0x0073
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							if(FanSpeed > 1) FanSpeed--;
 66e:	82 30       	cpi	r24, 0x02	; 2
 670:	0c f0       	brlt	.+2      	; 0x674 <main+0x12e>
 672:	81 50       	subi	r24, 0x01	; 1
 674:	80 93 74 00 	sts	0x0074, r24
							if(SpeedSet > 1) SpeedSet--;
 678:	92 30       	cpi	r25, 0x02	; 2
 67a:	24 f4       	brge	.+8      	; 0x684 <main+0x13e>
 67c:	90 93 73 00 	sts	0x0073, r25
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 680:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 682:	02 c0       	rjmp	.+4      	; 0x688 <main+0x142>
 684:	91 50       	subi	r25, 0x01	; 1
 686:	fa cf       	rjmp	.-12     	; 0x67c <main+0x136>
						}
					}
				}
				if(keys & KEY_PLUS) {
 688:	80 91 71 00 	lds	r24, 0x0071
 68c:	82 ff       	sbrs	r24, 2
 68e:	90 c0       	rjmp	.+288    	; 0x7b0 <main+0x26a>
					if(FanSpeedOverride < 7) {
 690:	80 91 6c 00 	lds	r24, 0x006C
 694:	87 30       	cpi	r24, 0x07	; 7
 696:	0c f0       	brlt	.+2      	; 0x69a <main+0x154>
 698:	8b c0       	rjmp	.+278    	; 0x7b0 <main+0x26a>
						FanSpeedOverride++;
 69a:	8f 5f       	subi	r24, 0xFF	; 255
 69c:	80 93 6c 00 	sts	0x006C, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 6a0:	f8 94       	cli
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							if(FanSpeed < FanSpeedMax) FanSpeed++;
 6a2:	80 91 72 00 	lds	r24, 0x0072
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	40 91 74 00 	lds	r20, 0x0074
 6ac:	50 91 73 00 	lds	r21, 0x0073
					}
				}
				if(keys & KEY_PLUS) {
					if(FanSpeedOverride < 7) {
						FanSpeedOverride++;
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
 6b0:	21 e0       	ldi	r18, 0x01	; 1
 6b2:	65 2f       	mov	r22, r21
 6b4:	22 23       	and	r18, r18
 6b6:	c1 f0       	breq	.+48     	; 0x6e8 <main+0x1a2>
							if(FanSpeed < FanSpeedMax) FanSpeed++;
 6b8:	24 2f       	mov	r18, r20
 6ba:	33 27       	eor	r19, r19
 6bc:	27 fd       	sbrc	r18, 7
 6be:	30 95       	com	r19
 6c0:	28 17       	cp	r18, r24
 6c2:	39 07       	cpc	r19, r25
 6c4:	0c f4       	brge	.+2      	; 0x6c8 <main+0x182>
 6c6:	4f 5f       	subi	r20, 0xFF	; 255
 6c8:	5f 5f       	subi	r21, 0xFF	; 255
							if(SpeedSet < FanSpeedMax) SpeedSet++;
 6ca:	26 2f       	mov	r18, r22
 6cc:	33 27       	eor	r19, r19
 6ce:	27 fd       	sbrc	r18, 7
 6d0:	30 95       	com	r19
 6d2:	28 17       	cp	r18, r24
 6d4:	39 07       	cpc	r19, r25
 6d6:	34 f0       	brlt	.+12     	; 0x6e4 <main+0x19e>
 6d8:	40 93 74 00 	sts	0x0074, r20
 6dc:	60 93 73 00 	sts	0x0073, r22
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 6e0:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 6e2:	66 c0       	rjmp	.+204    	; 0x7b0 <main+0x26a>
					}
				}
				if(keys & KEY_PLUS) {
					if(FanSpeedOverride < 7) {
						FanSpeedOverride++;
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
 6e4:	20 e0       	ldi	r18, 0x00	; 0
 6e6:	e5 cf       	rjmp	.-54     	; 0x6b2 <main+0x16c>
 6e8:	40 93 74 00 	sts	0x0074, r20
 6ec:	50 93 73 00 	sts	0x0073, r21
 6f0:	f7 cf       	rjmp	.-18     	; 0x6e0 <main+0x19a>
							if(FanSpeed < FanSpeedMax) FanSpeed++;
							if(SpeedSet < FanSpeedMax) SpeedSet++;
						}
					}
				}
			} else if(setup_mode) {
 6f2:	80 91 67 00 	lds	r24, 0x0067
 6f6:	88 23       	and	r24, r24
 6f8:	79 f1       	breq	.+94     	; 0x758 <main+0x212>
				if(keys & KEY_MINUS) {
 6fa:	80 91 71 00 	lds	r24, 0x0071
 6fe:	81 ff       	sbrs	r24, 1
 700:	05 c0       	rjmp	.+10     	; 0x70c <main+0x1c6>
					SpeedSet--;
 702:	80 91 73 00 	lds	r24, 0x0073
 706:	81 50       	subi	r24, 0x01	; 1
 708:	80 93 73 00 	sts	0x0073, r24
				}
				if(keys & KEY_PLUS) {
 70c:	80 91 71 00 	lds	r24, 0x0071
 710:	82 ff       	sbrs	r24, 2
 712:	05 c0       	rjmp	.+10     	; 0x71e <main+0x1d8>
					SpeedSet++;
 714:	80 91 73 00 	lds	r24, 0x0073
 718:	8f 5f       	subi	r24, 0xFF	; 255
 71a:	80 93 73 00 	sts	0x0073, r24
				}
				if(SpeedSet < 1) SpeedSet = 1;
 71e:	20 91 73 00 	lds	r18, 0x0073
 722:	12 16       	cp	r1, r18
 724:	1c f0       	brlt	.+6      	; 0x72c <main+0x1e6>
 726:	c0 93 73 00 	sts	0x0073, r28
 72a:	0c c0       	rjmp	.+24     	; 0x744 <main+0x1fe>
				else if(SpeedSet > FanSpeedMax) SpeedSet = FanSpeedMax;
 72c:	40 91 72 00 	lds	r20, 0x0072
 730:	33 27       	eor	r19, r19
 732:	27 fd       	sbrc	r18, 7
 734:	30 95       	com	r19
 736:	84 2f       	mov	r24, r20
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	82 17       	cp	r24, r18
 73c:	93 07       	cpc	r25, r19
 73e:	14 f4       	brge	.+4      	; 0x744 <main+0x1fe>
 740:	40 93 73 00 	sts	0x0073, r20
				FlashLED(SpeedSet, 5, 5);
 744:	45 e0       	ldi	r20, 0x05	; 5
 746:	65 e0       	ldi	r22, 0x05	; 5
 748:	80 91 73 00 	lds	r24, 0x0073
 74c:	d4 dc       	rcall	.-1624   	; 0xf6 <FlashLED>
				RequestCountdown = 30;
 74e:	d0 93 60 00 	sts	0x0060, r29
				SpeedSetChanged = 1;
 752:	c0 93 6d 00 	sts	0x006D, r28
 756:	2c c0       	rjmp	.+88     	; 0x7b0 <main+0x26a>
			} else if((keys & KEY_MINUS) || (keys & KEY_PLUS)) {
 758:	80 91 71 00 	lds	r24, 0x0071
 75c:	81 fd       	sbrc	r24, 1
 75e:	04 c0       	rjmp	.+8      	; 0x768 <main+0x222>
 760:	80 91 71 00 	lds	r24, 0x0071
 764:	82 ff       	sbrs	r24, 2
 766:	24 c0       	rjmp	.+72     	; 0x7b0 <main+0x26a>
				if(PressKeyOnTime == 0 && PressKeyOffTime == 0) { // not in changing process
 768:	80 91 6e 00 	lds	r24, 0x006E
 76c:	81 11       	cpse	r24, r1
 76e:	20 c0       	rjmp	.+64     	; 0x7b0 <main+0x26a>
 770:	80 91 6f 00 	lds	r24, 0x006F
 774:	81 11       	cpse	r24, r1
 776:	1c c0       	rjmp	.+56     	; 0x7b0 <main+0x26a>
					LED1_ON;
 778:	d9 9a       	sbi	0x1b, 1	; 27
					Delay100ms(10);
 77a:	8a e0       	ldi	r24, 0x0A	; 10
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	af dc       	rcall	.-1698   	; 0xde <Delay100ms>
					while(keys) {
 780:	80 91 71 00 	lds	r24, 0x0071
 784:	88 23       	and	r24, r24
 786:	a1 f0       	breq	.+40     	; 0x7b0 <main+0x26a>
						wdt_reset(); // wait keys release
 788:	a8 95       	wdr
						if((keys & KEY_MINUS) && (keys & KEY_PLUS)) {
 78a:	80 91 71 00 	lds	r24, 0x0071
 78e:	81 ff       	sbrs	r24, 1
 790:	f7 cf       	rjmp	.-18     	; 0x780 <main+0x23a>
 792:	80 91 71 00 	lds	r24, 0x0071
 796:	82 ff       	sbrs	r24, 2
 798:	f3 cf       	rjmp	.-26     	; 0x780 <main+0x23a>
							setup_mode = 1;
 79a:	c0 93 67 00 	sts	0x0067, r28
							FlashLED(5, 2, 2);
 79e:	42 e0       	ldi	r20, 0x02	; 2
 7a0:	62 e0       	ldi	r22, 0x02	; 2
 7a2:	85 e0       	ldi	r24, 0x05	; 5
 7a4:	a8 dc       	rcall	.-1712   	; 0xf6 <FlashLED>
							Delay100ms(30);
 7a6:	8e e1       	ldi	r24, 0x1E	; 30
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	99 dc       	rcall	.-1742   	; 0xde <Delay100ms>
							RequestCountdown = 30;
 7ac:	d0 93 60 00 	sts	0x0060, r29
							break;
						}
					}
				}
			}
			LED1_ON;
 7b0:	d9 9a       	sbi	0x1b, 1	; 27
			while(keys) wdt_reset(); // wait keys release
 7b2:	80 91 71 00 	lds	r24, 0x0071
 7b6:	88 23       	and	r24, r24
 7b8:	11 f0       	breq	.+4      	; 0x7be <main+0x278>
 7ba:	a8 95       	wdr
 7bc:	fa cf       	rjmp	.-12     	; 0x7b2 <main+0x26c>
 7be:	8b e4       	ldi	r24, 0x4B	; 75
 7c0:	9d e1       	ldi	r25, 0x1D	; 29
 7c2:	01 97       	sbiw	r24, 0x01	; 1
 7c4:	f1 f7       	brne	.-4      	; 0x7c2 <main+0x27c>
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <main+0x282>
 7c8:	00 00       	nop
			_delay_ms(30);
			LED1_OFF;
 7ca:	d9 98       	cbi	0x1b, 1	; 27
		}
		__asm__ volatile ("" ::: "memory"); // Need memory barrier
		if(SpeedSetChanged) {
 7cc:	80 91 6d 00 	lds	r24, 0x006D
 7d0:	88 23       	and	r24, r24
 7d2:	91 f1       	breq	.+100    	; 0x838 <main+0x2f2>
			uint8_t addr = EEPROM_read(EPROM_CurrentSpeedAddr);
 7d4:	8f e0       	ldi	r24, 0x0F	; 15
 7d6:	49 dc       	rcall	.-1902   	; 0x6a <EEPROM_read>
 7d8:	f8 2e       	mov	r15, r24
			if(addr) {
 7da:	88 23       	and	r24, r24
 7dc:	59 f1       	breq	.+86     	; 0x834 <main+0x2ee>
x_save_speed:
				if(EEPROM_read(addr) != SpeedSet) {
 7de:	8f 2d       	mov	r24, r15
 7e0:	44 dc       	rcall	.-1912   	; 0x6a <EEPROM_read>
 7e2:	60 91 73 00 	lds	r22, 0x0073
 7e6:	48 2f       	mov	r20, r24
 7e8:	50 e0       	ldi	r21, 0x00	; 0
 7ea:	26 2f       	mov	r18, r22
 7ec:	33 27       	eor	r19, r19
 7ee:	27 fd       	sbrc	r18, 7
 7f0:	30 95       	com	r19
 7f2:	42 17       	cp	r20, r18
 7f4:	53 07       	cpc	r21, r19
 7f6:	f1 f0       	breq	.+60     	; 0x834 <main+0x2ee>
					EEPROM_write(addr, SpeedSet);
 7f8:	8f 2d       	mov	r24, r15
 7fa:	3f dc       	rcall	.-1922   	; 0x7a <EEPROM_write>
					if(EEPROM_read(addr) != SpeedSet) { // EEPROM cell broken
 7fc:	8f 2d       	mov	r24, r15
 7fe:	35 dc       	rcall	.-1942   	; 0x6a <EEPROM_read>
 800:	48 2f       	mov	r20, r24
 802:	50 e0       	ldi	r21, 0x00	; 0
 804:	20 91 73 00 	lds	r18, 0x0073
 808:	33 27       	eor	r19, r19
 80a:	27 fd       	sbrc	r18, 7
 80c:	30 95       	com	r19
 80e:	42 17       	cp	r20, r18
 810:	53 07       	cpc	r21, r19
 812:	81 f0       	breq	.+32     	; 0x834 <main+0x2ee>
						FlashLED(10, 2, 2);
 814:	42 e0       	ldi	r20, 0x02	; 2
 816:	62 e0       	ldi	r22, 0x02	; 2
 818:	8a e0       	ldi	r24, 0x0A	; 10
 81a:	6d dc       	rcall	.-1830   	; 0xf6 <FlashLED>
						send_data = 0xEE;
 81c:	00 93 66 00 	sts	0x0066, r16
						EEPROM_write(EPROM_CurrentSpeedAddr, ++addr);
 820:	f3 94       	inc	r15
 822:	6f 2d       	mov	r22, r15
 824:	8f e0       	ldi	r24, 0x0F	; 15
 826:	29 dc       	rcall	.-1966   	; 0x7a <EEPROM_write>
						if(addr == 0) { // memory ends
 828:	f1 10       	cpse	r15, r1
 82a:	d9 cf       	rjmp	.-78     	; 0x7de <main+0x298>
							FlashLED(10, 2, 2);
 82c:	42 e0       	ldi	r20, 0x02	; 2
 82e:	62 e0       	ldi	r22, 0x02	; 2
 830:	8a e0       	ldi	r24, 0x0A	; 10
 832:	61 dc       	rcall	.-1854   	; 0xf6 <FlashLED>
							goto x_save_speed;
						}
					}
				}
			}
			SpeedSetChanged = 0;
 834:	10 92 6d 00 	sts	0x006D, r1
		}
		if(RequestCountdown == 0) {
 838:	80 91 60 00 	lds	r24, 0x0060
 83c:	81 11       	cpse	r24, r1
 83e:	ea ce       	rjmp	.-556    	; 0x614 <main+0xce>
			if(setup_mode == 0) {
 840:	80 91 67 00 	lds	r24, 0x0067
 844:	81 11       	cpse	r24, r1
 846:	5b c0       	rjmp	.+182    	; 0x8fe <main+0x3b8>
				//if(1) {
				if(FanSpeedOff == 0 || SendOffStatus == 1) {
 848:	80 91 6b 00 	lds	r24, 0x006B
 84c:	88 23       	and	r24, r24
 84e:	29 f0       	breq	.+10     	; 0x85a <main+0x314>
 850:	90 91 69 00 	lds	r25, 0x0069
 854:	91 30       	cpi	r25, 0x01	; 1
 856:	09 f0       	breq	.+2      	; 0x85a <main+0x314>
 858:	4f c0       	rjmp	.+158    	; 0x8f8 <main+0x3b2>
					if(send_data != 0xEE) send_data = (nrf_last_status << 5) | (FanSpeedOff << 4) | (FanSpeedOverride & 0x0F); // 11123333
 85a:	90 91 66 00 	lds	r25, 0x0066
 85e:	9e 3e       	cpi	r25, 0xEE	; 238
 860:	71 f0       	breq	.+28     	; 0x87e <main+0x338>
 862:	90 91 68 00 	lds	r25, 0x0068
 866:	92 95       	swap	r25
 868:	99 0f       	add	r25, r25
 86a:	90 7e       	andi	r25, 0xE0	; 224
 86c:	82 95       	swap	r24
 86e:	80 7f       	andi	r24, 0xF0	; 240
 870:	89 2b       	or	r24, r25
 872:	90 91 6c 00 	lds	r25, 0x006C
 876:	9f 70       	andi	r25, 0x0F	; 15
 878:	89 2b       	or	r24, r25
 87a:	80 93 66 00 	sts	0x0066, r24
//					if(FanSpeedOff) send_data = NRF24_SendCommand(NRF24_CMD_NOP);
//					else if(FanSpeedOverride == 1) send_data = NRF24_SendCommand(NRF24_CMD_R_REGISTER | NRF24_REG_FIFO_STATUS);
					NRF24_Buffer[0] = send_data;
 87e:	80 91 66 00 	lds	r24, 0x0066
 882:	80 93 75 00 	sts	0x0075, r24
					NRF24_SetMode(NRF24_TransmitMode);
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	b2 dc       	rcall	.-1692   	; 0x1ee <NRF24_SetMode>
					nrf_last_status = NRF24_TransmitShockBurst(1, sizeof(master_data)); // Enhanced ShockBurst, ACK with payload
 88a:	64 e0       	ldi	r22, 0x04	; 4
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	bd dc       	rcall	.-1670   	; 0x20a <NRF24_TransmitShockBurst>
 890:	80 93 68 00 	sts	0x0068, r24
					
					NRF_save_registers();
 894:	02 de       	rcall	.-1020   	; 0x49a <NRF_save_registers>
					
					if(nrf_last_status) { // some problem
 896:	80 91 68 00 	lds	r24, 0x0068
 89a:	88 23       	and	r24, r24
 89c:	29 f0       	breq	.+10     	; 0x8a8 <main+0x362>
						LED_Warning = nrf_last_status;
 89e:	80 93 65 00 	sts	0x0065, r24
						RequestCountdown = EEPROM_read(EPROM_PauseWhenError); // sec
 8a2:	84 e0       	ldi	r24, 0x04	; 4
 8a4:	e2 db       	rcall	.-2108   	; 0x6a <EEPROM_read>
 8a6:	1c c0       	rjmp	.+56     	; 0x8e0 <main+0x39a>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 8a8:	f8 94       	cli
					} else {
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							FanSpeed = ((master_data*) NRF24_Buffer)->FanSpeed + FanSpeedOverride;
 8aa:	20 91 6c 00 	lds	r18, 0x006C
 8ae:	80 91 77 00 	lds	r24, 0x0077
 8b2:	28 0f       	add	r18, r24
 8b4:	20 93 74 00 	sts	0x0074, r18
							if(FanSpeed < 0) FanSpeed = 0; // off
 8b8:	27 ff       	sbrs	r18, 7
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <main+0x37c>
 8bc:	10 92 74 00 	sts	0x0074, r1
 8c0:	0c c0       	rjmp	.+24     	; 0x8da <main+0x394>
							else if(FanSpeed > FanSpeedMax) FanSpeed = FanSpeedMax;
 8c2:	40 91 72 00 	lds	r20, 0x0072
 8c6:	33 27       	eor	r19, r19
 8c8:	27 fd       	sbrc	r18, 7
 8ca:	30 95       	com	r19
 8cc:	84 2f       	mov	r24, r20
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	82 17       	cp	r24, r18
 8d2:	93 07       	cpc	r25, r19
 8d4:	14 f4       	brge	.+4      	; 0x8da <main+0x394>
 8d6:	40 93 74 00 	sts	0x0074, r20
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 8da:	78 94       	sei
						}
						RequestCountdown = ((master_data*) NRF24_Buffer)->Pause;
 8dc:	80 91 78 00 	lds	r24, 0x0078
 8e0:	80 93 60 00 	sts	0x0060, r24
//						FlashLED(FanSpeed, 5, 10);
					}
					if(nrf_last_status <= 1) { // Status was send successfully
 8e4:	80 91 68 00 	lds	r24, 0x0068
 8e8:	82 30       	cpi	r24, 0x02	; 2
 8ea:	20 f4       	brcc	.+8      	; 0x8f4 <main+0x3ae>
						SendOffStatus = 0;
 8ec:	10 92 69 00 	sts	0x0069, r1
						send_data = 0;
 8f0:	10 92 66 00 	sts	0x0066, r1
					}
					NRF24_Powerdown();
 8f4:	f5 dc       	rcall	.-1558   	; 0x2e0 <NRF24_Powerdown>
 8f6:	8e ce       	rjmp	.-740    	; 0x614 <main+0xce>
				} else {
					RequestCountdown = 1; // sec
 8f8:	c0 93 60 00 	sts	0x0060, r28
 8fc:	8b ce       	rjmp	.-746    	; 0x614 <main+0xce>
				}
			} else { // setup mode timeout
				setup_mode = 0;
 8fe:	10 92 67 00 	sts	0x0067, r1
 902:	88 ce       	rjmp	.-752    	; 0x614 <main+0xce>

00000904 <memcpy_P>:
 904:	fb 01       	movw	r30, r22
 906:	dc 01       	movw	r26, r24
 908:	02 c0       	rjmp	.+4      	; 0x90e <memcpy_P+0xa>
 90a:	05 90       	lpm	r0, Z+
 90c:	0d 92       	st	X+, r0
 90e:	41 50       	subi	r20, 0x01	; 1
 910:	50 40       	sbci	r21, 0x00	; 0
 912:	d8 f7       	brcc	.-10     	; 0x90a <memcpy_P+0x6>
 914:	08 95       	ret

00000916 <_exit>:
 916:	f8 94       	cli

00000918 <__stop_program>:
 918:	ff cf       	rjmp	.-2      	; 0x918 <__stop_program>
