
WirelessCO2Fan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000007b4  00000848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800062  00800062  0000084a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  0000087a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010d1  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e7  00000000  00000000  00001a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000063f  00000000  00000000  00001d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000284  00000000  00000000  00002344  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d1  00000000  00000000  000025c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cd1  00000000  00000000  00002a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000376a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	18 c0       	rjmp	.+48     	; 0x32 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__bad_interrupt>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__bad_interrupt>
   6:	45 c0       	rjmp	.+138    	; 0x92 <__vector_3>
   8:	2f c0       	rjmp	.+94     	; 0x68 <__bad_interrupt>
   a:	2e c0       	rjmp	.+92     	; 0x68 <__bad_interrupt>
   c:	2d c0       	rjmp	.+90     	; 0x68 <__bad_interrupt>
   e:	2c c0       	rjmp	.+88     	; 0x68 <__bad_interrupt>
  10:	2b c0       	rjmp	.+86     	; 0x68 <__bad_interrupt>
  12:	2a c0       	rjmp	.+84     	; 0x68 <__bad_interrupt>
  14:	29 c0       	rjmp	.+82     	; 0x68 <__bad_interrupt>
  16:	7b c1       	rjmp	.+758    	; 0x30e <__vector_11>
  18:	27 c0       	rjmp	.+78     	; 0x68 <__bad_interrupt>
  1a:	26 c0       	rjmp	.+76     	; 0x68 <__bad_interrupt>
  1c:	25 c0       	rjmp	.+74     	; 0x68 <__bad_interrupt>
  1e:	24 c0       	rjmp	.+72     	; 0x68 <__bad_interrupt>
  20:	23 c0       	rjmp	.+70     	; 0x68 <__bad_interrupt>

00000022 <NRF24_BASE_ADDR>:
  22:	c8 c8                                               ..

00000024 <NRF24_INIT_DATA>:
  24:	26 07 23 01 24 33 3d 06 21 01 22 01 3c 01           &.#.$3=.!.".<.

00000032 <__ctors_end>:
  32:	11 24       	eor	r1, r1
  34:	1f be       	out	0x3f, r1	; 63
  36:	cf e5       	ldi	r28, 0x5F	; 95
  38:	d1 e0       	ldi	r29, 0x01	; 1
  3a:	de bf       	out	0x3e, r29	; 62
  3c:	cd bf       	out	0x3d, r28	; 61

0000003e <__do_copy_data>:
  3e:	10 e0       	ldi	r17, 0x00	; 0
  40:	a0 e6       	ldi	r26, 0x60	; 96
  42:	b0 e0       	ldi	r27, 0x00	; 0
  44:	e4 eb       	ldi	r30, 0xB4	; 180
  46:	f7 e0       	ldi	r31, 0x07	; 7
  48:	02 c0       	rjmp	.+4      	; 0x4e <__SREG__+0xf>
  4a:	05 90       	lpm	r0, Z+
  4c:	0d 92       	st	X+, r0
  4e:	a2 36       	cpi	r26, 0x62	; 98
  50:	b1 07       	cpc	r27, r17
  52:	d9 f7       	brne	.-10     	; 0x4a <__SREG__+0xb>

00000054 <__do_clear_bss>:
  54:	20 e0       	ldi	r18, 0x00	; 0
  56:	a2 e6       	ldi	r26, 0x62	; 98
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	01 c0       	rjmp	.+2      	; 0x5e <.do_clear_bss_start>

0000005c <.do_clear_bss_loop>:
  5c:	1d 92       	st	X+, r1

0000005e <.do_clear_bss_start>:
  5e:	a6 37       	cpi	r26, 0x76	; 118
  60:	b2 07       	cpc	r27, r18
  62:	e1 f7       	brne	.-8      	; 0x5c <.do_clear_bss_loop>
  64:	da d1       	rcall	.+948    	; 0x41a <main>
  66:	a4 c3       	rjmp	.+1864   	; 0x7b0 <_exit>

00000068 <__bad_interrupt>:
  68:	cb cf       	rjmp	.-106    	; 0x0 <__vectors>

0000006a <EEPROM_read>:
	Delay100ms(20);
}

static uint8_t EEPROM_read(uint8_t ucAddress) // ATtiny24A/44A only!
{
	while(EECR & (1<<EEPE)) ; // EEWE
  6a:	e1 99       	sbic	0x1c, 1	; 28
  6c:	fe cf       	rjmp	.-4      	; 0x6a <EEPROM_read>
	EEAR = ucAddress;
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	9f bb       	out	0x1f, r25	; 31
  72:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
  74:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
  76:	8d b3       	in	r24, 0x1d	; 29
}
  78:	08 95       	ret

0000007a <EEPROM_write>:
static void EEPROM_write(uint8_t ucAddress, uint8_t ucData) // ATtiny24A/44A only!
{
	while(EECR & (1<<EEPE)) ; // EEWE
  7a:	e1 99       	sbic	0x1c, 1	; 28
  7c:	fe cf       	rjmp	.-4      	; 0x7a <EEPROM_write>
	cli();
  7e:	f8 94       	cli
	EECR = (0<<EEPM1)|(0<<EEPM0);
  80:	1c ba       	out	0x1c, r1	; 28
	EEAR = ucAddress;
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	9f bb       	out	0x1f, r25	; 31
  86:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  88:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMPE); //(1<<EEMWE);
  8a:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEPE); //(1<<EEWE);
  8c:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
  8e:	78 94       	sei
  90:	08 95       	ret

00000092 <__vector_3>:
#define KEYS_INTR_INIT				GIMSK |= (1<<PCIE1); PCMSK1 |= (1<<PCINT10) | (1<<PCINT9) | (1<<PCINT8)  // PCINT8..10
volatile uint8_t keys				= 0;
uint8_t PressKey					= 0;
uint8_t PressKeyOffTime				= 0; // *0.1 sec
uint8_t PressKeyOnTime				= 0; // *0.1 sec
ISR(PCINT1_vect) {
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	if(PressKeyOnTime == 0 && PressKeyOffTime == 0) { // not in changing process
  9e:	80 91 6b 00 	lds	r24, 0x006B
  a2:	81 11       	cpse	r24, r1
  a4:	0a c0       	rjmp	.+20     	; 0xba <__vector_3+0x28>
  a6:	80 91 6c 00 	lds	r24, 0x006C
  aa:	81 11       	cpse	r24, r1
  ac:	06 c0       	rjmp	.+12     	; 0xba <__vector_3+0x28>
		keys = ~KEYS_PIN & (KEY_PWR | KEY_MINUS | KEY_PLUS);
  ae:	86 b3       	in	r24, 0x16	; 22
  b0:	80 95       	com	r24
  b2:	87 70       	andi	r24, 0x07	; 7
  b4:	80 93 6e 00 	sts	0x006E, r24
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__vector_3+0x2c>
	} else keys = 0;
  ba:	10 92 6e 00 	sts	0x006E, r1
}
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <Delay10us>:

#define FLAG_LowLight				0x01

#if(1)
void Delay10us(uint8_t ms) {
	while(ms-- > 0) _delay_us(10); wdt_reset();
  ca:	88 23       	and	r24, r24
  cc:	31 f0       	breq	.+12     	; 0xda <Delay10us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	93 e0       	ldi	r25, 0x03	; 3
  d0:	9a 95       	dec	r25
  d2:	f1 f7       	brne	.-4      	; 0xd0 <Delay10us+0x6>
  d4:	00 00       	nop
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	f8 cf       	rjmp	.-16     	; 0xca <Delay10us>
  da:	a8 95       	wdr
  dc:	08 95       	ret

000000de <Delay100ms>:
	while(ms-- > 0) {
		_delay_ms(1); wdt_reset();
	}
}
void Delay100ms(unsigned int ms) {
	while(ms-- > 0) {
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	49 f0       	breq	.+18     	; 0xf4 <Delay100ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	e7 ea       	ldi	r30, 0xA7	; 167
  e4:	f1 e6       	ldi	r31, 0x61	; 97
  e6:	31 97       	sbiw	r30, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <Delay100ms+0x8>
  ea:	00 c0       	rjmp	.+0      	; 0xec <Delay100ms+0xe>
  ec:	00 00       	nop
		_delay_ms(100); wdt_reset();
  ee:	a8 95       	wdr
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f5 cf       	rjmp	.-22     	; 0xde <Delay100ms>
	}
}
  f4:	08 95       	ret

000000f6 <FlashLED>:

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	while (num-- > 0) {
 100:	f8 2e       	mov	r15, r24
		LED1_OFF;
		Delay100ms(toff);
 102:	06 2f       	mov	r16, r22
 104:	10 e0       	ldi	r17, 0x00	; 0
		LED1_ON;
		Delay100ms(ton);
 106:	c4 2f       	mov	r28, r20
 108:	d0 e0       	ldi	r29, 0x00	; 0
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
		LED1_OFF;
 10a:	d9 98       	cbi	0x1b, 1	; 27
		_delay_ms(100); wdt_reset();
	}
}

void FlashLED(uint8_t num, uint8_t toff, uint8_t ton) {
	while (num-- > 0) {
 10c:	ff 20       	and	r15, r15
 10e:	39 f0       	breq	.+14     	; 0x11e <FlashLED+0x28>
		LED1_OFF;
		Delay100ms(toff);
 110:	c8 01       	movw	r24, r16
 112:	e5 df       	rcall	.-54     	; 0xde <Delay100ms>
		LED1_ON;
 114:	d9 9a       	sbi	0x1b, 1	; 27
		Delay100ms(ton);
 116:	ce 01       	movw	r24, r28
 118:	e2 df       	rcall	.-60     	; 0xde <Delay100ms>
 11a:	fa 94       	dec	r15
 11c:	f6 cf       	rjmp	.-20     	; 0x10a <FlashLED+0x14>
	}
	LED1_OFF;
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	08 95       	ret

0000012a <SPI_WriteReadByte>:
	NRF24_CMD_W_REGISTER | NRF24_REG_DYNPD,		0b000001 // Dynamic payload
};
const uint8_t NRF24_BASE_ADDR[] PROGMEM = { 0xC8, 0xC8 }; // Address MSBs: 2..3

uint8_t SPI_WriteReadByte(uint8_t data) {
	USIDR = data;
 12a:	8f b9       	out	0x0f, r24	; 15
	USISR = (1<<USIOIF); // clear overflow flag
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	8e b9       	out	0x0e, r24	; 14
	do {
		USICR = (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);
 130:	8b e1       	ldi	r24, 0x1B	; 27
 132:	8d b9       	out	0x0d, r24	; 13
	} while((USISR & (1<<USIOIF)) == 0);
 134:	76 9b       	sbis	0x0e, 6	; 14
 136:	fd cf       	rjmp	.-6      	; 0x132 <SPI_WriteReadByte+0x8>
	return USIDR;
 138:	8f b1       	in	r24, 0x0f	; 15
}
 13a:	08 95       	ret

0000013c <NRF24_ReadArray>:
	NRF24_SET_CSN_HI;
	return result;
}

void NRF24_ReadArray(uint8_t cmd, uint8_t *array, uint8_t len)
{
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	00 d0       	rcall	.+0      	; 0x148 <NRF24_ReadArray+0xc>
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 14e:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 150:	69 83       	std	Y+1, r22	; 0x01
 152:	7a 83       	std	Y+2, r23	; 0x02
 154:	ea df       	rcall	.-44     	; 0x12a <SPI_WriteReadByte>
	while(len-- > 0) *array++ = SPI_WriteReadByte(NRF24_CMD_NOP);
 156:	69 81       	ldd	r22, Y+1	; 0x01
 158:	e6 2e       	mov	r14, r22
 15a:	7a 81       	ldd	r23, Y+2	; 0x02
 15c:	f7 2e       	mov	r15, r23
 15e:	16 0f       	add	r17, r22
 160:	1e 15       	cp	r17, r14
 162:	31 f0       	breq	.+12     	; 0x170 <__stack+0x11>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	e1 df       	rcall	.-62     	; 0x12a <SPI_WriteReadByte>
 168:	f7 01       	movw	r30, r14
 16a:	81 93       	st	Z+, r24
 16c:	7f 01       	movw	r14, r30
 16e:	f8 cf       	rjmp	.-16     	; 0x160 <__stack+0x1>
	NRF24_SET_CSN_HI;
 170:	db 9a       	sbi	0x1b, 3	; 27
}
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	08 95       	ret

00000182 <NRF24_WriteByte>:

void NRF24_WriteByte(uint8_t cmd, uint8_t value)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
	NRF24_SET_CSN_LOW;
 18c:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 18e:	69 83       	std	Y+1, r22	; 0x01
 190:	cc df       	rcall	.-104    	; 0x12a <SPI_WriteReadByte>
	SPI_WriteReadByte(value);
 192:	69 81       	ldd	r22, Y+1	; 0x01
 194:	86 2f       	mov	r24, r22
 196:	c9 df       	rcall	.-110    	; 0x12a <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 198:	db 9a       	sbi	0x1b, 3	; 27
}
 19a:	0f 90       	pop	r0
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <NRF24_WriteArray>:

void NRF24_WriteArray(int8_t cmd, uint8_t *array, uint8_t len)
{
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	00 d0       	rcall	.+0      	; 0x1ae <NRF24_WriteArray+0xc>
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	14 2f       	mov	r17, r20
	NRF24_SET_CSN_LOW;
 1b4:	db 98       	cbi	0x1b, 3	; 27
	SPI_WriteReadByte(cmd);
 1b6:	69 83       	std	Y+1, r22	; 0x01
 1b8:	7a 83       	std	Y+2, r23	; 0x02
 1ba:	b7 df       	rcall	.-146    	; 0x12a <SPI_WriteReadByte>
	while(len-- > 0) SPI_WriteReadByte(*array++);
 1bc:	69 81       	ldd	r22, Y+1	; 0x01
 1be:	e6 2e       	mov	r14, r22
 1c0:	7a 81       	ldd	r23, Y+2	; 0x02
 1c2:	f7 2e       	mov	r15, r23
 1c4:	16 0f       	add	r17, r22
 1c6:	1e 15       	cp	r17, r14
 1c8:	29 f0       	breq	.+10     	; 0x1d4 <NRF24_WriteArray+0x32>
 1ca:	f7 01       	movw	r30, r14
 1cc:	81 91       	ld	r24, Z+
 1ce:	7f 01       	movw	r14, r30
 1d0:	ac df       	rcall	.-168    	; 0x12a <SPI_WriteReadByte>
 1d2:	f9 cf       	rjmp	.-14     	; 0x1c6 <NRF24_WriteArray+0x24>
	NRF24_SET_CSN_HI;
 1d4:	db 9a       	sbi	0x1b, 3	; 27
}
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	08 95       	ret

000001e6 <NRF24_SendCommand>:

uint8_t NRF24_SendCommand(uint8_t cmd) // Send command & receive status
{
	NRF24_SET_CSN_LOW;
 1e6:	db 98       	cbi	0x1b, 3	; 27
	uint8_t result = SPI_WriteReadByte(cmd);
 1e8:	a0 df       	rcall	.-192    	; 0x12a <SPI_WriteReadByte>
	NRF24_SET_CSN_HI;
 1ea:	db 9a       	sbi	0x1b, 3	; 27
	return result;
}
 1ec:	08 95       	ret

000001ee <NRF24_SetMode>:

void NRF24_SetMode(uint8_t mode) // Set mode in CONFIG reg
{
 1ee:	cf 93       	push	r28
 1f0:	c8 2f       	mov	r28, r24
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG | (1<<NRF24_BIT_PWR_UP) | mode);
 1f2:	68 2f       	mov	r22, r24
 1f4:	6e 67       	ori	r22, 0x7E	; 126
 1f6:	80 e2       	ldi	r24, 0x20	; 32
 1f8:	c4 df       	rcall	.-120    	; 0x182 <NRF24_WriteByte>
	if(mode & NRF24_ReceiveMode) { // Receive mode
 1fa:	c0 ff       	sbrs	r28, 0
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <NRF24_SetMode+0x18>
		//NRF24_SendCommand(NRF24_CMD_FLUSH_RX);
		NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 1fe:	60 e7       	ldi	r22, 0x70	; 112
 200:	87 e2       	ldi	r24, 0x27	; 39
 202:	bf df       	rcall	.-130    	; 0x182 <NRF24_WriteByte>
		NRF24_SET_CE_HI; // start receiving
 204:	da 9a       	sbi	0x1b, 2	; 27
	}
}
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <NRF24_TransmitShockBurst>:
}

// Transmit payload, than receive payload.
// return 0 if success, 1 - Max retransmit reached, 2 - Payload not returned,  3 - return payload len error, 4 - module not responding.
uint8_t NRF24_TransmitShockBurst(uint8_t send_len, uint8_t receive_len)
{
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	1f 92       	push	r1
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	48 2f       	mov	r20, r24
 21a:	06 2f       	mov	r16, r22
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
 21c:	60 e7       	ldi	r22, 0x70	; 112
 21e:	87 e2       	ldi	r24, 0x27	; 39
 220:	49 83       	std	Y+1, r20	; 0x01
 222:	af df       	rcall	.-162    	; 0x182 <NRF24_WriteByte>
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
 224:	81 ee       	ldi	r24, 0xE1	; 225
 226:	df df       	rcall	.-66     	; 0x1e6 <NRF24_SendCommand>
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, NRF24_Buffer, send_len);
 228:	49 81       	ldd	r20, Y+1	; 0x01
 22a:	61 e7       	ldi	r22, 0x71	; 113
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	80 ea       	ldi	r24, 0xA0	; 160
 230:	b8 df       	rcall	.-144    	; 0x1a2 <NRF24_WriteArray>
	NRF24_SET_CE_HI; // Start transmission
 232:	da 9a       	sbi	0x1b, 2	; 27
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 234:	11 e0       	ldi	r17, 0x01	; 1
	{
		Delay10us(10);
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	48 df       	rcall	.-368    	; 0xca <Delay10us>
		st = NRF24_SendCommand(NRF24_CMD_NOP);
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	d4 df       	rcall	.-88     	; 0x1e6 <NRF24_SendCommand>
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
 23e:	98 2f       	mov	r25, r24
 240:	90 73       	andi	r25, 0x30	; 48
 242:	11 f4       	brne	.+4      	; 0x248 <NRF24_TransmitShockBurst+0x3e>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_STATUS, (1<<NRF24_BIT_RX_DR) | (1<<NRF24_BIT_TX_DS) | (1<<NRF24_BIT_MAX_RT)); // clear status
	NRF24_SendCommand(NRF24_CMD_FLUSH_TX);
	NRF24_WriteArray(NRF24_CMD_W_TX_PAYLOAD, NRF24_Buffer, send_len);
	NRF24_SET_CE_HI; // Start transmission
	uint8_t st = 0, i;
	for(i = 1; i != 0; i++)
 244:	1f 5f       	subi	r17, 0xFF	; 255
 246:	b9 f7       	brne	.-18     	; 0x236 <NRF24_TransmitShockBurst+0x2c>
	{
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	NRF24_SET_CE_LOW;
 248:	da 98       	cbi	0x1b, 2	; 27
	if(i == 0) return 4;
 24a:	11 23       	and	r17, r17
 24c:	d1 f0       	breq	.+52     	; 0x282 <NRF24_TransmitShockBurst+0x78>
	if(st & (1<<NRF24_BIT_MAX_RT)) return 1;
 24e:	18 2f       	mov	r17, r24
 250:	10 71       	andi	r17, 0x10	; 16
 252:	84 fd       	sbrc	r24, 4
 254:	18 c0       	rjmp	.+48     	; 0x286 <NRF24_TransmitShockBurst+0x7c>
	if(st & (1<<NRF24_BIT_RX_DR)) {
 256:	86 ff       	sbrs	r24, 6
 258:	18 c0       	rjmp	.+48     	; 0x28a <NRF24_TransmitShockBurst+0x80>
		NRF24_Buffer[0] = 0xFF;
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	80 93 71 00 	sts	0x0071, r24
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	61 e7       	ldi	r22, 0x71	; 113
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e6       	ldi	r24, 0x60	; 96
 268:	69 df       	rcall	.-302    	; 0x13c <NRF24_ReadArray>
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
 26a:	80 91 71 00 	lds	r24, 0x0071
 26e:	81 32       	cpi	r24, 0x21	; 33
 270:	70 f4       	brcc	.+28     	; 0x28e <NRF24_TransmitShockBurst+0x84>
 272:	80 17       	cp	r24, r16
 274:	60 f0       	brcs	.+24     	; 0x28e <NRF24_TransmitShockBurst+0x84>
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
 276:	40 2f       	mov	r20, r16
 278:	61 e7       	ldi	r22, 0x71	; 113
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	81 e6       	ldi	r24, 0x61	; 97
 27e:	5e df       	rcall	.-324    	; 0x13c <NRF24_ReadArray>
		return  0;
 280:	07 c0       	rjmp	.+14     	; 0x290 <NRF24_TransmitShockBurst+0x86>
		Delay10us(10);
		st = NRF24_SendCommand(NRF24_CMD_NOP);
		if(st & ((1<<NRF24_BIT_MAX_RT) | (1<<NRF24_BIT_TX_DS))) break; // stop if sent or max retransmit reached
	}
	NRF24_SET_CE_LOW;
	if(i == 0) return 4;
 282:	14 e0       	ldi	r17, 0x04	; 4
 284:	05 c0       	rjmp	.+10     	; 0x290 <NRF24_TransmitShockBurst+0x86>
	if(st & (1<<NRF24_BIT_MAX_RT)) return 1;
 286:	11 e0       	ldi	r17, 0x01	; 1
 288:	03 c0       	rjmp	.+6      	; 0x290 <NRF24_TransmitShockBurst+0x86>
		NRF24_Buffer[0] = 0xFF;
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
		return  0;
	} else return 2;
 28a:	12 e0       	ldi	r17, 0x02	; 2
 28c:	01 c0       	rjmp	.+2      	; 0x290 <NRF24_TransmitShockBurst+0x86>
	if(i == 0) return 4;
	if(st & (1<<NRF24_BIT_MAX_RT)) return 1;
	if(st & (1<<NRF24_BIT_RX_DR)) {
		NRF24_Buffer[0] = 0xFF;
		NRF24_ReadArray(NRF24_CMD_R_RX_PL_WID, NRF24_Buffer, 1); // get RX payload len
		if(NRF24_Buffer[0] > 32 || NRF24_Buffer[0] < receive_len) return 3;
 28e:	13 e0       	ldi	r17, 0x03	; 3
		NRF24_ReadArray(NRF24_CMD_R_RX_PAYLOAD, NRF24_Buffer, receive_len); // get RX payload len
		return  0;
	} else return 2;
}
 290:	81 2f       	mov	r24, r17
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <NRF24_SetAddresses>:

uint8_t NRF24_SetAddresses(uint8_t addr_LSB) // Set addresses: NRF24_BASE_ADDR + addr_LSB, return 1 if success
{
 29e:	cf 93       	push	r28
 2a0:	c8 2f       	mov	r28, r24
	NRF24_Buffer[0] = addr_LSB;
 2a2:	80 93 71 00 	sts	0x0071, r24
	memcpy_P(NRF24_Buffer + 1, NRF24_BASE_ADDR, sizeof(NRF24_BASE_ADDR)/sizeof(NRF24_BASE_ADDR[0]));
 2a6:	42 e0       	ldi	r20, 0x02	; 2
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	62 e2       	ldi	r22, 0x22	; 34
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	82 e7       	ldi	r24, 0x72	; 114
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	75 d2       	rcall	.+1258   	; 0x79e <memcpy_P>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_RX_ADDR_P0, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2b4:	43 e0       	ldi	r20, 0x03	; 3
 2b6:	61 e7       	ldi	r22, 0x71	; 113
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	8a e2       	ldi	r24, 0x2A	; 42
 2bc:	72 df       	rcall	.-284    	; 0x1a2 <NRF24_WriteArray>
	NRF24_WriteArray(NRF24_CMD_W_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2be:	43 e0       	ldi	r20, 0x03	; 3
 2c0:	61 e7       	ldi	r22, 0x71	; 113
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	80 e3       	ldi	r24, 0x30	; 48
 2c6:	6d df       	rcall	.-294    	; 0x1a2 <NRF24_WriteArray>
	NRF24_ReadArray(NRF24_CMD_R_REGISTER | NRF24_REG_TX_ADDR, NRF24_Buffer, NRF24_ADDRESS_LEN);
 2c8:	43 e0       	ldi	r20, 0x03	; 3
 2ca:	61 e7       	ldi	r22, 0x71	; 113
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	80 e1       	ldi	r24, 0x10	; 16
 2d0:	35 df       	rcall	.-406    	; 0x13c <NRF24_ReadArray>
	return NRF24_Buffer[0] == addr_LSB;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 91 71 00 	lds	r25, 0x0071
 2d8:	9c 13       	cpse	r25, r28
 2da:	80 e0       	ldi	r24, 0x00	; 0
}
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <NRF24_init>:
	NRF24_SET_CE_LOW;
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_CONFIG, NRF24_CONFIG); // Power down
}

void NRF24_init(uint8_t channel) // After init transmit must be delayed
{
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	18 2f       	mov	r17, r24
	NRF24_SET_CSN_HI;
 2e8:	db 9a       	sbi	0x1b, 3	; 27
 2ea:	c4 e2       	ldi	r28, 0x24	; 36
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i = 0, c, v;
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 2ee:	fe 01       	movw	r30, r28
 2f0:	84 91       	lpm	r24, Z
 2f2:	31 96       	adiw	r30, 0x01	; 1
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
 2f4:	64 91       	lpm	r22, Z
		NRF24_WriteByte(c, v); 
 2f6:	45 df       	rcall	.-374    	; 0x182 <NRF24_WriteByte>
 2f8:	22 96       	adiw	r28, 0x02	; 2
	} while(i < sizeof(NRF24_INIT_DATA));
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	c2 33       	cpi	r28, 0x32	; 50
 2fe:	df 07       	cpc	r29, r31
 300:	b1 f7       	brne	.-20     	; 0x2ee <NRF24_init+0xe>
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 302:	61 2f       	mov	r22, r17
 304:	85 e2       	ldi	r24, 0x25	; 37
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
	do {
		c = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		v = pgm_read_byte(&NRF24_INIT_DATA[i++]);
		NRF24_WriteByte(c, v); 
	} while(i < sizeof(NRF24_INIT_DATA));
	NRF24_WriteByte(NRF24_CMD_W_REGISTER | NRF24_REG_RF_CH,	channel);
 30c:	3a cf       	rjmp	.-396    	; 0x182 <NRF24_WriteByte>

0000030e <__vector_11>:

#define SETUP_WATCHDOG WDTCSR = (1<<WDCE) | (1<<WDE); WDTCSR = (1<<WDE) | (0<<WDIE) | (0<<WDP3) | (1<<WDP2) | (1<<WDP1) | (0<<WDP0); //  Watchdog reset 1 s
//uint8_t LED_Warning = 0, LED_WarningOnCnt = 0, LED_WarningOffCnt = 0;

ISR(TIM0_OVF_vect) // 0.10035 sec
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
	if(++TimerCntSec == 10) { // 1 sec
 322:	80 91 66 00 	lds	r24, 0x0066
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	80 93 66 00 	sts	0x0066, r24
 32c:	8a 30       	cpi	r24, 0x0A	; 10
 32e:	49 f4       	brne	.+18     	; 0x342 <__vector_11+0x34>
		TimerCntSec = 0;
 330:	10 92 66 00 	sts	0x0066, r1
		if(RequestCountdown) RequestCountdown--;
 334:	80 91 61 00 	lds	r24, 0x0061
 338:	88 23       	and	r24, r24
 33a:	19 f0       	breq	.+6      	; 0x342 <__vector_11+0x34>
 33c:	81 50       	subi	r24, 0x01	; 1
 33e:	80 93 61 00 	sts	0x0061, r24
	}
	if(FanSpeed != SpeedSet) {
 342:	80 91 6a 00 	lds	r24, 0x006A
 346:	90 91 70 00 	lds	r25, 0x0070
 34a:	89 17       	cp	r24, r25
 34c:	09 f4       	brne	.+2      	; 0x350 <__vector_11+0x42>
 34e:	5b c0       	rjmp	.+182    	; 0x406 <__vector_11+0xf8>
		if(PressKeyOffTime) {
 350:	20 91 6c 00 	lds	r18, 0x006C
 354:	22 23       	and	r18, r18
 356:	61 f0       	breq	.+24     	; 0x370 <__vector_11+0x62>
			if(--PressKeyOffTime == 0) {
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	82 0f       	add	r24, r18
 35c:	80 93 6c 00 	sts	0x006C, r24
 360:	81 11       	cpse	r24, r1
 362:	51 c0       	rjmp	.+162    	; 0x406 <__vector_11+0xf8>
				KEYS_DDR |= PressKey; // set Out, level 0
 364:	87 b3       	in	r24, 0x17	; 23
 366:	90 91 6d 00 	lds	r25, 0x006D
 36a:	89 2b       	or	r24, r25
 36c:	87 bb       	out	0x17, r24	; 23
 36e:	4b c0       	rjmp	.+150    	; 0x406 <__vector_11+0xf8>
			}
		} else if(PressKeyOnTime) {
 370:	20 91 6b 00 	lds	r18, 0x006B
 374:	22 23       	and	r18, r18
 376:	b9 f1       	breq	.+110    	; 0x3e6 <__vector_11+0xd8>
			if(--PressKeyOnTime == 0) {
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	82 0f       	add	r24, r18
 37c:	80 93 6b 00 	sts	0x006B, r24
 380:	81 11       	cpse	r24, r1
 382:	41 c0       	rjmp	.+130    	; 0x406 <__vector_11+0xf8>
				KEYS_DDR &= ~PressKey; // set In
 384:	97 b3       	in	r25, 0x17	; 23
 386:	80 91 6d 00 	lds	r24, 0x006D
 38a:	80 95       	com	r24
 38c:	89 23       	and	r24, r25
 38e:	87 bb       	out	0x17, r24	; 23
				if(PressKey == KEY_PWR) SpeedSet = FanSpeed;
 390:	80 91 6d 00 	lds	r24, 0x006D
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	29 f4       	brne	.+10     	; 0x3a2 <__vector_11+0x94>
 398:	80 91 6a 00 	lds	r24, 0x006A
 39c:	80 93 70 00 	sts	0x0070, r24
 3a0:	0b c0       	rjmp	.+22     	; 0x3b8 <__vector_11+0xaa>
 3a2:	90 91 70 00 	lds	r25, 0x0070
				else if(PressKey == KEY_MINUS) SpeedSet--;
 3a6:	82 30       	cpi	r24, 0x02	; 2
 3a8:	11 f4       	brne	.+4      	; 0x3ae <__vector_11+0xa0>
 3aa:	91 50       	subi	r25, 0x01	; 1
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <__vector_11+0xa6>
				else if(PressKey == KEY_PLUS) SpeedSet++;
 3ae:	84 30       	cpi	r24, 0x04	; 4
 3b0:	19 f4       	brne	.+6      	; 0x3b8 <__vector_11+0xaa>
 3b2:	9f 5f       	subi	r25, 0xFF	; 255
 3b4:	90 93 70 00 	sts	0x0070, r25
				if(SpeedSet < 0) SpeedSet = 0;
 3b8:	20 91 70 00 	lds	r18, 0x0070
 3bc:	27 ff       	sbrs	r18, 7
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <__vector_11+0xb8>
 3c0:	10 92 70 00 	sts	0x0070, r1
 3c4:	0c c0       	rjmp	.+24     	; 0x3de <__vector_11+0xd0>
				else if(SpeedSet > FanSpeedMax) SpeedSet = FanSpeedMax;
 3c6:	40 91 6f 00 	lds	r20, 0x006F
 3ca:	33 27       	eor	r19, r19
 3cc:	27 fd       	sbrc	r18, 7
 3ce:	30 95       	com	r19
 3d0:	84 2f       	mov	r24, r20
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	82 17       	cp	r24, r18
 3d6:	93 07       	cpc	r25, r19
 3d8:	14 f4       	brge	.+4      	; 0x3de <__vector_11+0xd0>
 3da:	40 93 70 00 	sts	0x0070, r20
				SpeedSetChanged = 1;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	80 93 69 00 	sts	0x0069, r24
 3e4:	10 c0       	rjmp	.+32     	; 0x406 <__vector_11+0xf8>
			}
		} else {
			if(FanSpeed == 0) { // off
 3e6:	81 11       	cpse	r24, r1
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <__vector_11+0xe0>
				PressKey = KEY_PWR;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <__vector_11+0xea>
			} else if(FanSpeed < SpeedSet) { // less
 3ee:	89 17       	cp	r24, r25
 3f0:	14 f4       	brge	.+4      	; 0x3f6 <__vector_11+0xe8>
				PressKey = KEY_MINUS;
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <__vector_11+0xea>
			} else {
				PressKey = KEY_PLUS;
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	80 93 6d 00 	sts	0x006D, r24
			}
			PressKeyOffTime = 2;
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	80 93 6c 00 	sts	0x006C, r24
			PressKeyOnTime = 2;
 402:	80 93 6b 00 	sts	0x006B, r24
// 	} else if(LED_Warning) { // short flashes
// 		LED_WarningOffCnt = 2;
// 		LED_WarningOnCnt = 2;
// 		if(--LED_Warning == 0) LED_WarningOffCnt = 15;
// 	}
}
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	4f 91       	pop	r20
 40c:	3f 91       	pop	r19
 40e:	2f 91       	pop	r18
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <main>:

int main(void)
{
	CLKPR = (1<<CLKPCE); CLKPR = (0<<CLKPS3) | (0<<CLKPS2) | (1<<CLKPS1) | (1<<CLKPS0); // Clock prescaler: 8
 41a:	80 e8       	ldi	r24, 0x80	; 128
 41c:	86 bd       	out	0x26, r24	; 38
 41e:	93 e0       	ldi	r25, 0x03	; 3
 420:	96 bd       	out	0x26, r25	; 38
	MCUCR = (1<<SE) | (0<<SM1) | (0<<SM0); // Idle sleep enable
 422:	80 e2       	ldi	r24, 0x20	; 32
 424:	85 bf       	out	0x35, r24	; 53
	KEYS_DDR &= ~(KEY_PWR | KEY_MINUS | KEY_PLUS); // In
 426:	87 b3       	in	r24, 0x17	; 23
 428:	88 7f       	andi	r24, 0xF8	; 248
 42a:	87 bb       	out	0x17, r24	; 23
	KEYS_PORT &= ~(KEY_PWR | KEY_MINUS | KEY_PLUS); // = 0
 42c:	88 b3       	in	r24, 0x18	; 24
 42e:	88 7f       	andi	r24, 0xF8	; 248
 430:	88 bb       	out	0x18, r24	; 24
	DDRA = LED1; // Out
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	8a bb       	out	0x1a, r24	; 26
	PORTA = (1<<PORTA7) | (1<<PORTA0); // pullup not used pins
 436:	81 e8       	ldi	r24, 0x81	; 129
 438:	8b bb       	out	0x1b, r24	; 27
	NRF24_DDR |= NRF24_CE | NRF24_CSN | NRF24_SCK | NRF24_MOSI; // Out
 43a:	8a b3       	in	r24, 0x1a	; 26
 43c:	8c 63       	ori	r24, 0x3C	; 60
 43e:	8a bb       	out	0x1a, r24	; 26
//	// Timer 8 bit
 	TCCR0A = (1<<WGM01) | (1<<WGM00);  // Timer0: Fast PWM OCRA
 440:	90 bf       	out	0x30, r25	; 48
 	TCCR0B = (1<<WGM02) | (1 << CS02) | (0 << CS01) | (1 << CS00); // Timer0 prescaller: 1024
 442:	8d e0       	ldi	r24, 0x0D	; 13
 444:	83 bf       	out	0x33, r24	; 51
 	TIMSK0 |= (1<<TOIE0); // Timer/Counter0 Overflow Interrupt Enable
 446:	89 b7       	in	r24, 0x39	; 57
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	89 bf       	out	0x39, r24	; 57
 	OCR0A = 97; // OC0A(TOP)=Fclk/prescaller/Freq - 1; Freq=Fclk/(prescaller*(1+TOP))
 44c:	81 e6       	ldi	r24, 0x61	; 97
 44e:	86 bf       	out	0x36, r24	; 54
 	//OCR0B = 0; // 0..OCR0A, Half Duty cycle = ((TOP+1)/2-1)
	//TCCR0A |= (1<<COM0B1); // Start PWM out
	FanSpeedMax = EEPROM_read(EPROM_FanSpeedMax);
 450:	83 e0       	ldi	r24, 0x03	; 3
 452:	0b de       	rcall	.-1002   	; 0x6a <EEPROM_read>
 454:	80 93 6f 00 	sts	0x006F, r24
	if(FanSpeedMax == 0xFF) {
 458:	8f 3f       	cpi	r24, 0xFF	; 255
 45a:	91 f4       	brne	.+36     	; 0x480 <main+0x66>
		EEPROM_write(EPROM_OSCCAL, OSCCAL);
 45c:	61 b7       	in	r22, 0x31	; 49
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0c de       	rcall	.-1000   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_CurrentSpeedAddr, EPROM_CurrentSpeedAddr + 1);
 462:	61 e8       	ldi	r22, 0x81	; 129
 464:	80 e8       	ldi	r24, 0x80	; 128
 466:	09 de       	rcall	.-1006   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_CurrentSpeedAddr + 1, 0);
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	81 e8       	ldi	r24, 0x81	; 129
 46c:	06 de       	rcall	.-1012   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_FanSpeedMax, 7);
 46e:	67 e0       	ldi	r22, 0x07	; 7
 470:	83 e0       	ldi	r24, 0x03	; 3
 472:	03 de       	rcall	.-1018   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_RFAddress, 0xE5);
 474:	65 ee       	ldi	r22, 0xE5	; 229
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	00 de       	rcall	.-1024   	; 0x7a <EEPROM_write>
		EEPROM_write(EPROM_RF_Channel, 120);
 47a:	68 e7       	ldi	r22, 0x78	; 120
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	fd dd       	rcall	.-1030   	; 0x7a <EEPROM_write>
	}
	//OSCCAL = EEPROM_read(EPROM_OSCCAL);
	SpeedSet = EEPROM_read(EEPROM_read(EPROM_CurrentSpeedAddr));
 480:	80 e8       	ldi	r24, 0x80	; 128
 482:	f3 dd       	rcall	.-1050   	; 0x6a <EEPROM_read>
 484:	f2 dd       	rcall	.-1052   	; 0x6a <EEPROM_read>
 486:	80 93 70 00 	sts	0x0070, r24
	NRF24_init(EEPROM_read(EPROM_RF_Channel)); // After init transmit must be delayed
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	ee dd       	rcall	.-1060   	; 0x6a <EEPROM_read>
 48e:	28 df       	rcall	.-432    	; 0x2e0 <NRF24_init>
	KEYS_INTR_INIT;
 490:	8b b7       	in	r24, 0x3b	; 59
 492:	80 62       	ori	r24, 0x20	; 32
 494:	8b bf       	out	0x3b, r24	; 59
 496:	80 b5       	in	r24, 0x20	; 32
 498:	87 60       	ori	r24, 0x07	; 7
 49a:	80 bd       	out	0x20, r24	; 32
	SETUP_WATCHDOG;
 49c:	88 e1       	ldi	r24, 0x18	; 24
 49e:	81 bd       	out	0x21, r24	; 33
 4a0:	8e e0       	ldi	r24, 0x0E	; 14
 4a2:	81 bd       	out	0x21, r24	; 33
	sei();
 4a4:	78 94       	sei
 	while(!NRF24_SetAddresses(EEPROM_read(EPROM_RFAddress))) {
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	e0 dd       	rcall	.-1088   	; 0x6a <EEPROM_read>
 4aa:	f9 de       	rcall	.-526    	; 0x29e <NRF24_SetAddresses>
 4ac:	81 11       	cpse	r24, r1
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <main+0xa0>
 		FlashLED(1, 50, 20);
 4b0:	44 e1       	ldi	r20, 0x14	; 20
 4b2:	62 e3       	ldi	r22, 0x32	; 50
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	1f de       	rcall	.-962    	; 0xf6 <FlashLED>
 4b8:	f6 cf       	rjmp	.-20     	; 0x4a6 <main+0x8c>
 	}
	NRF24_SetMode(NRF24_TransmitMode);
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	98 de       	rcall	.-720    	; 0x1ee <NRF24_SetMode>
				if(PressKeyOnTime == 0 && PressKeyOffTime == 0) { // not in changing process
					LED1_ON;
					while(keys) {
						wdt_reset(); // wait keys release
						if((keys & KEY_MINUS) && (keys & KEY_PLUS)) {
							setup_mode = 1;
 4be:	11 e0       	ldi	r17, 0x01	; 1
x_save_speed:			
			if(EEPROM_read(addr) != SpeedSet) {
				EEPROM_write(addr, SpeedSet);
				if(EEPROM_read(addr) != SpeedSet) { // EEPROM cell broken
					FlashLED(10, 2, 2);
					send_data = 0xEE;
 4c0:	0e ee       	ldi	r16, 0xEE	; 238
				if(PressKeyOnTime == 0 && PressKeyOffTime == 0) { // not in changing process
					LED1_ON;
					while(keys) {
						wdt_reset(); // wait keys release
						if((keys & KEY_MINUS) && (keys & KEY_PLUS)) {
							setup_mode = 1;
 4c2:	c1 e0       	ldi	r28, 0x01	; 1
							FlashLED(5, 2, 2);
							Delay100ms(30);
							RequestCountdown = 30;
 4c4:	de e1       	ldi	r29, 0x1E	; 30
 	}
	NRF24_SetMode(NRF24_TransmitMode);
	while(1)
	{
		__asm__ volatile ("" ::: "memory"); // Need memory barrier
		sleep_cpu();
 4c6:	88 95       	sleep
		wdt_reset();
 4c8:	a8 95       	wdr
		if(SpeedSetChanged) {
 4ca:	80 91 69 00 	lds	r24, 0x0069
 4ce:	88 23       	and	r24, r24
 4d0:	81 f1       	breq	.+96     	; 0x532 <main+0x118>
			uint8_t addr = EEPROM_read(EPROM_CurrentSpeedAddr);
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	ca dd       	rcall	.-1132   	; 0x6a <EEPROM_read>
 4d6:	f8 2e       	mov	r15, r24
x_save_speed:			
			if(EEPROM_read(addr) != SpeedSet) {
 4d8:	8f 2d       	mov	r24, r15
 4da:	c7 dd       	rcall	.-1138   	; 0x6a <EEPROM_read>
 4dc:	60 91 70 00 	lds	r22, 0x0070
 4e0:	48 2f       	mov	r20, r24
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	26 2f       	mov	r18, r22
 4e6:	33 27       	eor	r19, r19
 4e8:	27 fd       	sbrc	r18, 7
 4ea:	30 95       	com	r19
 4ec:	42 17       	cp	r20, r18
 4ee:	53 07       	cpc	r21, r19
 4f0:	f1 f0       	breq	.+60     	; 0x52e <main+0x114>
				EEPROM_write(addr, SpeedSet);
 4f2:	8f 2d       	mov	r24, r15
 4f4:	c2 dd       	rcall	.-1148   	; 0x7a <EEPROM_write>
				if(EEPROM_read(addr) != SpeedSet) { // EEPROM cell broken
 4f6:	8f 2d       	mov	r24, r15
 4f8:	b8 dd       	rcall	.-1168   	; 0x6a <EEPROM_read>
 4fa:	48 2f       	mov	r20, r24
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	20 91 70 00 	lds	r18, 0x0070
 502:	33 27       	eor	r19, r19
 504:	27 fd       	sbrc	r18, 7
 506:	30 95       	com	r19
 508:	42 17       	cp	r20, r18
 50a:	53 07       	cpc	r21, r19
 50c:	81 f0       	breq	.+32     	; 0x52e <main+0x114>
					FlashLED(10, 2, 2);
 50e:	42 e0       	ldi	r20, 0x02	; 2
 510:	62 e0       	ldi	r22, 0x02	; 2
 512:	8a e0       	ldi	r24, 0x0A	; 10
 514:	f0 dd       	rcall	.-1056   	; 0xf6 <FlashLED>
					send_data = 0xEE;
 516:	00 93 62 00 	sts	0x0062, r16
					if(++addr == 0) { // memory ends
 51a:	f3 94       	inc	r15
 51c:	21 f4       	brne	.+8      	; 0x526 <main+0x10c>
						EEPROM_write(addr, 0);
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	ab dd       	rcall	.-1194   	; 0x7a <EEPROM_write>
 524:	04 c0       	rjmp	.+8      	; 0x52e <main+0x114>
						} else {
						EEPROM_write(EPROM_CurrentSpeedAddr, addr);
 526:	6f 2d       	mov	r22, r15
 528:	80 e8       	ldi	r24, 0x80	; 128
 52a:	a7 dd       	rcall	.-1202   	; 0x7a <EEPROM_write>
						goto x_save_speed;
 52c:	d5 cf       	rjmp	.-86     	; 0x4d8 <main+0xbe>
					}
				}
			}
			SpeedSetChanged = 0;
 52e:	10 92 69 00 	sts	0x0069, r1
		}
		if(keys) {
 532:	80 91 6e 00 	lds	r24, 0x006E
 536:	88 23       	and	r24, r24
 538:	09 f4       	brne	.+2      	; 0x53c <main+0x122>
 53a:	d0 c0       	rjmp	.+416    	; 0x6dc <main+0x2c2>
			if(keys & KEY_PWR) {
 53c:	80 91 6e 00 	lds	r24, 0x006E
 540:	80 ff       	sbrs	r24, 0
 542:	0e c0       	rjmp	.+28     	; 0x560 <main+0x146>
				FanSpeedOverrideOff ^= 1;
 544:	80 91 67 00 	lds	r24, 0x0067
 548:	81 27       	eor	r24, r17
 54a:	80 93 67 00 	sts	0x0067, r24
				if(FanSpeedOverrideOff == 0 && setup_mode) setup_mode = 0;
 54e:	81 11       	cpse	r24, r1
 550:	05 c0       	rjmp	.+10     	; 0x55c <main+0x142>
 552:	80 91 63 00 	lds	r24, 0x0063
 556:	81 11       	cpse	r24, r1
 558:	10 92 63 00 	sts	0x0063, r1
				SendOffStasus = 1;
 55c:	c0 93 65 00 	sts	0x0065, r28
			}
			if(FanSpeedOverrideOff == 0) {
 560:	80 91 67 00 	lds	r24, 0x0067
 564:	81 11       	cpse	r24, r1
 566:	50 c0       	rjmp	.+160    	; 0x608 <main+0x1ee>
				if(keys & KEY_MINUS) {
 568:	80 91 6e 00 	lds	r24, 0x006E
 56c:	81 ff       	sbrs	r24, 1
 56e:	19 c0       	rjmp	.+50     	; 0x5a2 <main+0x188>
					if(FanSpeedOverride > -8) {
 570:	80 91 68 00 	lds	r24, 0x0068
 574:	89 3f       	cpi	r24, 0xF9	; 249
 576:	ac f0       	brlt	.+42     	; 0x5a2 <main+0x188>
						FanSpeedOverride--;
 578:	81 50       	subi	r24, 0x01	; 1
 57a:	80 93 68 00 	sts	0x0068, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 57e:	f8 94       	cli
 580:	90 91 70 00 	lds	r25, 0x0070
 584:	80 91 6a 00 	lds	r24, 0x006A
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							if(FanSpeed > 0) FanSpeed--;
 588:	18 16       	cp	r1, r24
 58a:	0c f4       	brge	.+2      	; 0x58e <main+0x174>
 58c:	81 50       	subi	r24, 0x01	; 1
							if(SpeedSet > 0) SpeedSet--;
 58e:	19 16       	cp	r1, r25
 590:	34 f0       	brlt	.+12     	; 0x59e <main+0x184>
 592:	90 93 70 00 	sts	0x0070, r25
 596:	80 93 6a 00 	sts	0x006A, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 59a:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <main+0x188>
 59e:	91 50       	subi	r25, 0x01	; 1
 5a0:	f8 cf       	rjmp	.-16     	; 0x592 <main+0x178>
						}
					}
				}
				if(keys & KEY_PLUS) {
 5a2:	80 91 6e 00 	lds	r24, 0x006E
 5a6:	82 ff       	sbrs	r24, 2
 5a8:	8b c0       	rjmp	.+278    	; 0x6c0 <main+0x2a6>
					if(FanSpeedOverride < 7) {
 5aa:	80 91 68 00 	lds	r24, 0x0068
 5ae:	87 30       	cpi	r24, 0x07	; 7
 5b0:	0c f0       	brlt	.+2      	; 0x5b4 <main+0x19a>
 5b2:	86 c0       	rjmp	.+268    	; 0x6c0 <main+0x2a6>
						FanSpeedOverride++;
 5b4:	8f 5f       	subi	r24, 0xFF	; 255
 5b6:	80 93 68 00 	sts	0x0068, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5ba:	f8 94       	cli
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							if(FanSpeed < FanSpeedMax) FanSpeed++;
 5bc:	80 91 6f 00 	lds	r24, 0x006F
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	40 91 6a 00 	lds	r20, 0x006A
 5c6:	50 91 70 00 	lds	r21, 0x0070
					}
				}
				if(keys & KEY_PLUS) {
					if(FanSpeedOverride < 7) {
						FanSpeedOverride++;
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
 5ca:	21 e0       	ldi	r18, 0x01	; 1
 5cc:	65 2f       	mov	r22, r21
 5ce:	22 23       	and	r18, r18
 5d0:	c1 f0       	breq	.+48     	; 0x602 <main+0x1e8>
							if(FanSpeed < FanSpeedMax) FanSpeed++;
 5d2:	24 2f       	mov	r18, r20
 5d4:	33 27       	eor	r19, r19
 5d6:	27 fd       	sbrc	r18, 7
 5d8:	30 95       	com	r19
 5da:	28 17       	cp	r18, r24
 5dc:	39 07       	cpc	r19, r25
 5de:	0c f4       	brge	.+2      	; 0x5e2 <main+0x1c8>
 5e0:	4f 5f       	subi	r20, 0xFF	; 255
 5e2:	5f 5f       	subi	r21, 0xFF	; 255
							if(SpeedSet < FanSpeedMax) SpeedSet++;
 5e4:	26 2f       	mov	r18, r22
 5e6:	33 27       	eor	r19, r19
 5e8:	27 fd       	sbrc	r18, 7
 5ea:	30 95       	com	r19
 5ec:	28 17       	cp	r18, r24
 5ee:	39 07       	cpc	r19, r25
 5f0:	34 f0       	brlt	.+12     	; 0x5fe <main+0x1e4>
 5f2:	60 93 70 00 	sts	0x0070, r22
 5f6:	40 93 6a 00 	sts	0x006A, r20
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 5fa:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 5fc:	61 c0       	rjmp	.+194    	; 0x6c0 <main+0x2a6>
					}
				}
				if(keys & KEY_PLUS) {
					if(FanSpeedOverride < 7) {
						FanSpeedOverride++;
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
 5fe:	20 e0       	ldi	r18, 0x00	; 0
 600:	e5 cf       	rjmp	.-54     	; 0x5cc <main+0x1b2>
 602:	50 93 70 00 	sts	0x0070, r21
 606:	f7 cf       	rjmp	.-18     	; 0x5f6 <main+0x1dc>
							if(FanSpeed < FanSpeedMax) FanSpeed++;
							if(SpeedSet < FanSpeedMax) SpeedSet++;
						}
					}
				}
			} else if(setup_mode) {
 608:	80 91 63 00 	lds	r24, 0x0063
 60c:	88 23       	and	r24, r24
 60e:	79 f1       	breq	.+94     	; 0x66e <main+0x254>
				if(keys & KEY_MINUS) {
 610:	80 91 6e 00 	lds	r24, 0x006E
 614:	81 ff       	sbrs	r24, 1
 616:	05 c0       	rjmp	.+10     	; 0x622 <main+0x208>
					SpeedSet--;
 618:	80 91 70 00 	lds	r24, 0x0070
 61c:	81 50       	subi	r24, 0x01	; 1
 61e:	80 93 70 00 	sts	0x0070, r24
				}
				if(keys & KEY_PLUS) {
 622:	80 91 6e 00 	lds	r24, 0x006E
 626:	82 ff       	sbrs	r24, 2
 628:	05 c0       	rjmp	.+10     	; 0x634 <main+0x21a>
					SpeedSet++;
 62a:	80 91 70 00 	lds	r24, 0x0070
 62e:	8f 5f       	subi	r24, 0xFF	; 255
 630:	80 93 70 00 	sts	0x0070, r24
				}
				if(SpeedSet < 0) SpeedSet = 0;
 634:	20 91 70 00 	lds	r18, 0x0070
 638:	27 ff       	sbrs	r18, 7
 63a:	03 c0       	rjmp	.+6      	; 0x642 <main+0x228>
 63c:	10 92 70 00 	sts	0x0070, r1
 640:	0c c0       	rjmp	.+24     	; 0x65a <main+0x240>
				else if(SpeedSet > FanSpeedMax) SpeedSet = FanSpeedMax;
 642:	40 91 6f 00 	lds	r20, 0x006F
 646:	33 27       	eor	r19, r19
 648:	27 fd       	sbrc	r18, 7
 64a:	30 95       	com	r19
 64c:	84 2f       	mov	r24, r20
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	82 17       	cp	r24, r18
 652:	93 07       	cpc	r25, r19
 654:	14 f4       	brge	.+4      	; 0x65a <main+0x240>
 656:	40 93 70 00 	sts	0x0070, r20
				FlashLED(SpeedSet, 5, 5);
 65a:	45 e0       	ldi	r20, 0x05	; 5
 65c:	65 e0       	ldi	r22, 0x05	; 5
 65e:	80 91 70 00 	lds	r24, 0x0070
 662:	49 dd       	rcall	.-1390   	; 0xf6 <FlashLED>
				RequestCountdown = 30;
 664:	d0 93 61 00 	sts	0x0061, r29
				SpeedSetChanged = 1;
 668:	c0 93 69 00 	sts	0x0069, r28
 66c:	29 c0       	rjmp	.+82     	; 0x6c0 <main+0x2a6>
			} else if((keys & KEY_MINUS) || (keys & KEY_PLUS)) {
 66e:	80 91 6e 00 	lds	r24, 0x006E
 672:	81 fd       	sbrc	r24, 1
 674:	04 c0       	rjmp	.+8      	; 0x67e <main+0x264>
 676:	80 91 6e 00 	lds	r24, 0x006E
 67a:	82 ff       	sbrs	r24, 2
 67c:	21 c0       	rjmp	.+66     	; 0x6c0 <main+0x2a6>
				if(PressKeyOnTime == 0 && PressKeyOffTime == 0) { // not in changing process
 67e:	80 91 6b 00 	lds	r24, 0x006B
 682:	81 11       	cpse	r24, r1
 684:	1d c0       	rjmp	.+58     	; 0x6c0 <main+0x2a6>
 686:	80 91 6c 00 	lds	r24, 0x006C
 68a:	81 11       	cpse	r24, r1
 68c:	19 c0       	rjmp	.+50     	; 0x6c0 <main+0x2a6>
					LED1_ON;
 68e:	d9 9a       	sbi	0x1b, 1	; 27
					while(keys) {
 690:	80 91 6e 00 	lds	r24, 0x006E
 694:	88 23       	and	r24, r24
 696:	a1 f0       	breq	.+40     	; 0x6c0 <main+0x2a6>
						wdt_reset(); // wait keys release
 698:	a8 95       	wdr
						if((keys & KEY_MINUS) && (keys & KEY_PLUS)) {
 69a:	80 91 6e 00 	lds	r24, 0x006E
 69e:	81 ff       	sbrs	r24, 1
 6a0:	f7 cf       	rjmp	.-18     	; 0x690 <main+0x276>
 6a2:	80 91 6e 00 	lds	r24, 0x006E
 6a6:	82 ff       	sbrs	r24, 2
 6a8:	f3 cf       	rjmp	.-26     	; 0x690 <main+0x276>
							setup_mode = 1;
 6aa:	c0 93 63 00 	sts	0x0063, r28
							FlashLED(5, 2, 2);
 6ae:	42 e0       	ldi	r20, 0x02	; 2
 6b0:	62 e0       	ldi	r22, 0x02	; 2
 6b2:	85 e0       	ldi	r24, 0x05	; 5
 6b4:	20 dd       	rcall	.-1472   	; 0xf6 <FlashLED>
							Delay100ms(30);
 6b6:	8e e1       	ldi	r24, 0x1E	; 30
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	11 dd       	rcall	.-1502   	; 0xde <Delay100ms>
							RequestCountdown = 30;
 6bc:	d0 93 61 00 	sts	0x0061, r29
							break;
						}
					}
				}
			}
			LED1_ON;
 6c0:	d9 9a       	sbi	0x1b, 1	; 27
			while(keys) wdt_reset(); // wait keys release
 6c2:	80 91 6e 00 	lds	r24, 0x006E
 6c6:	88 23       	and	r24, r24
 6c8:	11 f0       	breq	.+4      	; 0x6ce <main+0x2b4>
 6ca:	a8 95       	wdr
 6cc:	fa cf       	rjmp	.-12     	; 0x6c2 <main+0x2a8>
 6ce:	8b e4       	ldi	r24, 0x4B	; 75
 6d0:	9d e1       	ldi	r25, 0x1D	; 29
 6d2:	01 97       	sbiw	r24, 0x01	; 1
 6d4:	f1 f7       	brne	.-4      	; 0x6d2 <main+0x2b8>
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <main+0x2be>
 6d8:	00 00       	nop
			_delay_ms(30);
			LED1_OFF;
 6da:	d9 98       	cbi	0x1b, 1	; 27
		}
		if(RequestCountdown == 0) {
 6dc:	80 91 61 00 	lds	r24, 0x0061
 6e0:	81 11       	cpse	r24, r1
 6e2:	f1 ce       	rjmp	.-542    	; 0x4c6 <main+0xac>
			if(setup_mode == 0) {
 6e4:	80 91 63 00 	lds	r24, 0x0063
 6e8:	81 11       	cpse	r24, r1
 6ea:	56 c0       	rjmp	.+172    	; 0x798 <main+0x37e>
				if(FanSpeedOverrideOff == 0 || SendOffStasus == 1) {
 6ec:	80 91 67 00 	lds	r24, 0x0067
 6f0:	88 23       	and	r24, r24
 6f2:	29 f0       	breq	.+10     	; 0x6fe <main+0x2e4>
 6f4:	90 91 65 00 	lds	r25, 0x0065
 6f8:	91 30       	cpi	r25, 0x01	; 1
 6fa:	09 f0       	breq	.+2      	; 0x6fe <main+0x2e4>
 6fc:	4a c0       	rjmp	.+148    	; 0x792 <main+0x378>
					if(send_data == 0) send_data = (nrf_last_status << 5) | (FanSpeedOverrideOff << 4) | (FanSpeedOverride & 0x0F);
 6fe:	90 91 62 00 	lds	r25, 0x0062
 702:	91 11       	cpse	r25, r1
 704:	0e c0       	rjmp	.+28     	; 0x722 <main+0x308>
 706:	90 91 64 00 	lds	r25, 0x0064
 70a:	92 95       	swap	r25
 70c:	99 0f       	add	r25, r25
 70e:	90 7e       	andi	r25, 0xE0	; 224
 710:	82 95       	swap	r24
 712:	80 7f       	andi	r24, 0xF0	; 240
 714:	89 2b       	or	r24, r25
 716:	90 91 68 00 	lds	r25, 0x0068
 71a:	9f 70       	andi	r25, 0x0F	; 15
 71c:	89 2b       	or	r24, r25
 71e:	80 93 62 00 	sts	0x0062, r24
					NRF24_Buffer[0] = send_data;
 722:	80 91 62 00 	lds	r24, 0x0062
 726:	80 93 71 00 	sts	0x0071, r24
					nrf_last_status = NRF24_TransmitShockBurst(1, sizeof(master_data)); // Enhanced ShockBurst, ACK with payload
 72a:	65 e0       	ldi	r22, 0x05	; 5
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	6d dd       	rcall	.-1318   	; 0x20a <NRF24_TransmitShockBurst>
 730:	80 93 64 00 	sts	0x0064, r24
					if(nrf_last_status) { // some problem
 734:	88 23       	and	r24, r24
 736:	41 f0       	breq	.+16     	; 0x748 <main+0x32e>
						FlashLED(nrf_last_status, 3, 3);
 738:	43 e0       	ldi	r20, 0x03	; 3
 73a:	63 e0       	ldi	r22, 0x03	; 3
 73c:	dc dc       	rcall	.-1608   	; 0xf6 <FlashLED>
						RequestCountdown = EEPROM_read(EPROM_PauseWhenError); // sec
 73e:	84 e0       	ldi	r24, 0x04	; 4
 740:	94 dc       	rcall	.-1752   	; 0x6a <EEPROM_read>
 742:	80 93 61 00 	sts	0x0061, r24
 746:	bf ce       	rjmp	.-642    	; 0x4c6 <main+0xac>
						} else {
						send_data = 0;
 748:	10 92 62 00 	sts	0x0062, r1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 74c:	f8 94       	cli
						ATOMIC_BLOCK(ATOMIC_FORCEON) {
							FanSpeed = ((master_data*) &NRF24_Buffer)->FanSpeed + FanSpeedOverride;
 74e:	20 91 68 00 	lds	r18, 0x0068
 752:	80 91 73 00 	lds	r24, 0x0073
 756:	28 0f       	add	r18, r24
 758:	20 93 6a 00 	sts	0x006A, r18
							if(FanSpeed < 0) FanSpeed = 0;
 75c:	27 ff       	sbrs	r18, 7
 75e:	03 c0       	rjmp	.+6      	; 0x766 <main+0x34c>
 760:	10 92 6a 00 	sts	0x006A, r1
 764:	0c c0       	rjmp	.+24     	; 0x77e <main+0x364>
							else if(FanSpeed > FanSpeedMax) FanSpeed = FanSpeedMax;
 766:	40 91 6f 00 	lds	r20, 0x006F
 76a:	33 27       	eor	r19, r19
 76c:	27 fd       	sbrc	r18, 7
 76e:	30 95       	com	r19
 770:	84 2f       	mov	r24, r20
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	82 17       	cp	r24, r18
 776:	93 07       	cpc	r25, r19
 778:	14 f4       	brge	.+4      	; 0x77e <main+0x364>
 77a:	40 93 6a 00 	sts	0x006A, r20
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 77e:	78 94       	sei
						}
						RequestCountdownLast = RequestCountdown = ((master_data*) &NRF24_Buffer)->Pause;
 780:	80 91 75 00 	lds	r24, 0x0075
 784:	80 93 61 00 	sts	0x0061, r24
 788:	80 93 60 00 	sts	0x0060, r24
						SendOffStasus = 0;
 78c:	10 92 65 00 	sts	0x0065, r1
 790:	9a ce       	rjmp	.-716    	; 0x4c6 <main+0xac>
					}
					} else {
					RequestCountdown = 1; // sec
 792:	c0 93 61 00 	sts	0x0061, r28
 796:	97 ce       	rjmp	.-722    	; 0x4c6 <main+0xac>
				}
			} else { // setup mode timeout
				setup_mode = 0;
 798:	10 92 63 00 	sts	0x0063, r1
 79c:	94 ce       	rjmp	.-728    	; 0x4c6 <main+0xac>

0000079e <memcpy_P>:
 79e:	fb 01       	movw	r30, r22
 7a0:	dc 01       	movw	r26, r24
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <memcpy_P+0xa>
 7a4:	05 90       	lpm	r0, Z+
 7a6:	0d 92       	st	X+, r0
 7a8:	41 50       	subi	r20, 0x01	; 1
 7aa:	50 40       	sbci	r21, 0x00	; 0
 7ac:	d8 f7       	brcc	.-10     	; 0x7a4 <memcpy_P+0x6>
 7ae:	08 95       	ret

000007b0 <_exit>:
 7b0:	f8 94       	cli

000007b2 <__stop_program>:
 7b2:	ff cf       	rjmp	.-2      	; 0x7b2 <__stop_program>
